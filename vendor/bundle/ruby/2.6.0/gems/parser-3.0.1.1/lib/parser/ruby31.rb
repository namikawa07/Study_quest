# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby31 < Parser::Base


  def version
    31
  end

  def default_encoding
    Encoding::UTF_8
  end

  def endless_method_name(name_t)
    if !%w[=== == != <= >=].include?(name_t[0]) && name_t[0].end_with?('=')
      diagnostic :error, :endless_setter, nil, name_t
    end
  end
##### State transition tables begin ###

clist = [
'-706,850,-112,218,219,-115,363,-706,-706,-706,1083,868,298,-706,-706',
'655,-706,228,868,657,-120,-113,892,-116,-706,-706,1123,1124,123,298',
'973,-118,-119,122,868,552,-706,-706,614,-706,-706,-706,-706,-706,614',
'614,614,614,-114,964,-114,803,627,229,218,219,894,1125,229,893,-114',
'229,-727,-113,-117,-112,-706,-706,-706,-706,-706,-706,-706,-706,-706',
'-706,-706,-706,-706,-706,-499,654,-706,-706,-706,656,682,-706,-702,-114',
'-706,-117,1084,-706,-119,-289,-703,229,-706,297,-706,363,-706,-706,-115',
'-706,-706,-706,-706,-706,-601,-706,-706,-706,-106,-120,297,-601,-601',
'-601,-112,-118,-601,-601,-601,-112,-601,-706,-116,-111,-706,-706,-107',
'-706,-601,-706,-601,-601,-601,-113,-109,-110,-706,614,-113,-116,-601',
'-601,229,-601,-601,-601,-601,-601,-119,123,123,-727,963,-105,122,122',
'123,123,123,123,-114,122,122,122,122,-114,-104,-108,-103,-702,-601,-601',
'-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-715,621',
'-601,-601,-601,298,-601,-601,-703,808,-601,218,219,-601,-601,-702,-601',
'298,-601,-117,-601,677,-601,-601,-117,-601,-601,-601,-601,-601,229,-601',
'-115,-601,101,102,763,-115,101,102,229,-715,-105,-120,676,218,219,-601',
'-120,-118,-601,-601,-601,-601,-118,-601,-116,-601,642,-706,552,-116',
'-601,948,919,-601,-706,-706,-706,293,3,123,-706,-706,953,-706,122,229',
'-106,838,-117,293,-119,-706,-706,123,837,-119,676,642,122,-106,297,786',
'-108,-706,-706,864,-706,-706,-706,-706,-706,-115,297,123,-98,-110,-105',
'642,122,787,103,104,251,642,103,104,-84,-119,595,594,644,643,640,-706',
'-706,-706,-706,-706,-706,-706,-706,-706,-706,-706,-706,-706,-706,229',
'1078,-706,-706,-706,-106,682,-706,-115,-105,-706,229,-105,-706,644,643',
'645,-117,-706,1077,-706,-108,-706,-706,-105,-706,-706,-706,-706,-706',
'-314,-706,-706,-706,644,643,647,-314,-314,-314,644,643,640,-314,-314',
'-106,-314,-706,-106,606,-706,-706,608,-107,-314,-706,224,1138,251,863',
'-106,-108,-706,291,-108,-116,-314,-314,972,-314,-314,-314,-314,-314',
'-715,919,-108,621,579,-107,576,575,574,584,577,-605,229,-612,662,1175',
'248,229,-605,587,250,249,-314,-314,-314,-314,-314,-314,-314,-314,-314',
'-314,-314,-314,-314,-314,226,226,-314,-314,-314,582,681,-314,-115,476',
'-314,225,642,-314,592,591,595,594,-314,642,-314,588,-314,-314,-103,-314',
'-314,-314,-314,-314,-598,-314,677,-314,-702,-107,-112,-598,-598,-598',
'-605,659,-598,-598,-598,-604,-598,-314,-111,833,-314,-314,-604,-109',
'-598,-314,-598,-598,-598,-120,-120,573,-314,717,919,-118,-598,-598,-120',
'-598,-598,-598,-598,-598,808,-107,644,643,-107,-108,642,-613,-603,644',
'643,653,1187,-606,-609,-603,-107,-117,809,1138,-606,-609,-598,-598,-598',
'-598,-598,-598,-598,-598,-598,-598,-598,-598,-598,-598,-604,-607,-598',
'-598,-598,-612,-598,-598,-607,229,-598,229,642,-598,-598,642,-598,642',
'-598,642,-598,606,-598,-598,608,-598,-598,-598,-598,-598,-113,-598,-314',
'-598,644,643,649,-603,805,-314,-314,-314,-606,-609,-314,-314,-314,-598',
'-314,123,-598,-598,-598,-598,122,-598,-314,-598,-314,-314,-314,999,-598',
'627,-112,-598,-607,628,-314,-314,1000,-314,-314,-314,-314,-314,644,643',
'640,644,643,644,643,644,643,658,1001,-608,-601,836,-598,834,627,743',
'-608,-601,894,-598,-314,-314,-314,-314,-314,-314,-314,-314,-314,-314',
'-314,-314,-314,-314,268,269,-314,-314,-314,224,866,-314,606,804,-314',
'608,669,-314,-314,1004,-314,224,-314,251,-314,667,-314,-314,291,-314',
'-314,-314,-314,-314,850,-314,-314,-314,218,219,267,266,-611,-314,-608',
'-601,-610,-598,-703,-611,985,-314,-314,-610,-314,-314,-314,-314,-611',
'-314,587,-314,-610,-706,251,606,-314,-613,605,-118,-706,-706,-706,584',
'225,-706,-706,-706,-305,-706,799,-105,1043,587,906,-305,225,-706,-706',
'-706,-706,-706,123,-114,-305,1011,87,122,588,-706,-706,-314,-706,-706',
'-706,-706,-706,-611,88,229,1003,-610,-315,1159,-104,874,595,594,89,-315',
'870,588,123,220,871,757,-113,122,-315,-706,-706,-706,-706,-706,-706',
'-706,-706,-706,-706,-706,-706,-706,-706,-305,985,-706,-706,-706,634',
'865,-706,948,919,-706,587,251,-706,-706,1029,-706,-287,-706,1033,-706',
'229,-706,-706,1036,-706,-706,-706,-706,-706,-314,-706,-706,-706,-315',
'423,1038,-314,-314,-314,425,424,772,-314,-314,787,-314,-706,1041,588',
'-706,-706,-706,-706,-314,-706,1043,-706,218,219,1043,1003,-706,888,889',
'-116,-314,-314,229,-314,-314,-314,-314,-314,1187,1213,1051,1187,579',
'224,576,575,574,584,577,579,554,576,575,574,1053,577,1187,587,217,474',
'-314,-314,-314,-314,-314,-314,-314,-314,-314,-314,-314,-314,-314,-314',
'626,1062,-314,-314,-314,582,681,-314,1063,216,-314,1068,779,-314,592',
'591,595,594,-314,1069,-314,588,-314,-314,1070,-314,-314,-314,-314,-314',
'584,-314,-290,-314,225,1185,224,1187,625,229,587,224,224,1153,229,229',
'1074,-314,1153,223,-314,-314,632,-314,796,-314,-315,632,221,229,229',
'573,-314,-315,229,-118,320,77,78,24,11,65,-315,595,594,71,72,868,588',
'1082,75,-706,73,74,76,33,34,79,80,126,127,128,129,130,81,31,30,111,110',
'112,113,225,415,21,621,229,225,225,229,10,51,322,12,115,114,116,105',
'64,107,106,108,-315,109,117,118,-314,101,102,47,48,46,224,-314,-706',
'1090,224,794,-703,544,215,-706,-314,630,1092,772,-702,1095,542,349,-706',
'43,632,426,36,793,1098,66,67,224,1100,68,1102,38,229,1104,624,50,1183',
'-706,791,251,526,828,829,622,22,830,117,118,789,99,87,90,91,788,92,94',
'93,95,475,-314,1181,477,88,98,478,225,610,-706,777,225,82,248,89,103',
'104,250,249,44,45,320,77,78,24,11,65,228,775,773,71,72,772,769,225,75',
'-699,73,74,76,33,34,79,80,126,127,128,129,130,81,31,30,111,110,112,113',
'1119,579,21,576,575,574,1120,577,10,51,322,12,115,114,116,105,64,107',
'106,108,229,109,117,118,224,101,102,47,48,46,-349,1158,-598,609,224',
'766,1129,-349,779,-598,1156,473,132,229,-699,868,-349,783,-598,43,474',
'229,36,1139,1141,66,67,764,763,68,1134,38,576,575,574,50,577,-699,772',
'579,251,576,575,574,22,577,1177,757,558,99,87,90,91,229,92,94,93,95',
'510,225,746,-98,88,98,229,-349,522,-598,524,225,82,1151,89,103,104,526',
'779,44,45,320,77,78,24,11,65,783,599,1173,71,72,1154,132,-83,75,-700',
'73,74,76,33,34,79,80,126,127,128,129,130,81,31,30,111,110,112,113,1172',
'579,21,576,575,574,229,577,10,51,322,12,115,114,116,105,64,107,106,108',
'537,109,117,118,538,101,102,47,48,46,229,579,-601,576,575,574,251,577',
'779,-601,229,731,229,1177,-700,545,302,783,-601,43,229,-619,36,363,363',
'66,67,293,229,68,1134,38,576,575,574,50,577,-700,248,549,559,555,250',
'249,22,246,247,1043,868,99,87,90,91,896,92,94,93,95,898,287,686,904',
'88,98,906,908,524,-601,526,869,82,868,89,103,104,1043,757,44,45,320',
'77,78,24,11,65,229,1043,293,71,72,293,348,229,75,293,73,74,76,33,34',
'79,80,243,757,287,251,1160,81,31,30,111,110,112,113,510,919,21,126,127',
'128,129,130,10,51,322,12,115,114,116,105,64,107,106,108,1177,109,117',
'118,510,101,102,47,48,46,251,255,256,257,258,268,269,263,264,259,260',
'1201,244,245,119,1120,261,262,940,43,941,242,36,229,851,66,67,675,919',
'68,950,38,248,951,254,50,250,249,674,246,247,267,266,252,22,253,229',
'229,670,99,87,90,91,1187,92,94,93,95,666,665,-288,229,88,98,-287,265',
'-703,961,663,,82,,89,103,104,,,44,45,320,77,78,24,11,65,,,,71,72,,,',
'75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,21,,,,,671',
'10,51,322,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102,47',
'48,46,251,255,256,257,258,268,269,263,264,259,260,,244,245,,,261,262',
',43,,,36,,,66,67,,,68,,38,248,,254,50,250,249,,246,247,267,266,252,22',
'253,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,265,,-260,,,82,,89,103,104',
',,44,45,320,77,78,24,11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,',
',81,31,30,111,110,112,113,,,21,,,,,671,10,51,322,12,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,47,48,46,251,255,256,257,258,268',
'269,263,264,259,260,,244,245,,,261,262,,43,,,36,,,66,67,,,68,,38,248',
',254,50,250,249,,246,247,267,266,252,22,253,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,265,,,,,82,,89,103,104,,,44,45,320,77,78,24,11,65,,,,71',
'72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,21,,',
',,916,10,51,322,12,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,47,48,46,251,255,256,257,258,268,269,263,264,259,260,,244,245,,',
'261,262,,43,,,36,,,66,67,,,68,,38,248,,254,50,250,249,,246,247,267,266',
'252,22,253,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,265,,,,,82,,89,103',
'104,,,44,45,7,77,78,24,11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,',
',,,81,31,30,111,110,112,113,,,21,,,,,944,10,51,9,12,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,47,48,46,251,255,256,257,258,268',
'269,263,264,259,260,,244,245,,,261,262,,43,,,36,,,66,67,,,68,,38,248',
',254,50,250,249,,246,247,267,266,252,22,253,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,265,,,,,82,,89,103,104,,,44,45,320,77,78,24,11,65,,,,71',
'72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,21,,',
',,,10,51,322,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'47,48,46,251,255,256,257,258,268,269,263,264,259,260,,244,245,,,261',
'262,,43,,,36,,,66,67,,,68,,38,248,,254,50,250,249,,246,247,267,266,252',
'22,253,,,,99,87,90,91,,92,94,93,95,,,,,88,98,229,265,,,,,82,,89,103',
'104,,,44,45,320,77,78,24,11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80',
',,,,,81,31,30,111,110,112,113,,,21,,,,,,10,51,322,12,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,47,48,46,251,255,256,257,258,268',
'269,263,264,259,260,,244,245,,,261,262,,43,,,36,,,66,67,,,68,,38,248',
',254,50,250,249,,246,247,267,266,252,22,253,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,265,,,,,82,,89,103,104,,,44,45,7,77,78,24,11,65,,,,71',
'72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,21,,',
',,,10,51,9,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102,47',
'48,46,251,255,256,257,258,268,269,263,264,259,260,,244,245,,,261,262',
',43,,,36,,,66,67,,,68,,38,248,,254,50,250,249,,246,247,267,266,252,22',
'253,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,265,,,,,82,,89,103,104,,',
'44,45,320,77,78,24,11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81',
'31,30,111,110,112,113,,,21,,,,,,10,51,322,12,115,114,116,105,64,107',
'106,108,,109,117,118,,101,102,47,48,46,251,255,256,257,258,268,269,263',
'264,259,260,,244,245,,,261,262,,43,,,36,,,66,67,,,68,,38,248,,254,50',
'250,249,,246,247,267,266,252,22,253,,,,99,87,90,91,,92,94,93,95,,,,',
'88,98,,265,,,,,82,,89,103,104,,,44,45,320,77,78,24,11,65,,,,71,72,,',
',75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,21,,,,,,10',
'51,322,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48',
'46,251,255,256,257,258,268,269,263,264,259,260,,244,245,,,261,262,,43',
',,36,,,66,67,,,68,,38,248,,254,50,250,249,,246,247,267,266,252,22,253',
',,,99,87,90,91,,92,94,93,95,,,,,88,98,,265,,,,,82,,89,103,104,,,44,45',
'320,77,78,24,11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30',
'111,110,112,113,,,21,,,,,,10,51,322,12,115,114,116,105,64,107,106,108',
',109,117,118,,101,102,47,48,46,251,255,256,257,258,268,269,263,264,259',
'260,,244,245,,,261,262,,43,,,36,,,66,67,,,68,,38,248,,254,50,250,249',
',246,247,267,266,252,22,253,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,265',
',,,,82,,89,103,104,,,44,45,320,77,78,24,11,65,,,,71,72,,,,75,,73,74',
'76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,21,,,,,,10,51,322,12',
'115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,251,255',
'256,257,258,268,269,263,264,259,260,,244,245,,,261,262,,43,,,324,,,66',
'67,,,68,,38,248,,254,50,250,249,,246,247,267,266,252,22,253,,,,99,87',
'90,91,,92,94,93,95,,,,,88,98,,265,,,,,82,,89,103,104,,,44,45,320,77',
'78,24,11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110',
'112,113,,,21,,,251,,,10,51,322,12,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,47,48,46,251,-728,-728,-728,-728,268,269,248,,-728',
'-728,250,249,,246,247,261,262,,43,,,36,,,66,67,,,68,,38,248,,254,50',
'250,249,,246,247,267,266,252,22,253,,,,99,87,90,91,,92,94,93,95,,,,',
'88,98,,579,,576,575,574,82,577,89,103,104,,,44,45,320,77,78,24,11,65',
',,,71,72,,,,75,,73,74,76,33,34,79,80,779,,,,,81,31,30,111,110,112,113',
',579,21,576,575,574,,577,10,51,322,12,115,114,116,105,64,107,106,108',
',109,117,118,,101,102,47,48,46,251,-728,-728,-728,-728,268,269,,779',
'-728,-728,,,,,,261,262,,43,,,36,,,66,67,,,68,,38,248,,254,50,250,249',
',246,247,267,266,252,22,253,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,',
',,,,82,,89,103,104,,,44,45,320,77,78,24,11,65,,,,71,72,,,,75,,73,74',
'76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,21,,,,,,10,51,322,12',
'115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,251,255',
'256,257,258,268,269,,,259,260,,,,,,261,262,,43,,,36,,,66,67,,,68,,38',
'248,,254,50,250,249,,246,247,267,266,252,22,253,,,,99,87,90,91,,92,94',
'93,95,,,,,88,98,,,,,,,82,,89,103,104,,,44,45,320,77,78,24,11,65,,,,71',
'72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,21,,',
',,,10,51,322,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'47,48,46,251,255,256,257,258,268,269,263,,259,260,,,,,,261,262,,43,',
',36,,,66,67,,,68,,38,248,,254,50,250,249,,246,247,267,266,252,22,253',
',,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,44,45,320',
'77,78,24,11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111',
'110,112,113,,,21,,,,,,10,51,322,12,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,47,48,46,251,,,,,,,,,,,,,,,,261,262,,43,,,36,,,66,67',
',,68,,38,248,,254,50,250,249,,246,247,,,252,22,253,,,,99,87,90,91,,92',
'94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,44,45,320,77,78,24,11,65,',
',,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,',
'21,,,,,,10,51,322,12,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,47,48,46,251,-728,-728,-728,-728,268,269,,,-728,-728,,,,,,261,262',
',43,,,36,,,66,67,,,68,,38,248,,254,50,250,249,,246,247,267,266,252,22',
'253,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,44',
'45,320,77,78,24,11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31',
'30,111,110,112,113,,,21,,,,,,10,51,322,12,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,47,48,46,251,-728,-728,-728,-728,268,269,',
',-728,-728,,,,,,261,262,,43,,,36,,,66,67,,,68,,38,248,,254,50,250,249',
',246,247,267,266,252,22,253,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,',
',,,,82,,89,103,104,,,44,45,320,77,78,24,11,65,,,,71,72,,,,75,,73,74',
'76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,21,,,,,,10,51,322,12',
'115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,251,-728',
'-728,-728,-728,268,269,,,-728,-728,,,,,,261,262,,43,,,36,,,66,67,,,68',
',38,248,,254,50,250,249,,246,247,267,266,252,22,253,,,,99,87,90,91,',
'92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,44,45,320,77,78,24,11,65',
',,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,',
',21,,,,,,10,51,322,12,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,47,48,46,251,,,,,,,,,,,,,,,,261,262,,43,,,36,,,66,67,,,68,,38,248',
',254,50,250,249,,246,247,,,252,22,253,,,,99,87,90,91,,92,94,93,95,,',
',,88,98,,,,,,,82,,89,103,104,,,44,45,320,77,78,24,11,65,,,,71,72,,,',
'75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,21,,,,,,10',
'51,322,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48',
'46,251,255,256,257,258,268,269,263,264,259,260,,-728,-728,,,261,262',
',43,,,36,,,66,67,,,68,,38,248,,254,50,250,249,,246,247,267,266,252,22',
'253,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,44',
'45,320,77,78,24,11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31',
'30,111,110,112,113,,,21,,,,,,10,51,322,12,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,47,48,46,251,255,256,257,258,268,269,263,264',
'259,260,,-728,-728,,,261,262,,43,,,36,,,66,67,,,68,,38,248,,254,50,250',
'249,,246,247,267,266,252,22,253,,,,99,87,90,91,,92,94,93,95,,,,,88,98',
',,,,,,82,,89,103,104,,,44,45,320,77,78,24,11,65,,,,71,72,,,,75,,73,74',
'76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,21,,,,,,10,51,322,12',
'115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,251,255',
'256,257,258,268,269,263,264,259,260,,-728,-728,,,261,262,,43,,,36,,',
'66,67,,,68,,38,248,,254,50,250,249,,246,247,267,266,252,22,253,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,44,45,320,77',
'78,24,11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110',
'112,113,,,21,,,,,,10,51,322,12,115,114,116,105,64,107,106,108,,109,117',
'118,,101,102,47,48,46,251,255,256,257,258,268,269,263,264,259,260,,-728',
'-728,,,261,262,,43,,,324,,,66,67,,,68,,38,248,,254,50,250,249,,246,247',
'267,266,252,22,253,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89',
'103,104,,,44,45,320,77,78,24,11,65,,,,71,72,,,,75,,73,74,76,33,34,79',
'80,,,,,,81,31,30,111,110,112,113,,,21,,,,,,10,51,322,12,115,114,116',
'105,64,107,106,108,,109,117,118,,101,102,47,48,46,251,-728,-728,-728',
'-728,268,269,,,-728,-728,,,,,,261,262,,43,,,324,,,66,67,,,68,,38,248',
',254,50,250,249,,246,247,267,266,252,22,253,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76',
'341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,,,115,114',
'116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,251,,,,,,,,,,',
',,,,,261,262,,234,,,240,,,66,67,,,68,,,248,,254,50,250,249,,246,247',
',,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,',
',44,45,77,78,24,11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31',
'30,111,110,112,113,,,21,,,,,,10,51,9,12,115,114,116,105,64,107,106,108',
',109,117,118,,101,102,47,48,46,251,,,,,,,,,,,,,,,,261,262,,43,,,36,',
',66,67,,,68,,38,248,,254,50,250,249,,246,247,,,,22,,,,,99,87,90,91,',
'92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,',
'73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,241,,,,,,,51,,',
'115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,251,,',
',,,,,,,,,,,,,261,262,,234,,,240,,,66,67,,,68,,,248,,,50,250,249,,246',
'247,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104',
'-429,,44,45,,,,-429,-429,-429,,,-429,-429,-429,,-429,,,,,,,,-429,-429',
'-429,-429,,,,,,,,,-429,-429,,-429,-429,-429,-429,-429,,,,,,,,,,,,,,',
',,,,,,,,-429,-429,-429,-429,-429,-429,-429,-429,-429,-429,-429,-429',
'-429,-429,,,-429,-429,-429,,,-429,,293,-429,,,-429,-429,,-429,,-429',
',-429,,-429,-429,,-429,-429,-429,-429,-429,-321,-429,-429,-429,,,,-321',
'-321,-321,,,-321,-321,-321,,-321,-429,,,-429,-429,,-429,-321,-429,-321',
'-321,,,,,-429,,,,-321,-321,,-321,-321,-321,-321,-321,,,,,,,,,,,,,,,',
',,,,,,,-321,-321,-321,-321,-321,-321,-321,-321,-321,-321,-321,-321,-321',
'-321,,,-321,-321,-321,,,-321,,302,-321,,,-321,-321,,-321,,-321,,-321',
',-321,-321,,-321,-321,-321,-321,-321,,-321,,-321,,,,,,,,,,,,,,-321,',
',-321,-321,,-321,,-321,77,78,24,,65,,-321,,71,72,,,,75,,73,74,76,33',
'34,79,80,,,,,,81,31,30,111,110,112,113,,,241,,,,,,,51,,,115,114,116',
'105,64,107,106,108,314,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,',
',,,,234,,,240,,,66,67,,,68,,311,,309,,50,,,315,,,,,,239,,,,,99,312,90',
'91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,',
'75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,241,,,,,,,51',
',,115,114,116,105,64,107,106,108,314,109,117,118,,101,102,47,48,46,',
',,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,311,,309,,50,,,315,,,,,,239',
',,,,99,312,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104',
'71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113',
',,241,,,,,,,51,,,115,114,116,105,64,107,106,108,314,109,117,118,,101',
'102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,311,,309,,50',
',,315,,,,,,239,,,,,99,312,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82',
'65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344',
'111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68',
',,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78',
'24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81',
'336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66',
'67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,',
',,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80',
',,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64',
'107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,',
'240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,',
',,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341,342',
'79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234',
',,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95',
',,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341',
'342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116',
'105,64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,',
',234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,,,,,,82,,89,103,104,-306,,44,45,,,,-306,-306,-306,,,-306',
'-306,-306,,-306,,,,,,,,-306,,-306,-306,-306,,,,111,110,112,113,-306',
'-306,,-306,-306,-306,-306,-306,,,,,115,114,116,,,,,,,,,,,101,102,,,345',
'-306,-306,-306,-306,-306,-306,-306,-306,-306,-306,-306,-306,-306,-306',
',,-306,-306,-306,,,-306,,,-306,,,-306,-306,,-306,,-306,,-306,,-306,-306',
',-306,-306,-306,-306,-306,,-306,,-306,,99,87,90,91,,92,94,93,95,,,,-306',
'88,98,-306,-306,-306,-306,,-306,82,-306,89,103,104,,-306,77,78,24,11',
'65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113',
',,21,,,,,,10,51,,12,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,47,48,46,,,,,,,,,,,,,,,,,,,,43,,,36,,,66,67,,,68,,38,,,,50,,,,,',
',,,22,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103',
'104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111,110',
'112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,314,109,117',
'118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,311',
',,,50,,,315,,,,,,239,,,,,99,312,90,91,,92,94,93,95,,,,,88,98,,,,77,78',
'24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81',
'336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106',
'108,314,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,',
',66,67,,,68,,,,,,50,,,315,,,,,,239,,,,,99,312,90,91,,92,94,93,95,,,',
',88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,33,34',
'79,80,,,,,,81,31,30,111,110,112,113,,,21,,,,,,,51,,,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234',
',,240,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,99,87,90,91,,92,94,93,95,',
',,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,33,34',
'79,80,,,,,,81,31,30,111,110,112,113,,,21,,,,,,,51,,,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234',
',,240,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,99,87,90,91,,92,94,93,95,',
',,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,33,34',
'79,80,,,,,,81,31,30,111,110,112,113,,,21,,,,,,,51,,,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234',
',,240,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,99,87,90,91,,92,94,93,95,',
',,,88,98,123,,,,,122,82,,89,103,104,,,44,45,77,78,24,11,65,,,,71,72',
',,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,21,,,,,',
'10,51,9,12,115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48',
'46,,,,,,,,,,,,,,,,,,,,43,,,36,,,66,67,,,68,,38,,,,50,,,,,,,,,22,,,,',
'99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,415,82,,89,103,104,,,44,45,77',
'78,24,,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110',
'112,113,,,21,,,,,,,51,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50',
',,,,,,,,22,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65',
'89,103,104,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110',
'112,113,,,21,,,,,,,51,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50',
',,,,,,,,22,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65',
'89,103,104,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110',
'112,113,,,21,,,,,,,51,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50',
',,,,,,,,22,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65',
'89,103,104,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110',
'112,113,,,21,,,,,,,51,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50',
',,,,,,,,22,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104',
',,44,45,77,78,24,11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81',
'31,30,111,110,112,113,,,21,,,,,,10,51,,12,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,43,,,36,,,66,67',
',,68,,38,,,,50,,,,,,,,,22,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,',
'77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,',
',81,31,30,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66',
'67,,,68,,431,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98',
',,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,33,34,79,80,',
',,,,81,31,30,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107',
'106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240',
',,66,67,,,68,,431,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,',
',88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,33,34',
'79,80,,,,,,81,31,30,111,110,112,113,,,21,,,,,,,51,,,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234',
',,240,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,99,87,90,91,,92,94,93,95,',
',,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,33,34',
'79,80,,,,,,81,31,30,111,110,112,113,,,21,,,,,,,51,,,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234',
',,240,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,99,87,90,91,,92,94,93,95,',
',,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,33,34',
'79,80,,,,,,81,31,30,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234',
',,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95',
',,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,33',
'34,79,80,,,,,,81,31,30,111,110,112,113,,,241,,,,,,,51,,,115,114,116',
'105,64,107,106,108,314,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,',
',,,,234,,,240,,,66,67,,,68,,311,,309,,50,,,315,,,,,,239,,,,,99,312,90',
'91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,',
'75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,241,,,,,,,51',
',,115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,,,,',
',,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87',
'90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45',
',75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,21,,,,,,,51',
',,115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,,,,',
',,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,99,87,90',
'91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,',
'75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,21,,,,,,,51',
',,115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,,,,',
',,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,99,87,90',
'91,,92,94,93,95,,,,,88,98,229,,,77,78,24,82,65,89,103,104,71,72,44,45',
',75,,73,74,76,341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,',
',,,,51,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48',
'46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,',
',99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71',
'72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111,110,112,113',
',,241,,,,,,,51,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239',
',,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104',
'71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111,110,112',
'113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,',
',,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103',
'104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111,110',
'112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50',
',,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65',
'89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111',
'110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,,109,117',
'118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,',
',50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82',
'65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344',
'111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68',
',,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78',
'24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81',
'336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66',
'67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,',
',,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80',
',,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64',
'107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,',
'240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,',
',,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341,342',
'79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234',
',,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95',
',,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341',
'342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116',
'105,64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,',
',234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76',
'341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,,,115,114',
'116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,',
',,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92',
'94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73',
'74,76,341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,',
',115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,',
',,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90',
'91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,',
'75,,73,74,76,341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,',
',,,51,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48,46',
',,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44',
'45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241',
',,,,,,51,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48',
'46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,',
',99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71',
'72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111,110,112,113',
',,241,,,,,,,51,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239',
',,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104',
'71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111,110,112',
'113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,',
',,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103',
'104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111,110',
'112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50',
',,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65',
'89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111',
'110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,,109,117',
'118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,',
',50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82',
'65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344',
'111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68',
',,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78',
'24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81',
'336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66',
'67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,',
',,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80',
',,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64',
'107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,',
'240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,',
',,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341,342',
'79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234',
',,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95',
',,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341',
'342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116',
'105,64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,',
',234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76',
'341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,,,115,114',
'116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,',
',,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92',
'94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73',
'74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,21,,,,,,,51,,,115',
'114,116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,',
',,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,99,87,90,91,',
'92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,',
'73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,241,,,,,,,51,,',
'115,114,116,105,64,107,106,108,314,109,117,118,,101,102,47,48,46,,,',
',,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,311,,309,,50,,,315,,,,,,239',
',,,,99,312,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104',
'71,72,44,512,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113',
',,241,,,,,,,51,,,115,114,116,105,64,107,106,108,314,109,117,118,,101',
'102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,311,,309,,50',
',,315,,,,,,239,,,,,99,312,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82',
'65,89,103,104,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111',
'110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,314,109',
'117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68',
',311,,309,,50,,,315,,,,,,239,,,,,99,312,90,91,,92,94,93,95,,,,,88,98',
'229,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79',
'80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105',
'64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234',
',,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95',
',,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341',
'342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116',
'105,64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,',
',234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76',
'341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,,,115,114',
'116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,',
',,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92',
'94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73',
'74,76,341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,',
',115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,',
',,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90',
'91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,44,45,77,78,24,11,65',
',,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,',
',21,,,,,,10,51,,12,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,47,48,46,,,,,,,,,,,,,,,,,,,,43,,,36,,,66,67,,,68,,38,,,,50,,,,,',
',,,22,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103',
'104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111,110',
'112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50',
',,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65',
'89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111',
'110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,,109,117',
'118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,558,,66,67,,,68,',
',,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24',
'82,65,89,103,104,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30',
'111,110,112,113,,,21,,,,,,,51,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68',
',,,,,50,,,,,,,,,22,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24',
'82,65,89,103,104,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30',
'111,110,112,113,,,21,,,,,,,51,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68',
',,,,,50,,,,,,,,,22,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24',
'82,65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336',
'344,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108',
',109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67',
',,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,',
',,82,,89,103,104,-270,,44,45,,,,-270,-270,-270,,,-270,-270,-270,,-270',
',,,,,,,-270,-270,-270,-270,,,,,,,,,-270,-270,,-270,-270,-270,-270,-270',
',,,,,,,,,,,,,,,,,,,,,,-270,-270,-270,-270,-270,-270,-270,-270,-270,-270',
'-270,-270,-270,-270,,,-270,-270,-270,,,-270,,293,-270,,,-270,-270,,-270',
',-270,,-270,,-270,-270,,-270,-270,-270,-270,-270,,-270,-270,-270,579',
',576,575,574,584,577,,,,,,,-270,,587,-270,-270,-707,-270,,-270,,,,-707',
'-707,-707,-270,,-707,-707,-707,,-707,,,582,,,,,-707,-707,-707,-707,-707',
',595,594,,,,588,-707,-707,,-707,-707,-707,-707,-707,,,,,,,,,,,,,,,,',
',,,,,,-707,-707,-707,-707,-707,-707,-707,-707,-707,-707,-707,-707,-707',
'-707,,,-707,-707,-707,,,-707,,,-707,,,-707,-707,,-707,,-707,,-707,,-707',
'-707,,-707,-707,-707,-707,-707,,-707,-707,-707,,,,,,,,,,,,,,-707,,,-707',
'-707,-707,-707,,-707,-708,-707,,,,,-707,-708,-708,-708,,,-708,-708,-708',
',-708,,,,,,,,-708,-708,-708,-708,-708,,,,,,,,-708,-708,,-708,-708,-708',
'-708,-708,,,,,,,,,,,,,,,,,,,,,,,-708,-708,-708,-708,-708,-708,-708,-708',
'-708,-708,-708,-708,-708,-708,,,-708,-708,-708,,,-708,,,-708,,,-708',
'-708,,-708,,-708,,-708,,-708,-708,,-708,-708,-708,-708,-708,,-708,-708',
'-708,,,,,,,,,,,,,,-708,,,-708,-708,-708,-708,,-708,,-708,,77,78,24,-708',
'65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113',
',,241,,,,,,,51,,,115,114,116,105,64,107,106,108,314,109,117,118,,101',
'102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,311,,309,,50',
',,315,,,,,,239,,,,,99,312,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82',
'65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344',
'111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68',
',,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78',
'24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81',
'336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66',
'67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,',
',,,,,82,,89,103,104,-270,,44,45,,,,-270,-270,-270,,,-270,-270,-270,579',
'-270,576,575,574,584,577,,,-270,-270,-270,,,,587,,,,,,-270,-270,,-270',
'-270,-270,-270,-270,,,,,,,,579,582,576,575,574,584,577,,,,592,591,595',
'594,,587,,588,,579,,576,575,574,584,577,-270,,,,,,,-270,587,,,582,293',
'-270,,,,229,,,592,591,595,594,,,,588,,,582,,,,,-270,-270,,,592,591,595',
'594,,,,588,,,,-270,,,-270,,77,78,24,-270,65,,,,71,72,-270,,,75,,73,74',
'76,341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,,,115',
'114,116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,',
',,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91',
',92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75',
',73,74,76,341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,',
'51,,,115,114,116,105,64,107,106,108,314,109,117,118,,101,102,47,48,46',
',,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,740,,309,,50,,,315,,,,,,239',
',,,,99,312,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104',
'71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111,110,112',
'113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,314,109,117,118',
',101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,309,',
'50,,,315,,,,,,239,,,,,99,312,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24',
'82,65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336',
'344,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108',
',109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67',
',,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,',
',,82,,89,103,104,,,44,45,77,78,24,11,65,,,,71,72,,,,75,,73,74,76,33',
'34,79,80,,,,,,81,31,30,111,110,112,113,,,21,,,,,,10,51,322,12,115,114',
'116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,',
',,,,,43,,,36,,,66,67,,,68,,38,,,,50,,,,,,,,,22,,,,,99,87,90,91,,92,94',
'93,95,,,,,88,98,,,,,,415,82,,89,103,104,,,44,45,77,78,24,,65,,,,71,72',
',,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,241,,,,',
',,51,,,115,114,116,105,64,107,106,108,314,109,117,118,,101,102,47,48',
'46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,311,,309,,50,,,315,,,',
',,239,,,,,99,312,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103',
'104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111,110',
'112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50',
',,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65',
'89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111',
'110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,,109,117',
'118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,',
',50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82',
'65,89,103,104,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111',
'110,112,113,,,21,,,,,,,51,,,115,114,116,105,64,107,106,108,,109,117',
'118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,',
',50,,,,,,,,,22,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82',
'65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344',
'111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68',
',,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78',
'24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81',
'336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66',
'67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,',
',,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80',
',,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64',
'107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,',
'240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,',
',,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341,342',
'79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105',
'64,107,106,108,314,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,',
'234,,,240,,,66,67,,,68,,740,,,,50,,,315,,,,,,239,,,,,99,312,90,91,,92',
'94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73',
'74,76,341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,',
',115,114,116,105,64,107,106,108,314,109,117,118,,101,102,47,48,46,,',
',,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,315,,,,,,239,,,,,99',
'312,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72',
'44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111,110,112,113,,',
'241,,,,,,,51,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,311,,,,50,,,,,,',
',,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103',
'104,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112',
'113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,314,109,117,118',
',101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,311,,309',
',50,,,315,,,,,,239,,,,,99,312,90,91,,92,94,93,95,,,,,88,98,,,,77,78',
'24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31',
'30,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,314',
'109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,',
',68,,311,,309,,50,,,315,,,,,,239,,,,,99,312,90,91,,92,94,93,95,,,,,88',
'98,,,,,,,82,,89,103,104,,,44,45,77,78,24,11,65,,,,71,72,,,,75,,73,74',
'76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,21,,,,,,10,51,,12,115',
'114,116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,',
',,,,,,,,,43,,,36,,,66,67,,,68,,38,,,,50,,,,,,,,,22,,,,,99,87,90,91,',
'92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,',
'73,74,76,341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,51',
',,115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,,,,',
',,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,842,,,,50,,,,,,,,,239,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44',
'45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,241,,,',
',,,51,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48,46',
',,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44',
'45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,241,,,',
',,,51,,,115,114,116,105,64,107,106,108,314,109,117,118,,101,102,47,48',
'46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,311,,309,,50,,,315,,,',
',,239,,,,,99,312,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,',
',44,45,77,78,24,11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,81,31',
'30,111,110,112,113,,,21,,,,,,10,51,,12,115,114,116,105,64,107,106,108',
',109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,43,,,36,,,66,67,,',
'68,,38,,,,50,,,,,,,,,22,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77',
'78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,',
'81,336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66',
'67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,',
',,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80',
',,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64',
'107,106,108,314,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234',
',,240,,,66,67,,,68,,740,,309,,50,,,315,,,,,,239,,,,,99,312,90,91,,92',
'94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73',
'74,76,341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,',
',115,114,116,105,64,107,106,108,314,109,117,118,,101,102,47,48,46,,',
',,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,309,,50,,,315,,,,,,239,,',
',,99,312,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71',
'72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,241',
',,,,,,51,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48',
'46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,',
',99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71',
'72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,241',
',,,,,,51,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48',
'46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,',
',99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71',
'72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,241',
',,,,,,51,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48',
'46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,',
',99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71',
'72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,241',
',,,,,,51,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48',
'46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,',
',99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71',
'72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111,110,112,113',
',,241,,,,,,,51,,,115,114,116,105,64,107,106,108,314,109,117,118,,101',
'102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,740,,309,,50',
',,315,,,,,,239,,,,,99,312,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82',
'65,89,103,104,71,72,44,512,,75,,73,74,76,341,342,79,80,,,,,,81,336,344',
'111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68',
',,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78',
'24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81',
'336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66',
'67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,',
',,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80',
',,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64',
'107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,',
'240,,,66,67,,,68,,431,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95',
',,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341',
'342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116',
'105,64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,',
',234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76',
'33,34,79,80,,,,,,81,31,30,111,110,112,113,,,21,,,,,,,51,,,115,114,116',
'105,64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,',
',234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76',
'341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,,,115,114',
'116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,',
',,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92',
'94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73',
'74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,241,,,,,,,51,,,115',
'114,116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,',
',,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91',
',92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75',
',73,74,76,341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,',
'51,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,',
',,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44',
'45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241',
',,,,,,51,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48',
'46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,',
',99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71',
'72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111,110,112,113',
',,241,,,,,,,51,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102',
'47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239',
',,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104',
'71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111,110,112',
'113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,',
',,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103',
'104,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112',
'113,,,21,,,,,,,51,,,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,',
',,,22,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103',
'104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111,110',
'112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,,109,117,118',
',101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50',
',,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65',
'89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111',
'110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,,109,117',
'118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,',
',50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82',
'65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344',
'111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68',
',,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78',
'24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,81,31',
'30,111,110,112,113,,,21,,,,,,,51,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68',
',,,,,50,,,,,,,,,22,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24',
'82,65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336',
'344,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64,107,106,108',
',109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234,,,240,,,66,67',
',,68,,740,,,,50,,,,,,,,,239,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,',
',,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74,76,341,342,79,80',
',,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,,,115,114,116,105,64',
'107,106,108,314,109,117,118,,101,102,47,48,46,,,,,,,,,,,,,,,,,,,,234',
',,240,,,66,67,,,68,,,,309,,50,,,315,,,,,,239,,,,,99,312,90,91,,92,94',
'93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75,,73,74',
'76,341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,51,,,115',
'114,116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,,,,,',
',,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,239,,,,,99,87,90,91',
',92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,,75',
',73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,21,,,,,,,51,,',
'115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,,,,,,',
',,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,99,87,90',
'91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,',
'75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,21,,,,,,,51',
',,115,114,116,105,64,107,106,108,,109,117,118,,101,102,47,48,46,,,,',
',,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,99,87,90',
'91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,44,45,',
'75,,73,74,76,33,34,79,80,,,,,,81,31,30,111,110,112,113,,,241,,,,,,,51',
',,115,114,116,105,64,107,106,108,314,109,117,118,,101,102,47,48,46,',
',,,,,,,,,,,,,,,,,,234,,,240,,,66,67,,,68,,311,,309,,50,,,315,,,,,,239',
',,,,99,312,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104',
'71,72,44,45,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111,110,112',
'113,,,241,,,,,,,337,,,115,114,116,105,64,107,106,108,,109,117,118,,101',
'102,,,345,,,,,,,,,,,,,,,,,,,,333,,,329,,,66,67,,,68,,,,,,,,,,,,,,,,',
',,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71',
'72,,,,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241',
',,,,,,337,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,,,345',
',,,,,,,,,,,,,,,,,,,1112,,,240,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,99,87',
'90,91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,,,,75',
',73,74,76,341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,',
'337,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,,,345,,,',
',,,,,,,,,,,,,,,,333,,,329,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,99,87,90,91',
',92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,,,,75,,73',
'74,76,341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,337',
',,115,114,116,105,64,107,106,108,,109,117,118,,101,102,,,345,,,,,,,',
',,,,,,,,,,,,1106,,,240,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,99,87,90,91,',
'92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,,,,75,,73,74',
'76,341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,337,,,115',
'114,116,105,64,107,106,108,,109,117,118,,101,102,,,345,,,,,,,,,,,,,',
',,,,,,390,,,36,,,66,67,,,68,,38,,,,,,,,,,,,,,,,,,99,87,90,91,,92,94',
'93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,,,,75,,73,74,76,341',
'342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,337,,,115,114',
'116,395,64,107,106,396,,109,117,118,,101,102,,,345,,,,,,,,,,,,,,,,,402',
',,397,,,240,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,99,87,90,91,,92,94,93,95',
',,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,,,,75,,73,74,76,341,342',
'79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,337,,,115,114,116',
'395,64,107,106,396,,109,117,118,,101,102,,,345,,,,,,,,,,,,,,,,,,,,397',
',,240,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,99,87,90,91,,92,94,93,95,,,,,88',
'98,,,,77,78,24,82,65,89,103,104,71,72,,,,75,,73,74,76,341,342,79,80',
',,,,,81,336,344,111,110,112,113,,,241,,,,,,,337,,,115,114,116,105,64',
'107,106,108,,109,117,118,,101,102,,,345,,,,,,,,,,,,,,,,,,,,1106,,,240',
',,66,67,,,68,,,,,,,,,,,,,,,,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,',
',,77,78,24,82,65,89,103,104,71,72,,,,75,,73,74,76,341,342,79,80,,,,',
',81,336,344,111,110,112,113,,,241,,,,,,,337,,,115,114,116,105,64,107',
'106,108,,109,117,118,,101,102,,,345,,,,,,,,,,,,,,,,,,,,333,,,329,,,66',
'67,,,68,,328,,,,,,,,,,,,,,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,',
'77,78,24,82,65,89,103,104,71,72,,,,75,,73,74,76,341,342,79,80,,,,,,81',
'336,344,111,110,112,113,,,241,,,,,,,337,,,115,114,116,105,64,107,106',
'108,,109,117,118,,101,102,,,345,,,,,,,,,,,,,,,,,,,,333,,,240,,,66,67',
',,68,,,579,,576,575,574,584,577,,,,,,,,,587,,99,87,90,91,,92,94,93,95',
',,,,88,98,,,,540,,582,82,,89,103,104,77,78,24,,65,595,594,,71,72,588',
',,75,,73,74,76,341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241,',
',,,,,337,,,115,114,116,105,64,107,106,108,,109,117,118,,101,102,,,345',
',,,,,,,,,,,,,,,,,,,333,,,329,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,99,87,90',
'91,,92,94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,,,,75,',
'73,74,76,341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,337',
',,115,114,116,105,64,107,106,108,,109,117,118,,101,102,,,345,,,,,,,',
',,,,,,,,,,,,333,,,329,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,99,87,90,91,,92',
'94,93,95,,,,,88,98,,,,77,78,24,82,65,89,103,104,71,72,,,,75,,73,74,76',
'341,342,79,80,,,,,,81,336,344,111,110,112,113,,,241,,,,,,,337,,,115',
'114,116,105,64,107,106,108,,109,117,118,,101,102,,,345,,,,,,,,,,,,,',
',,,,,,333,,,240,,,66,67,,,68,,,579,,576,575,574,584,577,,,,,,,,,587',
',99,87,90,91,,92,94,93,95,,,,,88,98,,,,347,,582,82,,89,103,104,77,78',
'24,,65,595,594,,71,72,588,,,75,,73,74,76,341,342,79,80,,,,,,81,336,344',
'111,110,112,113,,,241,,,,,,,337,,,115,114,116,105,64,107,106,108,,109',
'117,118,,101,102,,,345,,,,,,,,,,,,,,,,,,,,333,,,329,,,66,67,,,68,,,',
',,,,,,,,,,,,,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103',
'104,182,193,183,206,179,199,189,188,209,210,204,187,186,181,207,211',
'212,191,180,194,198,200,192,185,,,,201,208,203,202,195,205,190,178,197',
'196,,,,,,177,184,175,176,172,173,174,135,137,,,136,,,,,,,,166,167,,163',
'145,146,147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,,,,,,,,,160',
'159,,144,165,162,161,170,157,158,152,150,142,164,143,,,171,99,,,,,,',
',,,,,,,98,182,193,183,206,179,199,189,188,209,210,204,187,186,181,207',
'211,212,191,180,194,198,200,192,185,,,,201,208,203,202,195,205,190,178',
'197,196,,,,,,177,184,175,176,172,173,174,135,137,,,136,,,,,,,,166,167',
',163,145,146,147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,,,,,',
',,,160,159,,144,165,162,161,170,157,158,152,150,142,164,143,,,171,99',
',,,,,,,,,,,,,98,182,193,183,206,179,199,189,188,209,210,204,187,186',
'181,207,211,212,191,180,194,198,200,192,185,,,,201,208,203,202,195,205',
'190,178,197,196,,,,,,177,184,175,176,172,173,174,135,137,,,136,,,,,',
',,166,167,,163,145,146,147,154,151,153,,,148,149,,,,168,169,155,156',
',,,,,,,,,,,,,160,159,,144,165,162,161,170,157,158,152,150,142,164,143',
',,171,99,,,,,,,,,,,,,,98,182,193,183,206,179,199,189,188,209,210,204',
'187,186,181,207,211,212,191,180,194,198,200,192,185,,,,201,208,203,202',
'195,205,190,178,197,196,,,,,,177,184,175,176,172,173,174,135,137,134',
',136,,,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149,,,,168,169',
'155,156,,,,,,,,,,,,,,160,159,,144,165,162,161,170,157,158,152,150,142',
'164,143,,,171,99,111,110,112,113,,,,,,,,,,98,,,115,114,116,717,,,579',
'720,576,575,574,584,577,101,102,,,345,,,,587,,,,,,,,,,,,,,,,719,,,701',
',,582,699,,,700,,,,,592,591,595,594,,,,588,,,,718,,,,99,87,90,91,,92',
'94,93,95,,,,,88,98,111,110,112,113,,,82,,89,103,104,,,705,706,,115,114',
'116,717,,,579,720,576,575,574,584,577,101,102,,,345,,,,587,,,,,,,,,',
',,,,,,719,,,701,,,582,699,,,700,,,,,,,595,594,,,,588,,,,718,,,,99,87',
'90,91,,92,94,93,95,,,,,88,98,111,110,112,113,,,82,,89,103,104,,,705',
'706,,115,114,116,717,,,579,720,576,575,574,584,577,101,102,,,345,,,',
'587,,,,,,,,,,,,,,,,719,,,701,,,582,699,,,700,,883,,,,,595,594,,,,588',
',,,718,,,,99,87,90,91,,92,94,93,95,,,,,88,98,111,110,112,113,,,82,,89',
'103,104,,,705,706,,115,114,116,717,,,,720,985,,,,,101,102,,,345,587',
',,,,,,,,,,,,,,,,,,719,,,701,,,,699,,,700,,883,,,,,,,588,,,,,,,718,,',
',99,986,90,91,,92,94,93,95,,,,,88,98,111,110,112,113,,,82,,89,103,104',
',,705,706,,115,114,116,717,,,579,720,576,575,574,584,577,101,102,,,345',
',,,587,,,,,,,,,,,,,,,,719,,,701,,,582,699,,,700,,,,,592,591,595,594',
',,,588,,,,718,,,,99,87,90,91,,92,94,93,95,,,,,88,98,111,110,112,113',
',,82,,89,103,104,,,705,706,,115,114,116,717,,,579,720,576,575,574,584',
'577,101,102,,,345,,,,587,,,,,,,,,,,,,,,,719,,,701,,,582,699,,,700,,',
',,592,591,595,594,,,,588,,,,718,,,,99,87,90,91,,92,94,93,95,,,,,88,98',
'111,110,112,113,,,82,,89,103,104,,,705,706,,115,114,116,717,,,579,720',
'576,575,574,584,577,101,102,,,345,,,,587,,,,,,,,,,,,,,,,719,,,701,,',
'582,699,,,700,,998,,,592,591,595,594,,,,588,,,,718,,,,99,87,90,91,,92',
'94,93,95,,,,,88,98,111,110,112,113,,,82,,89,103,104,,,705,706,,115,114',
'116,717,,,,720,985,,,,,101,102,,,345,587,,,,,,,,,,,,,,,,,,,719,,,701',
',,,699,,,700,,883,,,,,,,588,,,,,,,718,,,,99,986,90,91,,92,94,93,95,',
',,,88,98,111,110,112,113,,,82,,89,103,104,,,705,706,,115,114,116,717',
',,,720,985,,,,,101,102,,,345,587,,,,,,,,,,,,,,,,,,,719,,,701,,,,699',
',,700,,883,,,,,,,588,,,,,,,718,,,,99,986,90,91,,92,94,93,95,,,,,88,98',
',,,,,,82,,89,103,104,,,705,706,182,193,183,206,179,199,189,188,209,210',
'204,187,186,181,207,211,212,191,180,194,198,200,192,185,,,,201,208,203',
'281,280,282,279,178,197,196,,,,,,177,184,175,176,276,277,278,274,137',
'107,106,275,,109,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149',
',,,168,169,155,156,,,,,,286,,,,,,,,160,159,,144,165,162,161,170,157',
'158,152,150,142,164,143,,,171,111,110,112,113,,,,,,,,,,,,,115,114,116',
'717,,,579,720,576,575,574,584,577,101,102,,,345,,,,587,,,,,,,,,,,,,',
',,719,,,701,,,582,699,,,700,,,,,592,591,595,594,,,,588,,,,718,,,,99',
'87,90,91,,92,94,93,95,,,,,88,98,111,110,112,113,,,82,,89,103,104,,,705',
'706,,115,114,116,717,,,579,720,576,575,574,584,577,101,102,,,345,,,',
'587,,,,,,,,,,,,,,,,719,,,701,,,582,699,,,700,,,,,,,595,594,,,,588,,',
',718,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103,104,,,705',
'706,182,193,183,206,179,199,189,188,209,210,204,187,186,181,207,211',
'212,191,180,194,198,200,192,185,,,,201,208,203,202,195,205,190,178,197',
'196,,,,,,177,184,175,176,172,173,174,135,137,,,136,,,,,,,,166,167,,163',
'145,146,147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,,,,,,,,,160',
'159,,144,165,162,161,170,157,158,152,150,142,164,143,,,171,111,110,112',
'113,,,,,,,,,,,,,115,114,116,717,,,579,720,576,575,574,584,577,101,102',
',,345,,,,587,,,,,,,,,,,,,,,,719,,,701,,,582,699,,,700,,883,,,592,591',
'595,594,,,,588,,,,718,,,,99,87,90,91,,92,94,93,95,,,,,88,98,229,111',
'110,112,113,,82,,89,103,104,,,705,706,,,115,114,116,717,,,579,720,576',
'575,574,584,577,101,102,,,345,,,,587,,,,,,,,,,,,,,,,719,,,701,,,582',
'699,,,700,,883,,,,,595,594,,,,588,,,,718,,,,99,87,90,91,,92,94,93,95',
',,,,88,98,111,110,112,113,,,82,,89,103,104,,,705,706,,115,114,116,717',
',,579,720,576,575,574,584,577,101,102,,,345,,,,587,,,,,,,,,,,,,,,,719',
',,701,,,582,699,,,700,,,,,,,595,594,,,,588,,,,718,,,,99,87,90,91,,92',
'94,93,95,,,,,88,98,111,110,112,113,,,82,,89,103,104,,,705,706,,115,114',
'116,717,,,579,720,576,575,574,584,577,101,102,,,345,,,,587,,,,,,,,,',
',,,,,,719,,,701,,,582,699,,,700,,,,,,,595,594,,,,588,,,,718,,,,99,87',
'90,91,,92,94,93,95,,,,,88,98,111,110,112,113,,,82,,89,103,104,,,705',
'706,,115,114,116,717,,,579,720,576,575,574,584,577,101,102,,,345,,,',
'587,,,,,,,,,,,,,,,,719,,,701,,,582,699,,,700,,,,,,,595,594,,,,588,,',
',718,,,,99,87,90,91,,92,94,93,95,,,,,88,98,111,110,112,113,,,82,,89',
'103,104,,,705,706,,115,114,116,717,,,,720,,,,,,101,102,,,345,,,,,,,',
'111,110,112,113,,,,,,,,,719,,,701,115,114,116,699,,,700,,,,,,,101,102',
',,345,,,,,718,,,,99,87,90,91,,92,94,93,95,,,,,88,98,,,,,,,82,,89,103',
'104,,,705,706,579,,576,575,574,584,577,,,,,99,87,90,91,587,92,94,93',
'95,,,,,88,98,111,110,112,113,,,82,,89,103,104,582,638,,,,115,114,116',
',592,591,595,594,,,,588,,101,102,,,345,111,110,112,113,,,,,,,,,,,,,115',
'114,116,,,,,,,,,,,101,102,,,345,,,,,,,,,,,,,,,,99,87,90,91,,92,94,93',
'95,,,,,88,98,,,,,,,82,,89,103,104,,,,,,,,,99,87,90,91,,92,94,93,95,',
',,,88,98,1196,464,,,1197,,82,,89,103,104,,166,167,,163,145,146,147,154',
'151,153,,,148,149,,,,168,169,155,156,,,,,,293,,,,,,,,160,159,,144,165',
'162,161,170,157,158,152,150,142,164,143,687,457,171,,688,,,,,,,,166',
'167,,163,145,146,147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,293',
',,,,,,,160,159,,144,165,162,161,170,157,158,152,150,142,164,143,689',
'464,171,,690,,,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149,',
',,168,169,155,156,,,,,,293,,,,,,,,160,159,,144,165,162,161,170,157,158',
'152,150,142,164,143,508,457,171,,509,,,,,,,,166,167,,163,145,146,147',
'154,151,153,,,148,149,,,,168,169,155,156,,,,,,,,,,,,,,160,159,,144,165',
'162,161,170,157,158,152,150,142,164,143,750,457,171,,751,,,,,,,,166',
'167,,163,145,146,147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,293',
',,,,,,,160,159,,144,165,162,161,170,157,158,152,150,142,164,143,753',
'464,171,,754,,,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149,',
',,168,169,155,156,,,,,,293,,,,,,,,160,159,,144,165,162,161,170,157,158',
'152,150,142,164,143,687,457,171,,688,,,,,,,,166,167,,163,145,146,147',
'154,151,153,,,148,149,,,,168,169,155,156,,,,,,293,,,,,,,,160,159,,144',
'165,162,161,170,157,158,152,150,142,164,143,689,464,171,,690,,,,,,,',
'166,167,,163,145,146,147,154,151,153,,,148,149,,,,168,169,155,156,,',
',,,293,,,,,,,,160,159,,144,165,162,161,170,157,158,152,150,142,164,143',
'460,464,171,,459,,,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149',
',,,168,169,155,156,,,,,,293,,,,,,,,160,159,,144,165,162,161,170,157',
'158,152,150,142,164,143,453,457,171,,454,,,,,,,,166,167,,163,145,146',
'147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,293,,,,,,,,160,159',
',144,165,162,161,170,157,158,152,150,142,164,143,812,457,171,,813,,',
',,,,,166,167,,163,145,146,147,154,151,153,,,148,149,,,,168,169,155,156',
',,,,,293,,,,,,,,160,159,,144,165,162,161,170,157,158,152,150,142,164',
'143,814,464,171,,815,,,,,,,,166,167,,163,145,146,147,154,151,153,,,148',
'149,,,,168,169,155,156,,,,,,293,,,,,,,,160,159,,144,165,162,161,170',
'157,158,152,150,142,164,143,817,464,171,,818,,,,,,,,166,167,,163,145',
'146,147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,293,,,,,,,,160',
'159,,144,165,162,161,170,157,158,152,150,142,164,143,508,457,171,,509',
',,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149,,,,168,169,155',
'156,,,,,,293,,,,,,,,160,159,,144,165,162,161,170,157,158,152,150,142',
'164,143,1191,464,171,,1190,,,,,,,,166,167,,163,145,146,147,154,151,153',
',,148,149,,,,168,169,155,156,,,,,,293,,,,,,,,160,159,,144,165,162,161',
'170,157,158,152,150,142,164,143,1194,457,171,,1195,,,,,,,,166,167,,163',
'145,146,147,154,151,153,,,148,149,,,,168,169,155,156,,,,,,293,,,,,,',
',160,159,,144,165,162,161,170,157,158,152,150,142,164,143,844,457,171',
',845,,,,,,,,166,167,,163,145,146,147,154,151,153,,,148,149,,,,168,169',
'155,156,,,,,,293,,,,,,,,160,159,,144,165,162,161,170,157,158,152,150',
'142,164,143,847,464,171,,846,,,,,,,,166,167,,163,145,146,147,154,151',
'153,,,148,149,,,,168,169,155,156,,,,,,293,,,,,,,,160,159,,144,165,162',
'161,170,157,158,152,150,142,164,143,,,171' ]
        racc_action_table = arr = ::Array.new(28136, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'847,969,1109,469,469,812,52,847,847,847,998,1056,728,847,847,411,847',
'21,1005,412,391,1110,718,814,847,847,1055,1055,597,69,867,815,625,597',
'875,475,847,847,1054,847,847,847,847,847,1052,1032,379,380,1207,825',
'955,616,719,826,760,760,719,1056,21,718,969,1005,52,388,813,387,847',
'847,847,847,847,847,847,847,847,847,847,847,847,847,875,411,847,847',
'847,412,847,847,814,867,847,1195,998,847,475,841,815,469,847,728,847',
'53,847,847,1194,847,847,847,847,847,108,847,847,847,812,1113,69,108',
'108,108,1109,1197,108,108,108,1109,108,847,1196,391,847,847,814,847',
'108,847,108,108,108,1110,815,625,847,810,1110,847,108,108,760,108,108',
'108,108,108,1159,616,1054,53,825,955,616,1054,1052,1032,379,380,1207',
'1052,1032,379,380,1207,388,813,387,1191,108,108,108,108,108,108,108',
'108,108,108,108,108,108,108,870,619,108,108,108,29,108,108,1197,619',
'108,635,635,108,108,1196,108,338,108,1195,108,845,108,108,1195,108,108',
'108,108,108,843,108,1194,108,345,345,1155,1194,46,46,870,871,913,1113',
'453,505,505,108,1113,1197,108,108,108,108,1197,108,1196,108,406,460',
'349,1196,108,1166,1166,108,460,460,460,29,1,810,460,460,810,460,810',
'871,750,657,845,338,1159,460,460,384,655,1159,844,407,384,453,29,589',
'751,460,460,688,460,460,460,460,460,453,338,635,745,349,913,408,635',
'589,345,345,355,1076,46,46,745,349,772,772,406,406,406,460,460,460,460',
'460,460,460,460,460,460,460,460,460,460,505,987,460,460,460,750,460',
'460,844,913,460,1193,913,460,407,407,407,688,460,987,460,751,460,460',
'913,460,460,460,460,460,459,460,460,460,408,408,408,459,459,459,1076',
'1076,1076,459,459,750,459,460,750,797,460,460,797,460,459,460,27,1076',
'484,687,750,751,460,27,751,460,459,459,852,459,459,459,459,459,700,1061',
'751,1061,766,753,766,766,766,766,766,282,1132,41,427,1132,484,700,282',
'766,484,484,459,459,459,459,459,459,459,459,459,459,459,459,459,459',
'438,19,459,459,459,766,459,459,687,235,459,27,1088,459,766,766,766,766',
'459,410,459,766,459,459,41,459,459,459,459,459,105,459,454,459,753,753',
'41,105,105,105,282,421,105,105,105,281,105,459,19,647,459,459,281,459',
'105,459,105,105,105,438,19,766,459,868,1200,459,105,105,235,105,105',
'105,105,105,1200,753,1088,1088,753,454,409,233,280,410,410,410,1150',
'279,278,280,753,454,620,1088,279,278,105,105,105,105,105,105,105,105',
'105,105,105,105,105,105,281,277,105,105,105,232,105,105,277,876,105',
'877,528,105,105,652,105,650,105,413,105,375,105,105,375,105,105,105',
'105,105,233,105,690,105,409,409,409,280,618,690,690,690,279,278,690',
'690,690,105,690,318,105,105,105,105,318,105,690,105,690,690,690,881',
'105,397,232,105,277,397,690,690,882,690,690,690,690,690,528,528,528',
'652,652,650,650,413,413,413,883,276,275,652,274,650,874,528,276,275',
'874,274,690,690,690,690,690,690,690,690,690,690,690,690,690,690,49,49',
'690,690,690,437,690,690,372,617,690,372,437,690,690,886,690,273,690',
'485,690,437,690,690,273,690,690,690,690,690,672,690,818,690,16,16,49',
'49,331,818,276,275,330,274,818,331,884,690,818,330,690,690,690,690,331',
'690,884,690,330,689,486,371,690,42,371,690,689,689,689,1092,437,689',
'689,689,334,689,613,672,1198,1092,899,334,273,689,689,689,689,689,959',
'672,334,902,85,959,884,689,689,818,689,689,689,689,689,331,85,903,884',
'330,628,1112,42,698,1092,1092,85,628,698,1092,5,17,698,912,42,5,628',
'689,689,689,689,689,689,689,689,689,689,689,689,689,689,334,1074,689',
'689,689,401,689,689,798,798,689,1074,487,689,689,917,689,920,689,921',
'689,924,689,689,926,689,689,689,689,689,846,689,689,689,628,134,927',
'846,846,846,134,134,929,846,846,931,846,689,933,1074,689,689,689,689',
'846,689,934,689,378,378,936,1074,689,702,702,689,846,846,939,846,846',
'846,846,846,1148,1203,946,1204,363,350,363,363,363,363,363,1119,350',
'1119,1119,1119,949,1119,1205,363,15,350,846,846,846,846,846,846,846',
'846,846,846,846,846,846,846,392,956,846,846,846,363,846,846,958,14,846',
'965,1119,846,363,363,363,363,846,966,846,363,846,846,967,846,846,846',
'846,846,769,846,968,846,350,1147,1105,1206,390,978,769,1152,18,1105',
'979,980,981,846,1152,18,846,846,1105,846,603,846,545,1152,18,990,991',
'363,846,545,992,846,240,240,240,240,240,240,545,769,769,240,240,996',
'769,997,240,817,240,240,240,240,240,240,240,321,321,321,321,321,240',
'240,240,240,240,240,240,1105,386,240,385,1002,1152,18,602,240,240,240',
'240,240,240,240,240,240,240,240,240,545,240,240,240,754,240,240,240',
'240,240,332,754,817,1008,399,601,754,332,12,817,754,399,1013,1014,817',
'1016,332,43,817,240,399,213,240,600,1017,240,240,389,1018,240,1020,240',
'1021,1022,389,240,1146,817,598,483,376,643,643,389,240,643,643,643,596',
'240,240,240,240,593,240,240,240,240,234,754,1145,236,240,240,237,332',
'374,817,581,399,240,483,240,240,240,483,483,240,240,907,907,907,907',
'907,907,241,571,570,907,907,568,567,389,907,395,907,907,907,907,907',
'907,907,8,8,8,8,8,907,907,907,907,907,907,907,1048,582,907,582,582,582',
'1049,582,907,907,907,907,907,907,907,907,907,907,907,907,566,907,907',
'907,1111,907,907,907,907,907,54,1111,395,373,231,565,1065,54,582,395',
'1111,231,9,564,395,1075,54,582,395,907,231,369,907,1083,1085,907,907',
'561,560,907,1068,907,1068,1068,1068,907,1068,395,1142,940,488,940,940',
'940,907,940,1140,550,546,907,907,907,907,541,907,907,907,907,292,1111',
'539,536,907,907,535,54,306,395,307,231,907,1103,907,907,907,310,940',
'907,907,832,832,832,832,832,832,940,365,1131,832,832,1106,322,323,832',
'396,832,832,832,832,832,832,832,533,533,533,533,533,832,832,832,832',
'832,832,832,1130,779,832,779,779,779,325,779,832,832,832,832,832,832',
'832,832,832,832,832,832,326,832,832,832,327,832,832,832,832,832,519',
'783,396,783,783,783,498,783,779,396,515,514,513,1212,396,333,336,779',
'396,832,337,361,832,339,340,832,832,344,51,832,1175,832,1175,1175,1175',
'832,1175,396,498,346,359,353,498,498,832,498,498,1118,721,832,832,832',
'832,722,832,832,832,832,725,727,471,733,832,832,734,735,737,396,739',
'694,832,692,832,832,832,1117,747,832,832,215,215,215,215,215,215,749',
'1116,461,215,215,752,40,691,215,755,215,215,215,215,215,215,215,23,756',
'25,759,1115,215,215,215,215,215,215,215,683,762,215,368,368,368,368',
'368,215,215,215,215,215,215,215,215,215,215,215,215,1176,215,215,215',
'678,215,215,215,215,215,23,23,23,23,23,23,23,23,23,23,23,1171,23,23',
'3,1165,23,23,781,215,782,23,215,784,673,215,215,452,800,215,806,215',
'23,807,23,215,23,23,451,23,23,23,23,23,215,23,811,449,439,215,215,215',
'215,1218,215,215,215,215,435,432,664,820,215,215,430,23,1190,824,429',
',215,,215,215,215,,,215,215,1167,1167,1167,1167,1167,1167,,,,1167,1167',
',,,1167,,1167,1167,1167,1167,1167,1167,1167,,,,,,1167,1167,1167,1167',
'1167,1167,1167,,,1167,,,,,442,1167,1167,1167,1167,1167,1167,1167,1167',
'1167,1167,1167,1167,,1167,1167,1167,,1167,1167,1167,1167,1167,442,442',
'442,442,442,442,442,442,442,442,442,,442,442,,,442,442,,1167,,,1167',
',,1167,1167,,,1167,,1167,442,,442,1167,442,442,,442,442,442,442,442',
'1167,442,,,,1167,1167,1167,1167,,1167,1167,1167,1167,,,,,1167,1167,',
'442,,442,,,1167,,1167,1167,1167,,,1167,1167,821,821,821,821,821,821',
',,,821,821,,,,821,,821,821,821,821,821,821,821,,,,,,821,821,821,821',
'821,821,821,,,821,,,,,448,821,821,821,821,821,821,821,821,821,821,821',
'821,,821,821,821,,821,821,821,821,821,448,448,448,448,448,448,448,448',
'448,448,448,,448,448,,,448,448,,821,,,821,,,821,821,,,821,,821,448,',
'448,821,448,448,,448,448,448,448,448,821,448,,,,821,821,821,821,,821',
'821,821,821,,,,,821,821,,448,,,,,821,,821,821,821,,,821,821,816,816',
'816,816,816,816,,,,816,816,,,,816,,816,816,816,816,816,816,816,,,,,',
'816,816,816,816,816,816,816,,,816,,,,,761,816,816,816,816,816,816,816',
'816,816,816,816,816,,816,816,816,,816,816,816,816,816,761,761,761,761',
'761,761,761,761,761,761,761,,761,761,,,761,761,,816,,,816,,,816,816',
',,816,,816,761,,761,816,761,761,,761,761,761,761,761,816,761,,,,816',
'816,816,816,,816,816,816,816,,,,,816,816,,761,,,,,816,,816,816,816,',
',816,816,132,132,132,132,132,132,,,,132,132,,,,132,,132,132,132,132',
'132,132,132,,,,,,132,132,132,132,132,132,132,,,132,,,,,792,132,132,132',
'132,132,132,132,132,132,132,132,132,,132,132,132,,132,132,132,132,132',
'792,792,792,792,792,792,792,792,792,792,792,,792,792,,,792,792,,132',
',,132,,,132,132,,,132,,132,792,,792,132,792,792,,792,792,792,792,792',
'132,792,,,,132,132,132,132,,132,132,132,132,,,,,132,132,,792,,,,,132',
',132,132,132,,,132,132,636,636,636,636,636,636,,,,636,636,,,,636,,636',
'636,636,636,636,636,636,,,,,,636,636,636,636,636,636,636,,,636,,,,,',
'636,636,636,636,636,636,636,636,636,636,636,636,,636,636,636,,636,636',
'636,636,636,502,502,502,502,502,502,502,502,502,502,502,,502,502,,,502',
'502,,636,,,636,,,636,636,,,636,,636,502,,502,636,502,502,,502,502,502',
'502,502,636,502,,,,636,636,636,636,,636,636,636,636,,,,,636,636,502',
'502,,,,,636,,636,636,636,,,636,636,1121,1121,1121,1121,1121,1121,,,',
'1121,1121,,,,1121,,1121,1121,1121,1121,1121,1121,1121,,,,,,1121,1121',
'1121,1121,1121,1121,1121,,,1121,,,,,,1121,1121,1121,1121,1121,1121,1121',
'1121,1121,1121,1121,1121,,1121,1121,1121,,1121,1121,1121,1121,1121,304',
'304,304,304,304,304,304,304,304,304,304,,304,304,,,304,304,,1121,,,1121',
',,1121,1121,,,1121,,1121,304,,304,1121,304,304,,304,304,304,304,304',
'1121,304,,,,1121,1121,1121,1121,,1121,1121,1121,1121,,,,,1121,1121,',
'304,,,,,1121,,1121,1121,1121,,,1121,1121,2,2,2,2,2,2,,,,2,2,,,,2,,2',
'2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,,2,2',
'2,,2,2,2,2,2,849,849,849,849,849,849,849,849,849,849,849,,849,849,,',
'849,849,,2,,,2,,,2,2,,,2,,2,849,,849,2,849,849,,849,849,849,849,849',
'2,849,,,,2,2,2,2,,2,2,2,2,,,,,2,2,,849,,,,,2,,2,2,2,,,2,2,1108,1108',
'1108,1108,1108,1108,,,,1108,1108,,,,1108,,1108,1108,1108,1108,1108,1108',
'1108,,,,,,1108,1108,1108,1108,1108,1108,1108,,,1108,,,,,,1108,1108,1108',
'1108,1108,1108,1108,1108,1108,1108,1108,1108,,1108,1108,1108,,1108,1108',
'1108,1108,1108,557,557,557,557,557,557,557,557,557,557,557,,557,557',
',,557,557,,1108,,,1108,,,1108,1108,,,1108,,1108,557,,557,1108,557,557',
',557,557,557,557,557,1108,557,,,,1108,1108,1108,1108,,1108,1108,1108',
'1108,,,,,1108,1108,,557,,,,,1108,,1108,1108,1108,,,1108,1108,1067,1067',
'1067,1067,1067,1067,,,,1067,1067,,,,1067,,1067,1067,1067,1067,1067,1067',
'1067,,,,,,1067,1067,1067,1067,1067,1067,1067,,,1067,,,,,,1067,1067,1067',
'1067,1067,1067,1067,1067,1067,1067,1067,1067,,1067,1067,1067,,1067,1067',
'1067,1067,1067,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050',
',1050,1050,,,1050,1050,,1067,,,1067,,,1067,1067,,,1067,,1067,1050,,1050',
'1067,1050,1050,,1050,1050,1050,1050,1050,1067,1050,,,,1067,1067,1067',
'1067,,1067,1067,1067,1067,,,,,1067,1067,,1050,,,,,1067,,1067,1067,1067',
',,1067,1067,1066,1066,1066,1066,1066,1066,,,,1066,1066,,,,1066,,1066',
'1066,1066,1066,1066,1066,1066,,,,,,1066,1066,1066,1066,1066,1066,1066',
',,1066,,,,,,1066,1066,1066,1066,1066,1066,1066,1066,1066,1066,1066,1066',
',1066,1066,1066,,1066,1066,1066,1066,1066,1009,1009,1009,1009,1009,1009',
'1009,1009,1009,1009,1009,,1009,1009,,,1009,1009,,1066,,,1066,,,1066',
'1066,,,1066,,1066,1009,,1009,1066,1009,1009,,1009,1009,1009,1009,1009',
'1066,1009,,,,1066,1066,1066,1066,,1066,1066,1066,1066,,,,,1066,1066',
',1009,,,,,1066,,1066,1066,1066,,,1066,1066,36,36,36,36,36,36,,,,36,36',
',,,36,,36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,36,36',
'36,36,36,36,36,36,36,36,36,36,,36,36,36,,36,36,36,36,36,1027,1027,1027',
'1027,1027,1027,1027,1027,1027,1027,1027,,1027,1027,,,1027,1027,,36,',
',36,,,36,36,,,36,,36,1027,,1027,36,1027,1027,,1027,1027,1027,1027,1027',
'36,1027,,,,36,36,36,36,,36,36,36,36,,,,,36,36,,1027,,,,,36,,36,36,36',
',,36,36,615,615,615,615,615,615,,,,615,615,,,,615,,615,615,615,615,615',
'615,615,,,,,,615,615,615,615,615,615,615,,,615,,,499,,,615,615,615,615',
'615,615,615,615,615,615,615,615,,615,615,615,,615,615,615,615,615,496',
'496,496,496,496,496,496,499,,496,496,499,499,,499,499,496,496,,615,',
',615,,,615,615,,,615,,615,496,,496,615,496,496,,496,496,496,496,496',
'615,496,,,,615,615,615,615,,615,615,615,615,,,,,615,615,,1120,,1120',
'1120,1120,615,1120,615,615,615,,,615,615,612,612,612,612,612,612,,,',
'612,612,,,,612,,612,612,612,612,612,612,612,1120,,,,,612,612,612,612',
'612,612,612,,941,612,941,941,941,,941,612,612,612,612,612,612,612,612',
'612,612,612,612,,612,612,612,,612,612,612,612,612,497,497,497,497,497',
'497,497,,941,497,497,,,,,,497,497,,612,,,612,,,612,612,,,612,,612,497',
',497,612,497,497,,497,497,497,497,497,612,497,,,,612,612,612,612,,612',
'612,612,612,,,,,612,612,,,,,,,612,,612,612,612,,,612,612,383,383,383',
'383,383,383,,,,383,383,,,,383,,383,383,383,383,383,383,383,,,,,,383',
'383,383,383,383,383,383,,,383,,,,,,383,383,383,383,383,383,383,383,383',
'383,383,383,,383,383,383,,383,383,383,383,383,500,500,500,500,500,500',
'500,,,500,500,,,,,,500,500,,383,,,383,,,383,383,,,383,,383,500,,500',
'383,500,500,,500,500,500,500,500,383,500,,,,383,383,383,383,,383,383',
'383,383,,,,,383,383,,,,,,,383,,383,383,383,,,383,383,382,382,382,382',
'382,382,,,,382,382,,,,382,,382,382,382,382,382,382,382,,,,,,382,382',
'382,382,382,382,382,,,382,,,,,,382,382,382,382,382,382,382,382,382,382',
'382,382,,382,382,382,,382,382,382,382,382,501,501,501,501,501,501,501',
'501,,501,501,,,,,,501,501,,382,,,382,,,382,382,,,382,,382,501,,501,382',
'501,501,,501,501,501,501,501,382,501,,,,382,382,382,382,,382,382,382',
'382,,,,,382,382,,,,,,,382,,382,382,382,,,382,382,1029,1029,1029,1029',
'1029,1029,,,,1029,1029,,,,1029,,1029,1029,1029,1029,1029,1029,1029,',
',,,,1029,1029,1029,1029,1029,1029,1029,,,1029,,,,,,1029,1029,1029,1029',
'1029,1029,1029,1029,1029,1029,1029,1029,,1029,1029,1029,,1029,1029,1029',
'1029,1029,503,,,,,,,,,,,,,,,,503,503,,1029,,,1029,,,1029,1029,,,1029',
',1029,503,,503,1029,503,503,,503,503,,,503,1029,503,,,,1029,1029,1029',
'1029,,1029,1029,1029,1029,,,,,1029,1029,,,,,,,1029,,1029,1029,1029,',
',1029,1029,367,367,367,367,367,367,,,,367,367,,,,367,,367,367,367,367',
'367,367,367,,,,,,367,367,367,367,367,367,367,,,367,,,,,,367,367,367',
'367,367,367,367,367,367,367,367,367,,367,367,367,,367,367,367,367,367',
'494,494,494,494,494,494,494,,,494,494,,,,,,494,494,,367,,,367,,,367',
'367,,,367,,367,494,,494,367,494,494,,494,494,494,494,494,367,494,,,',
'367,367,367,367,,367,367,367,367,,,,,367,367,,,,,,,367,,367,367,367',
',,367,367,1010,1010,1010,1010,1010,1010,,,,1010,1010,,,,1010,,1010,1010',
'1010,1010,1010,1010,1010,,,,,,1010,1010,1010,1010,1010,1010,1010,,,1010',
',,,,,1010,1010,1010,1010,1010,1010,1010,1010,1010,1010,1010,1010,,1010',
'1010,1010,,1010,1010,1010,1010,1010,493,493,493,493,493,493,493,,,493',
'493,,,,,,493,493,,1010,,,1010,,,1010,1010,,,1010,,1010,493,,493,1010',
'493,493,,493,493,493,493,493,1010,493,,,,1010,1010,1010,1010,,1010,1010',
'1010,1010,,,,,1010,1010,,,,,,,1010,,1010,1010,1010,,,1010,1010,960,960',
'960,960,960,960,,,,960,960,,,,960,,960,960,960,960,960,960,960,,,,,',
'960,960,960,960,960,960,960,,,960,,,,,,960,960,960,960,960,960,960,960',
'960,960,960,960,,960,960,960,,960,960,960,960,960,492,492,492,492,492',
'492,492,,,492,492,,,,,,492,492,,960,,,960,,,960,960,,,960,,960,492,',
'492,960,492,492,,492,492,492,492,492,960,492,,,,960,960,960,960,,960',
'960,960,960,,,,,960,960,,,,,,,960,,960,960,960,,,960,960,954,954,954',
'954,954,954,,,,954,954,,,,954,,954,954,954,954,954,954,954,,,,,,954',
'954,954,954,954,954,954,,,954,,,,,,954,954,954,954,954,954,954,954,954',
'954,954,954,,954,954,954,,954,954,954,954,954,556,,,,,,,,,,,,,,,,556',
'556,,954,,,954,,,954,954,,,954,,954,556,,556,954,556,556,,556,556,,',
'556,954,556,,,,954,954,954,954,,954,954,954,954,,,,,954,954,,,,,,,954',
',954,954,954,,,954,954,366,366,366,366,366,366,,,,366,366,,,,366,,366',
'366,366,366,366,366,366,,,,,,366,366,366,366,366,366,366,,,366,,,,,',
'366,366,366,366,366,366,366,366,366,366,366,366,,366,366,366,,366,366',
'366,366,366,482,482,482,482,482,482,482,482,482,482,482,,482,482,,,482',
'482,,366,,,366,,,366,366,,,366,,366,482,,482,366,482,482,,482,482,482',
'482,482,366,482,,,,366,366,366,366,,366,366,366,366,,,,,366,366,,,,',
',,366,,366,366,366,,,366,366,919,919,919,919,919,919,,,,919,919,,,,919',
',919,919,919,919,919,919,919,,,,,,919,919,919,919,919,919,919,,,919',
',,,,,919,919,919,919,919,919,919,919,919,919,919,919,,919,919,919,,919',
'919,919,919,919,481,481,481,481,481,481,481,481,481,481,481,,481,481',
',,481,481,,919,,,919,,,919,919,,,919,,919,481,,481,919,481,481,,481',
'481,481,481,481,919,481,,,,919,919,919,919,,919,919,919,919,,,,,919',
'919,,,,,,,919,,919,919,919,,,919,919,360,360,360,360,360,360,,,,360',
'360,,,,360,,360,360,360,360,360,360,360,,,,,,360,360,360,360,360,360',
'360,,,360,,,,,,360,360,360,360,360,360,360,360,360,360,360,360,,360',
'360,360,,360,360,360,360,360,351,351,351,351,351,351,351,351,351,351',
'351,,351,351,,,351,351,,360,,,360,,,360,360,,,360,,360,351,,351,360',
'351,351,,351,351,351,351,351,360,351,,,,360,360,360,360,,360,360,360',
'360,,,,,360,360,,,,,,,360,,360,360,360,,,360,360,329,329,329,329,329',
'329,,,,329,329,,,,329,,329,329,329,329,329,329,329,,,,,,329,329,329',
'329,329,329,329,,,329,,,,,,329,329,329,329,329,329,329,329,329,329,329',
'329,,329,329,329,,329,329,329,329,329,352,352,352,352,352,352,352,352',
'352,352,352,,352,352,,,352,352,,329,,,329,,,329,329,,,329,,329,352,',
'352,329,352,352,,352,352,352,352,352,329,352,,,,329,329,329,329,,329',
'329,329,329,,,,,329,329,,,,,,,329,,329,329,329,,,329,329,324,324,324',
'324,324,324,,,,324,324,,,,324,,324,324,324,324,324,324,324,,,,,,324',
'324,324,324,324,324,324,,,324,,,,,,324,324,324,324,324,324,324,324,324',
'324,324,324,,324,324,324,,324,324,324,324,324,495,495,495,495,495,495',
'495,,,495,495,,,,,,495,495,,324,,,324,,,324,324,,,324,,324,495,,495',
'324,495,495,,495,495,495,495,495,324,495,,,,324,324,324,324,,324,324',
'324,324,,,,,324,324,,,,478,478,478,324,478,324,324,324,478,478,324,324',
',478,,478,478,478,478,478,478,478,,,,,,478,478,478,478,478,478,478,',
',478,,,,,,,478,,,478,478,478,478,478,478,478,478,,478,478,478,,478,478',
'478,478,478,489,,,,,,,,,,,,,,,,489,489,,478,,,478,,,478,478,,,478,,',
'489,,489,478,489,489,,489,489,,,,478,,,,,478,478,478,478,,478,478,478',
'478,,,,,478,478,,,,,,,478,,478,478,478,,,478,478,7,7,7,7,7,,,,7,7,,',
',7,,7,7,7,7,7,7,7,,,,,,7,7,7,7,7,7,7,,,7,,,,,,7,7,7,7,7,7,7,7,7,7,7',
'7,,7,7,7,,7,7,7,7,7,490,,,,,,,,,,,,,,,,490,490,,7,,,7,,,7,7,,,7,,7,490',
',490,7,490,490,,490,490,,,,7,,,,,7,7,7,7,,7,7,7,7,,,,,7,7,,,,22,22,22',
'7,22,7,7,7,22,22,7,7,,22,,22,22,22,22,22,22,22,,,,,,22,22,22,22,22,22',
'22,,,22,,,,,,,22,,,22,22,22,22,22,22,22,22,,22,22,22,,22,22,22,22,22',
'491,,,,,,,,,,,,,,,,491,491,,22,,,22,,,22,22,,,22,,,491,,,22,491,491',
',491,491,,,,22,,,,,22,22,22,22,,22,22,22,22,,,,,22,22,,,,,,,22,,22,22',
'22,30,,22,22,,,,30,30,30,,,30,30,30,,30,,,,,,,,30,30,30,30,,,,,,,,,30',
'30,,30,30,30,30,30,,,,,,,,,,,,,,,,,,,,,,,30,30,30,30,30,30,30,30,30',
'30,30,30,30,30,,,30,30,30,,,30,,30,30,,,30,30,,30,,30,,30,,30,30,,30',
'30,30,30,30,31,30,30,30,,,,31,31,31,,,31,31,31,,31,30,,,30,30,,30,31',
'30,31,31,,,,,30,,,,31,31,,31,31,31,31,31,,,,,,,,,,,,,,,,,,,,,,,31,31',
'31,31,31,31,31,31,31,31,31,31,31,31,,,31,31,31,,,31,,31,31,,,31,31,',
'31,,31,,31,,31,31,,31,31,31,31,31,,31,,31,,,,,,,,,,,,,,31,,,31,31,,31',
',31,32,32,32,,32,,31,,32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32',
'32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,,32',
'32,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32,,32,,,32',
',,,,,32,,,,,32,32,32,32,,32,32,32,32,,,,,32,32,,,,33,33,33,32,33,32',
'32,32,33,33,32,32,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33',
',,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,33,33,33',
',,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,33,,,,,,33,,,',
',33,33,33,33,,33,33,33,33,,,,,33,33,,,,34,34,34,33,34,33,33,33,34,34',
'33,33,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,',
',34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,34,34,34,,,,,,,,,,',
',,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,34,,,,,,34,,,,,34,34,34',
'34,,34,34,34,34,,,,,34,34,,,,44,44,44,34,44,34,34,34,44,44,34,34,,44',
',44,44,44,44,44,44,44,,,,,,44,44,44,44,44,44,44,,,44,,,,,,,44,,,44,44',
'44,44,44,44,44,44,,44,44,44,,44,44,44,44,44,,,,,,,,,,,,,,,,,,,,44,,',
'44,,,44,44,,,44,,,,,,44,,,,,,,,,44,,,,,44,44,44,44,,44,44,44,44,,,,',
'44,44,,,,45,45,45,44,45,44,44,44,45,45,44,44,,45,,45,45,45,45,45,45',
'45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45',
',45,45,45,,45,45,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,',
',,,45,,,,,,,,,45,,,,,45,45,45,45,,45,45,45,45,,,,,45,45,,,,47,47,47',
'45,47,45,45,45,47,47,45,45,,47,,47,47,47,47,47,47,47,,,,,,47,47,47,47',
'47,47,47,,,47,,,,,,,47,,,47,47,47,47,47,47,47,47,,47,47,47,,47,47,47',
'47,47,,,,,,,,,,,,,,,,,,,,47,,,47,,,47,47,,,47,,,,,,47,,,,,,,,,47,,,',
',47,47,47,47,,47,47,47,47,,,,,47,47,,,,48,48,48,47,48,47,47,47,48,48',
'47,47,,48,,48,48,48,48,48,48,48,,,,,,48,48,48,48,48,48,48,,,48,,,,,',
',48,,,48,48,48,48,48,48,48,48,,48,48,48,,48,48,48,48,48,,,,,,,,,,,,',
',,,,,,,48,,,48,,,48,48,,,48,,,,,,48,,,,,,,,,48,,,,,48,48,48,48,,48,48',
'48,48,,,,,48,48,,,,50,50,50,48,50,48,48,48,50,50,48,48,,50,,50,50,50',
'50,50,50,50,,,,,,50,50,50,50,50,50,50,,,50,,,,,,,50,,,50,50,50,50,50',
'50,50,50,,50,50,50,,50,50,50,50,50,,,,,,,,,,,,,,,,,,,,50,,,50,,,50,50',
',,50,,,,,,50,,,,,,,,,50,,,,,50,50,50,50,,50,50,50,50,,,,,50,50,,,,,',
',50,,50,50,50,64,,50,50,,,,64,64,64,,,64,64,64,,64,,,,,,,,64,,64,64',
'64,,,,705,705,705,705,64,64,,64,64,64,64,64,,,,,705,705,705,,,,,,,,',
',,705,705,,,705,64,64,64,64,64,64,64,64,64,64,64,64,64,64,,,64,64,64',
',,64,,,64,,,64,64,,64,,64,,64,,64,64,,64,64,64,64,64,,64,,64,,705,705',
'705,705,,705,705,705,705,,,,64,705,705,64,64,64,64,,64,705,64,705,705',
'705,,64,66,66,66,66,66,,,,66,66,,,,66,,66,66,66,66,66,66,66,,,,,,66',
'66,66,66,66,66,66,,,66,,,,,,66,66,,66,66,66,66,66,66,66,66,66,,66,66',
'66,,66,66,66,66,66,,,,,,,,,,,,,,,,,,,,66,,,66,,,66,66,,,66,,66,,,,66',
',,,,,,,,66,,,,,66,66,66,66,,66,66,66,66,,,,,66,66,,,,67,67,67,66,67',
'66,66,66,67,67,66,66,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67',
'67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,67,67,67,67,,67,67,67,67',
'67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,67,,,,67,,,67,,,,,,67,,',
',,67,67,67,67,,67,67,67,67,,,,,67,67,,,,68,68,68,67,68,67,67,67,68,68',
'67,67,,68,,68,68,68,68,68,68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,',
',68,,,68,68,68,68,68,68,68,68,68,68,68,68,,68,68,68,68,68,,,,,,,,,,',
',,,,,,,,,68,,,68,,,68,68,,,68,,,,,,68,,,68,,,,,,68,,,,,68,68,68,68,',
'68,68,68,68,,,,,68,68,,,,71,71,71,68,71,68,68,68,71,71,68,68,,71,,71',
'71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71',
'71,71,71,71,71,,71,71,71,,71,71,71,71,71,,,,,,,,,,,,,,,,,,,,71,,,71',
',,71,71,,,71,,,,,,71,,,,,,,,,71,,,,,71,71,71,71,,71,71,71,71,,,,,71',
'71,,,,72,72,72,71,72,71,71,71,72,72,71,71,,72,,72,72,72,72,72,72,72',
',,,,,72,72,72,72,72,72,72,,,72,,,,,,,72,,,72,72,72,72,72,72,72,72,,72',
'72,72,,72,72,72,72,72,,,,,,,,,,,,,,,,,,,,72,,,72,,,72,72,,,72,,,,,,72',
',,,,,,,,72,,,,,72,72,72,72,,72,72,72,72,,,,,72,72,,,,75,75,75,72,75',
'72,72,72,75,75,72,72,,75,,75,75,75,75,75,75,75,,,,,,75,75,75,75,75,75',
'75,,,75,,,,,,,75,,,75,75,75,75,75,75,75,75,,75,75,75,,75,75,75,75,75',
',,,,,,,,,,,,,,,,,,,75,,,75,,,75,75,,,75,,,,,,75,,,,,,,,,75,,,,,75,75',
'75,75,,75,75,75,75,,,,,75,75,75,,,,,75,75,,75,75,75,,,75,75,121,121',
'121,121,121,,,,121,121,,,,121,,121,121,121,121,121,121,121,,,,,,121',
'121,121,121,121,121,121,,,121,,,,,,121,121,121,121,121,121,121,121,121',
'121,121,121,,121,121,121,,121,121,121,121,121,,,,,,,,,,,,,,,,,,,,121',
',,121,,,121,121,,,121,,121,,,,121,,,,,,,,,121,,,,,121,121,121,121,,121',
'121,121,121,,,,,121,121,,,,,,121,121,,121,121,121,,,121,121,126,126',
'126,,126,,,,126,126,,,,126,,126,126,126,126,126,126,126,,,,,,126,126',
'126,126,126,126,126,,,126,,,,,,,126,,,126,126,126,126,126,126,126,126',
',126,126,126,,126,126,126,126,126,,,,,,,,,,,,,,,,,,,,126,,,126,,,126',
'126,,,126,,,,,,126,,,,,,,,,126,,,,,126,126,126,126,,126,126,126,126',
',,,,126,126,,,,127,127,127,126,127,126,126,126,127,127,126,126,,127',
',127,127,127,127,127,127,127,,,,,,127,127,127,127,127,127,127,,,127',
',,,,,,127,,,127,127,127,127,127,127,127,127,,127,127,127,,127,127,127',
'127,127,,,,,,,,,,,,,,,,,,,,127,,,127,,,127,127,,,127,,,,,,127,,,,,,',
',,127,,,,,127,127,127,127,,127,127,127,127,,,,,127,127,,,,128,128,128',
'127,128,127,127,127,128,128,127,127,,128,,128,128,128,128,128,128,128',
',,,,,128,128,128,128,128,128,128,,,128,,,,,,,128,,,128,128,128,128,128',
'128,128,128,,128,128,128,,128,128,128,128,128,,,,,,,,,,,,,,,,,,,,128',
',,128,,,128,128,,,128,,,,,,128,,,,,,,,,128,,,,,128,128,128,128,,128',
'128,128,128,,,,,128,128,,,,129,129,129,128,129,128,128,128,129,129,128',
'128,,129,,129,129,129,129,129,129,129,,,,,,129,129,129,129,129,129,129',
',,129,,,,,,,129,,,129,129,129,129,129,129,129,129,,129,129,129,,129',
'129,129,129,129,,,,,,,,,,,,,,,,,,,,129,,,129,,,129,129,,,129,,,,,,129',
',,,,,,,,129,,,,,129,129,129,129,,129,129,129,129,,,,,129,129,,,,,,,129',
',129,129,129,,,129,129,130,130,130,130,130,,,,130,130,,,,130,,130,130',
'130,130,130,130,130,,,,,,130,130,130,130,130,130,130,,,130,,,,,,130',
'130,,130,130,130,130,130,130,130,130,130,,130,130,130,,130,130,130,130',
'130,,,,,,,,,,,,,,,,,,,,130,,,130,,,130,130,,,130,,130,,,,130,,,,,,,',
',130,,,,,130,130,130,130,,130,130,130,130,,,,,130,130,,,,216,216,216',
'130,216,130,130,130,216,216,130,130,,216,,216,216,216,216,216,216,216',
',,,,,216,216,216,216,216,216,216,,,216,,,,,,,216,,,216,216,216,216,216',
'216,216,216,,216,216,216,,216,216,216,216,216,,,,,,,,,,,,,,,,,,,,216',
',,216,,,216,216,,,216,,216,,,,216,,,,,,,,,216,,,,,216,216,216,216,,216',
'216,216,216,,,,,216,216,,,,217,217,217,216,217,216,216,216,217,217,216',
'216,,217,,217,217,217,217,217,217,217,,,,,,217,217,217,217,217,217,217',
',,217,,,,,,,217,,,217,217,217,217,217,217,217,217,,217,217,217,,217',
'217,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,217,,',
',217,,,,,,,,,217,,,,,217,217,217,217,,217,217,217,217,,,,,217,217,,',
',218,218,218,217,218,217,217,217,218,218,217,217,,218,,218,218,218,218',
'218,218,218,,,,,,218,218,218,218,218,218,218,,,218,,,,,,,218,,,218,218',
'218,218,218,218,218,218,,218,218,218,,218,218,218,218,218,,,,,,,,,,',
',,,,,,,,,218,,,218,,,218,218,,,218,,,,,,218,,,,,,,,,218,,,,,218,218',
'218,218,,218,218,218,218,,,,,218,218,,,,219,219,219,218,219,218,218',
'218,219,219,218,218,,219,,219,219,219,219,219,219,219,,,,,,219,219,219',
'219,219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219,219,,219',
'219,219,,219,219,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219',
',,219,,,,,,219,,,,,,,,,219,,,,,219,219,219,219,,219,219,219,219,,,,',
'219,219,,,,220,220,220,219,220,219,219,219,220,220,219,219,,220,,220',
'220,220,220,220,220,220,,,,,,220,220,220,220,220,220,220,,,220,,,,,',
',220,,,220,220,220,220,220,220,220,220,,220,220,220,,220,220,220,220',
'220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220,,,,,,220,,,,,,,,,220',
',,,,220,220,220,220,,220,220,220,220,,,,,220,220,,,,221,221,221,220',
'221,220,220,220,221,221,220,220,,221,,221,221,221,221,221,221,221,,',
',,,221,221,221,221,221,221,221,,,221,,,,,,,221,,,221,221,221,221,221',
'221,221,221,221,221,221,221,,221,221,221,221,221,,,,,,,,,,,,,,,,,,,',
'221,,,221,,,221,221,,,221,,221,,221,,221,,,221,,,,,,221,,,,,221,221',
'221,221,,221,221,221,221,,,,,221,221,,,,226,226,226,221,226,221,221',
'221,226,226,221,221,,226,,226,226,226,226,226,226,226,,,,,,226,226,226',
'226,226,226,226,,,226,,,,,,,226,,,226,226,226,226,226,226,226,226,,226',
'226,226,,226,226,226,226,226,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,226',
',,226,,,,,,226,,,,,,,,,226,,,,,226,226,226,226,,226,226,226,226,,,,',
'226,226,,,,227,227,227,226,227,226,226,226,227,227,226,226,,227,,227',
'227,227,227,227,227,227,,,,,,227,227,227,227,227,227,227,,,227,,,,,',
',227,,,227,227,227,227,227,227,227,227,,227,227,227,,227,227,227,227',
'227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,,,,,227,,,,,,,,,227',
',,,,227,227,227,227,,227,227,227,227,,,,,227,227,,,,228,228,228,227',
'228,227,227,227,228,228,227,227,,228,,228,228,228,228,228,228,228,,',
',,,228,228,228,228,228,228,228,,,228,,,,,,,228,,,228,228,228,228,228',
'228,228,228,,228,228,228,,228,228,228,228,228,,,,,,,,,,,,,,,,,,,,228',
',,228,,,228,228,,,228,,,,,,228,,,,,,,,,228,,,,,228,228,228,228,,228',
'228,228,228,,,,,228,228,228,,,239,239,239,228,239,228,228,228,239,239',
'228,228,,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239,239',
'239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239,',
'239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,',
',,239,,,,,,,,,239,,,,,239,239,239,239,,239,239,239,239,,,,,239,239,',
',,244,244,244,239,244,239,239,239,244,244,239,239,,244,,244,244,244',
'244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244',
'244,244,244,244,244,244,244,,244,244,244,,244,244,244,244,244,,,,,,',
',,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,,244,,,,,244',
'244,244,244,,244,244,244,244,,,,,244,244,,,,245,245,245,244,245,244',
'244,244,245,245,244,244,,245,,245,245,245,245,245,245,245,,,,,,245,245',
'245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245',
',245,245,245,,245,245,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245',
'245,,,245,,,,,,245,,,,,,,,,245,,,,,245,245,245,245,,245,245,245,245',
',,,,245,245,,,,246,246,246,245,246,245,245,245,246,246,245,245,,246',
',246,246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246',
',,,,,,246,,,246,246,246,246,246,246,246,246,,246,246,246,,246,246,246',
'246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,',
',,246,,,,,246,246,246,246,,246,246,246,246,,,,,246,246,,,,247,247,247',
'246,247,246,246,246,247,247,246,246,,247,,247,247,247,247,247,247,247',
',,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247,247,247',
'247,247,247,,247,247,247,,247,247,247,247,247,,,,,,,,,,,,,,,,,,,,247',
',,247,,,247,247,,,247,,,,,,247,,,,,,,,,247,,,,,247,247,247,247,,247',
'247,247,247,,,,,247,247,,,,248,248,248,247,248,247,247,247,248,248,247',
'247,,248,,248,248,248,248,248,248,248,,,,,,248,248,248,248,248,248,248',
',,248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248,248,248,,248',
'248,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248',
',,,,,,,,248,,,,,248,248,248,248,,248,248,248,248,,,,,248,248,,,,249',
'249,249,248,249,248,248,248,249,249,248,248,,249,,249,249,249,249,249',
'249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249',
'249,249,249,249,249,,249,249,249,,249,249,249,249,249,,,,,,,,,,,,,,',
',,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,,249,,,,,249,249,249',
'249,,249,249,249,249,,,,,249,249,,,,250,250,250,249,250,249,249,249',
'250,250,249,249,,250,,250,250,250,250,250,250,250,,,,,,250,250,250,250',
'250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250,,250,250',
'250,,250,250,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250',
',,,,,250,,,,,,,,,250,,,,,250,250,250,250,,250,250,250,250,,,,,250,250',
',,,251,251,251,250,251,250,250,250,251,251,250,250,,251,,251,251,251',
'251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,,,251,,,251',
'251,251,251,251,251,251,251,,251,251,251,,251,251,251,251,251,,,,,,',
',,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,,251,,,,,251',
'251,251,251,,251,251,251,251,,,,,251,251,,,,252,252,252,251,252,251',
'251,251,252,252,251,251,,252,,252,252,252,252,252,252,252,,,,,,252,252',
'252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252,252,252,252',
',252,252,252,,252,252,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252',
'252,,,252,,,,,,252,,,,,,,,,252,,,,,252,252,252,252,,252,252,252,252',
',,,,252,252,,,,253,253,253,252,253,252,252,252,253,253,252,252,,253',
',253,253,253,253,253,253,253,,,,,,253,253,253,253,253,253,253,,,253',
',,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253,,253,253,253',
'253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,',
',,253,,,,,253,253,253,253,,253,253,253,253,,,,,253,253,,,,254,254,254',
'253,254,253,253,253,254,254,253,253,,254,,254,254,254,254,254,254,254',
',,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254,254,254',
'254,254,254,,254,254,254,,254,254,254,254,254,,,,,,,,,,,,,,,,,,,,254',
',,254,,,254,254,,,254,,,,,,254,,,,,,,,,254,,,,,254,254,254,254,,254',
'254,254,254,,,,,254,254,,,,255,255,255,254,255,254,254,254,255,255,254',
'254,,255,,255,255,255,255,255,255,255,,,,,,255,255,255,255,255,255,255',
',,255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255,255,255,,255',
'255,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255',
',,,,,,,,255,,,,,255,255,255,255,,255,255,255,255,,,,,255,255,,,,256',
'256,256,255,256,255,255,255,256,256,255,255,,256,,256,256,256,256,256',
'256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256',
'256,256,256,256,256,,256,256,256,,256,256,256,256,256,,,,,,,,,,,,,,',
',,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,,256,,,,,256,256,256',
'256,,256,256,256,256,,,,,256,256,,,,257,257,257,256,257,256,256,256',
'257,257,256,256,,257,,257,257,257,257,257,257,257,,,,,,257,257,257,257',
'257,257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257,257',
'257,,257,257,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257',
',,,,,257,,,,,,,,,257,,,,,257,257,257,257,,257,257,257,257,,,,,257,257',
',,,258,258,258,257,258,257,257,257,258,258,257,257,,258,,258,258,258',
'258,258,258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258',
'258,258,258,258,258,258,258,,258,258,258,,258,258,258,258,258,,,,,,',
',,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,,258,,,,,258',
'258,258,258,,258,258,258,258,,,,,258,258,,,,259,259,259,258,259,258',
'258,258,259,259,258,258,,259,,259,259,259,259,259,259,259,,,,,,259,259',
'259,259,259,259,259,,,259,,,,,,,259,,,259,259,259,259,259,259,259,259',
',259,259,259,,259,259,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259',
'259,,,259,,,,,,259,,,,,,,,,259,,,,,259,259,259,259,,259,259,259,259',
',,,,259,259,,,,260,260,260,259,260,259,259,259,260,260,259,259,,260',
',260,260,260,260,260,260,260,,,,,,260,260,260,260,260,260,260,,,260',
',,,,,,260,,,260,260,260,260,260,260,260,260,,260,260,260,,260,260,260',
'260,260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,',
',,260,,,,,260,260,260,260,,260,260,260,260,,,,,260,260,,,,261,261,261',
'260,261,260,260,260,261,261,260,260,,261,,261,261,261,261,261,261,261',
',,,,,261,261,261,261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261',
'261,261,261,,261,261,261,,261,261,261,261,261,,,,,,,,,,,,,,,,,,,,261',
',,261,,,261,261,,,261,,,,,,261,,,,,,,,,261,,,,,261,261,261,261,,261',
'261,261,261,,,,,261,261,,,,262,262,262,261,262,261,261,261,262,262,261',
'261,,262,,262,262,262,262,262,262,262,,,,,,262,262,262,262,262,262,262',
',,262,,,,,,,262,,,262,262,262,262,262,262,262,262,,262,262,262,,262',
'262,262,262,262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262,,,262,,,,,,262',
',,,,,,,,262,,,,,262,262,262,262,,262,262,262,262,,,,,262,262,,,,263',
'263,263,262,263,262,262,262,263,263,262,262,,263,,263,263,263,263,263',
'263,263,,,,,,263,263,263,263,263,263,263,,,263,,,,,,,263,,,263,263,263',
'263,263,263,263,263,,263,263,263,,263,263,263,263,263,,,,,,,,,,,,,,',
',,,,,263,,,263,,,263,263,,,263,,,,,,263,,,,,,,,,263,,,,,263,263,263',
'263,,263,263,263,263,,,,,263,263,,,,264,264,264,263,264,263,263,263',
'264,264,263,263,,264,,264,264,264,264,264,264,264,,,,,,264,264,264,264',
'264,264,264,,,264,,,,,,,264,,,264,264,264,264,264,264,264,264,,264,264',
'264,,264,264,264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264,,,264',
',,,,,264,,,,,,,,,264,,,,,264,264,264,264,,264,264,264,264,,,,,264,264',
',,,265,265,265,264,265,264,264,264,265,265,264,264,,265,,265,265,265',
'265,265,265,265,,,,,,265,265,265,265,265,265,265,,,265,,,,,,,265,,,265',
'265,265,265,265,265,265,265,,265,265,265,,265,265,265,265,265,,,,,,',
',,,,,,,,,,,,,265,,,265,,,265,265,,,265,,,,,,265,,,,,,,,,265,,,,,265',
'265,265,265,,265,265,265,265,,,,,265,265,,,,270,270,270,265,270,265',
'265,265,270,270,265,265,,270,,270,270,270,270,270,270,270,,,,,,270,270',
'270,270,270,270,270,,,270,,,,,,,270,,,270,270,270,270,270,270,270,270',
',270,270,270,,270,270,270,270,270,,,,,,,,,,,,,,,,,,,,270,,,270,,,270',
'270,,,270,,,,,,270,,,,,,,,,270,,,,,270,270,270,270,,270,270,270,270',
',,,,270,270,,,,286,286,286,270,286,270,270,270,286,286,270,270,,286',
',286,286,286,286,286,286,286,,,,,,286,286,286,286,286,286,286,,,286',
',,,,,,286,,,286,286,286,286,286,286,286,286,,286,286,286,,286,286,286',
'286,286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286,286,,,286,,,,,,286,,,,,,',
',,286,,,,,286,286,286,286,,286,286,286,286,,,,,286,286,,,,293,293,293',
'286,293,286,286,286,293,293,286,286,,293,,293,293,293,293,293,293,293',
',,,,,293,293,293,293,293,293,293,,,293,,,,,,,293,,,293,293,293,293,293',
'293,293,293,293,293,293,293,,293,293,293,293,293,,,,,,,,,,,,,,,,,,,',
'293,,,293,,,293,293,,,293,,293,,293,,293,,,293,,,,,,293,,,,,293,293',
'293,293,,293,293,293,293,,,,,293,293,,,,294,294,294,293,294,293,293',
'293,294,294,293,293,,294,,294,294,294,294,294,294,294,,,,,,294,294,294',
'294,294,294,294,,,294,,,,,,,294,,,294,294,294,294,294,294,294,294,294',
'294,294,294,,294,294,294,294,294,,,,,,,,,,,,,,,,,,,,294,,,294,,,294',
'294,,,294,,294,,294,,294,,,294,,,,,,294,,,,,294,294,294,294,,294,294',
'294,294,,,,,294,294,,,,302,302,302,294,302,294,294,294,302,302,294,294',
',302,,302,302,302,302,302,302,302,,,,,,302,302,302,302,302,302,302,',
',302,,,,,,,302,,,302,302,302,302,302,302,302,302,302,302,302,302,,302',
'302,302,302,302,,,,,,,,,,,,,,,,,,,,302,,,302,,,302,302,,,302,,302,,302',
',302,,,302,,,,,,302,,,,,302,302,302,302,,302,302,302,302,,,,,302,302',
'302,,,309,309,309,302,309,302,302,302,309,309,302,302,,309,,309,309',
'309,309,309,309,309,,,,,,309,309,309,309,309,309,309,,,309,,,,,,,309',
',,309,309,309,309,309,309,309,309,,309,309,309,,309,309,309,309,309',
',,,,,,,,,,,,,,,,,,,309,,,309,,,309,309,,,309,,,,,,309,,,,,,,,,309,,',
',,309,309,309,309,,309,309,309,309,,,,,309,309,,,,311,311,311,309,311',
'309,309,309,311,311,309,309,,311,,311,311,311,311,311,311,311,,,,,,311',
'311,311,311,311,311,311,,,311,,,,,,,311,,,311,311,311,311,311,311,311',
'311,,311,311,311,,311,311,311,311,311,,,,,,,,,,,,,,,,,,,,311,,,311,',
',311,311,,,311,,,,,,311,,,,,,,,,311,,,,,311,311,311,311,,311,311,311',
'311,,,,,311,311,,,,314,314,314,311,314,311,311,311,314,314,311,311,',
'314,,314,314,314,314,314,314,314,,,,,,314,314,314,314,314,314,314,,',
'314,,,,,,,314,,,314,314,314,314,314,314,314,314,,314,314,314,,314,314',
'314,314,314,,,,,,,,,,,,,,,,,,,,314,,,314,,,314,314,,,314,,,,,,314,,',
',,,,,,314,,,,,314,314,314,314,,314,314,314,314,,,,,314,314,,,,315,315',
'315,314,315,314,314,314,315,315,314,314,,315,,315,315,315,315,315,315',
'315,,,,,,315,315,315,315,315,315,315,,,315,,,,,,,315,,,315,315,315,315',
'315,315,315,315,,315,315,315,,315,315,315,315,315,,,,,,,,,,,,,,,,,,',
',315,,,315,,,315,315,,,315,,,,,,315,,,,,,,,,315,,,,,315,315,315,315',
',315,315,315,315,,,,,315,315,,,,,,,315,,315,315,315,,,315,315,320,320',
'320,320,320,,,,320,320,,,,320,,320,320,320,320,320,320,320,,,,,,320',
'320,320,320,320,320,320,,,320,,,,,,320,320,,320,320,320,320,320,320',
'320,320,320,,320,320,320,,320,320,320,320,320,,,,,,,,,,,,,,,,,,,,320',
',,320,,,320,320,,,320,,320,,,,320,,,,,,,,,320,,,,,320,320,320,320,,320',
'320,320,320,,,,,320,320,,,,356,356,356,320,356,320,320,320,356,356,320',
'320,,356,,356,356,356,356,356,356,356,,,,,,356,356,356,356,356,356,356',
',,356,,,,,,,356,,,356,356,356,356,356,356,356,356,,356,356,356,,356',
'356,356,356,356,,,,,,,,,,,,,,,,,,,,356,,,356,,,356,356,,,356,,,,,,356',
',,,,,,,,356,,,,,356,356,356,356,,356,356,356,356,,,,,356,356,,,,358',
'358,358,356,358,356,356,356,358,358,356,356,,358,,358,358,358,358,358',
'358,358,,,,,,358,358,358,358,358,358,358,,,358,,,,,,,358,,,358,358,358',
'358,358,358,358,358,,358,358,358,,358,358,358,358,358,,,,,,,,,,,,,,',
',,,,,358,,,358,358,,358,358,,,358,,,,,,358,,,,,,,,,358,,,,,358,358,358',
'358,,358,358,358,358,,,,,358,358,,,,381,381,381,358,381,358,358,358',
'381,381,358,358,,381,,381,381,381,381,381,381,381,,,,,,381,381,381,381',
'381,381,381,,,381,,,,,,,381,,,381,381,381,381,381,381,381,381,,381,381',
'381,,381,381,381,381,381,,,,,,,,,,,,,,,,,,,,381,,,381,,,381,381,,,381',
',,,,,381,,,,,,,,,381,,,,,381,381,381,381,,381,381,381,381,,,,,381,381',
',,,402,402,402,381,402,381,381,381,402,402,381,381,,402,,402,402,402',
'402,402,402,402,,,,,,402,402,402,402,402,402,402,,,402,,,,,,,402,,,402',
'402,402,402,402,402,402,402,,402,402,402,,402,402,402,402,402,,,,,,',
',,,,,,,,,,,,,402,,,402,,,402,402,,,402,,,,,,402,,,,,,,,,402,,,,,402',
'402,402,402,,402,402,402,402,,,,,402,402,,,,431,431,431,402,431,402',
'402,402,431,431,402,402,,431,,431,431,431,431,431,431,431,,,,,,431,431',
'431,431,431,431,431,,,431,,,,,,,431,,,431,431,431,431,431,431,431,431',
',431,431,431,,431,431,431,431,431,,,,,,,,,,,,,,,,,,,,431,,,431,,,431',
'431,,,431,,,,,,431,,,,,,,,,431,,,,,431,431,431,431,,431,431,431,431',
',,,,431,431,,,,,,,431,,431,431,431,455,,431,431,,,,455,455,455,,,455',
'455,455,,455,,,,,,,,455,455,455,455,,,,,,,,,455,455,,455,455,455,455',
'455,,,,,,,,,,,,,,,,,,,,,,,455,455,455,455,455,455,455,455,455,455,455',
'455,455,455,,,455,455,455,,,455,,455,455,,,455,455,,455,,455,,455,,455',
'455,,455,455,455,455,455,,455,455,455,1183,,1183,1183,1183,1183,1183',
',,,,,,455,,1183,455,455,464,455,,455,,,,464,464,464,455,,464,464,464',
',464,,,1183,,,,,464,464,464,464,464,,1183,1183,,,,1183,464,464,,464',
'464,464,464,464,,,,,,,,,,,,,,,,,,,,,,,464,464,464,464,464,464,464,464',
'464,464,464,464,464,464,,,464,464,464,,,464,,,464,,,464,464,,464,,464',
',464,,464,464,,464,464,464,464,464,,464,464,464,,,,,,,,,,,,,,464,,,464',
'464,464,464,,464,465,464,,,,,464,465,465,465,,,465,465,465,,465,,,,',
',,,465,465,465,465,465,,,,,,,,465,465,,465,465,465,465,465,,,,,,,,,',
',,,,,,,,,,,,,465,465,465,465,465,465,465,465,465,465,465,465,465,465',
',,465,465,465,,,465,,,465,,,465,465,,465,,465,,465,,465,465,,465,465',
'465,465,465,,465,465,465,,,,,,,,,,,,,,465,,,465,465,465,465,,465,,465',
',474,474,474,465,474,,,,474,474,,,,474,,474,474,474,474,474,474,474',
',,,,,474,474,474,474,474,474,474,,,474,,,,,,,474,,,474,474,474,474,474',
'474,474,474,474,474,474,474,,474,474,474,474,474,,,,,,,,,,,,,,,,,,,',
'474,,,474,,,474,474,,,474,,474,,474,,474,,,474,,,,,,474,,,,,474,474',
'474,474,,474,474,474,474,,,,,474,474,,,,476,476,476,474,476,474,474',
'474,476,476,474,474,,476,,476,476,476,476,476,476,476,,,,,,476,476,476',
'476,476,476,476,,,476,,,,,,,476,,,476,476,476,476,476,476,476,476,,476',
'476,476,,476,476,476,476,476,,,,,,,,,,,,,,,,,,,,476,,,476,,,476,476',
',,476,,,,,,476,,,,,,,,,476,,,,,476,476,476,476,,476,476,476,476,,,,',
'476,476,,,,477,477,477,476,477,476,476,476,477,477,476,476,,477,,477',
'477,477,477,477,477,477,,,,,,477,477,477,477,477,477,477,,,477,,,,,',
',477,,,477,477,477,477,477,477,477,477,,477,477,477,,477,477,477,477',
'477,,,,,,,,,,,,,,,,,,,,477,,,477,,,477,477,,,477,,,,,,477,,,,,,,,,477',
',,,,477,477,477,477,,477,477,477,477,,,,,477,477,,,,,,,477,,477,477',
'477,507,,477,477,,,,507,507,507,,,507,507,507,906,507,906,906,906,906',
'906,,,507,507,507,,,,906,,,,,,507,507,,507,507,507,507,507,,,,,,,,638',
'906,638,638,638,638,638,,,,906,906,906,906,,638,,906,,1181,,1181,1181',
'1181,1181,1181,507,,,,,,,507,1181,,,638,507,507,,,,906,,,638,638,638',
'638,,,,638,,,1181,,,,,507,507,,,1181,1181,1181,1181,,,,1181,,,,507,',
',507,,512,512,512,507,512,,,,512,512,507,,,512,,512,512,512,512,512',
'512,512,,,,,,512,512,512,512,512,512,512,,,512,,,,,,,512,,,512,512,512',
'512,512,512,512,512,,512,512,512,,512,512,512,512,512,,,,,,,,,,,,,,',
',,,,,512,,,512,,,512,512,,,512,,,,,,512,,,,,,,,,512,,,,,512,512,512',
'512,,512,512,512,512,,,,,512,512,,,,522,522,522,512,522,512,512,512',
'522,522,512,512,,522,,522,522,522,522,522,522,522,,,,,,522,522,522,522',
'522,522,522,,,522,,,,,,,522,,,522,522,522,522,522,522,522,522,522,522',
'522,522,,522,522,522,522,522,,,,,,,,,,,,,,,,,,,,522,,,522,,,522,522',
',,522,,522,,522,,522,,,522,,,,,,522,,,,,522,522,522,522,,522,522,522',
'522,,,,,522,522,,,,524,524,524,522,524,522,522,522,524,524,522,522,',
'524,,524,524,524,524,524,524,524,,,,,,524,524,524,524,524,524,524,,',
'524,,,,,,,524,,,524,524,524,524,524,524,524,524,524,524,524,524,,524',
'524,524,524,524,,,,,,,,,,,,,,,,,,,,524,,,524,,,524,524,,,524,,,,524',
',524,,,524,,,,,,524,,,,,524,524,524,524,,524,524,524,524,,,,,524,524',
',,,526,526,526,524,526,524,524,524,526,526,524,524,,526,,526,526,526',
'526,526,526,526,,,,,,526,526,526,526,526,526,526,,,526,,,,,,,526,,,526',
'526,526,526,526,526,526,526,,526,526,526,,526,526,526,526,526,,,,,,',
',,,,,,,,,,,,,526,,,526,,,526,526,,,526,,,,,,526,,,,,,,,,526,,,,,526',
'526,526,526,,526,526,526,526,,,,,526,526,,,,,,,526,,526,526,526,,,526',
'526,532,532,532,532,532,,,,532,532,,,,532,,532,532,532,532,532,532,532',
',,,,,532,532,532,532,532,532,532,,,532,,,,,,532,532,532,532,532,532',
'532,532,532,532,532,532,,532,532,532,,532,532,532,532,532,,,,,,,,,,',
',,,,,,,,,532,,,532,,,532,532,,,532,,532,,,,532,,,,,,,,,532,,,,,532,532',
'532,532,,532,532,532,532,,,,,532,532,,,,,,532,532,,532,532,532,,,532',
'532,542,542,542,,542,,,,542,542,,,,542,,542,542,542,542,542,542,542',
',,,,,542,542,542,542,542,542,542,,,542,,,,,,,542,,,542,542,542,542,542',
'542,542,542,542,542,542,542,,542,542,542,542,542,,,,,,,,,,,,,,,,,,,',
'542,,,542,,,542,542,,,542,,542,,542,,542,,,542,,,,,,542,,,,,542,542',
'542,542,,542,542,542,542,,,,,542,542,,,,552,552,552,542,552,542,542',
'542,552,552,542,542,,552,,552,552,552,552,552,552,552,,,,,,552,552,552',
'552,552,552,552,,,552,,,,,,,552,,,552,552,552,552,552,552,552,552,,552',
'552,552,,552,552,552,552,552,,,,,,,,,,,,,,,,,,,,552,,,552,,,552,552',
',,552,,,,,,552,,,,,,,,,552,,,,,552,552,552,552,,552,552,552,552,,,,',
'552,552,,,,555,555,555,552,555,552,552,552,555,555,552,552,,555,,555',
'555,555,555,555,555,555,,,,,,555,555,555,555,555,555,555,,,555,,,,,',
',555,,,555,555,555,555,555,555,555,555,,555,555,555,,555,555,555,555',
'555,,,,,,,,,,,,,,,,,,,,555,,,555,,,555,555,,,555,,,,,,555,,,,,,,,,555',
',,,,555,555,555,555,,555,555,555,555,,,,,555,555,,,,558,558,558,555',
'558,555,555,555,558,558,555,555,,558,,558,558,558,558,558,558,558,,',
',,,558,558,558,558,558,558,558,,,558,,,,,,,558,,,558,558,558,558,558',
'558,558,558,,558,558,558,,558,558,558,558,558,,,,,,,,,,,,,,,,,,,,558',
',,558,,,558,558,,,558,,,,,,558,,,,,,,,,558,,,,,558,558,558,558,,558',
'558,558,558,,,,,558,558,,,,559,559,559,558,559,558,558,558,559,559,558',
'558,,559,,559,559,559,559,559,559,559,,,,,,559,559,559,559,559,559,559',
',,559,,,,,,,559,,,559,559,559,559,559,559,559,559,,559,559,559,,559',
'559,559,559,559,,,,,,,,,,,,,,,,,,,,559,,,559,,,559,559,,,559,,,,,,559',
',,,,,,,,559,,,,,559,559,559,559,,559,559,559,559,,,,,559,559,,,,585',
'585,585,559,585,559,559,559,585,585,559,559,,585,,585,585,585,585,585',
'585,585,,,,,,585,585,585,585,585,585,585,,,585,,,,,,,585,,,585,585,585',
'585,585,585,585,585,,585,585,585,,585,585,585,585,585,,,,,,,,,,,,,,',
',,,,,585,,,585,,,585,585,,,585,,,,,,585,,,,,,,,,585,,,,,585,585,585',
'585,,585,585,585,585,,,,,585,585,,,,599,599,599,585,599,585,585,585',
'599,599,585,585,,599,,599,599,599,599,599,599,599,,,,,,599,599,599,599',
'599,599,599,,,599,,,,,,,599,,,599,599,599,599,599,599,599,599,,599,599',
'599,,599,599,599,599,599,,,,,,,,,,,,,,,,,,,,599,,,599,,,599,599,,,599',
',,,,,599,,,,,,,,,599,,,,,599,599,599,599,,599,599,599,599,,,,,599,599',
',,,605,605,605,599,605,599,599,599,605,605,599,599,,605,,605,605,605',
'605,605,605,605,,,,,,605,605,605,605,605,605,605,,,605,,,,,,,605,,,605',
'605,605,605,605,605,605,605,605,605,605,605,,605,605,605,605,605,,,',
',,,,,,,,,,,,,,,,605,,,605,,,605,605,,,605,,605,,,,605,,,605,,,,,,605',
',,,,605,605,605,605,,605,605,605,605,,,,,605,605,,,,608,608,608,605',
'608,605,605,605,608,608,605,605,,608,,608,608,608,608,608,608,608,,',
',,,608,608,608,608,608,608,608,,,608,,,,,,,608,,,608,608,608,608,608',
'608,608,608,608,608,608,608,,608,608,608,608,608,,,,,,,,,,,,,,,,,,,',
'608,,,608,,,608,608,,,608,,,,,,608,,,608,,,,,,608,,,,,608,608,608,608',
',608,608,608,608,,,,,608,608,,,,621,621,621,608,621,608,608,608,621',
'621,608,608,,621,,621,621,621,621,621,621,621,,,,,,621,621,621,621,621',
'621,621,,,621,,,,,,,621,,,621,621,621,621,621,621,621,621,,621,621,621',
',621,621,621,621,621,,,,,,,,,,,,,,,,,,,,621,,,621,,,621,621,,,621,,621',
',,,621,,,,,,,,,621,,,,,621,621,621,621,,621,621,621,621,,,,,621,621',
',,,622,622,622,621,622,621,621,621,622,622,621,621,,622,,622,622,622',
'622,622,622,622,,,,,,622,622,622,622,622,622,622,,,622,,,,,,,622,,,622',
'622,622,622,622,622,622,622,622,622,622,622,,622,622,622,622,622,,,',
',,,,,,,,,,,,,,,,622,,,622,,,622,622,,,622,,622,,622,,622,,,622,,,,,',
'622,,,,,622,622,622,622,,622,622,622,622,,,,,622,622,,,,632,632,632',
'622,632,622,622,622,632,632,622,622,,632,,632,632,632,632,632,632,632',
',,,,,632,632,632,632,632,632,632,,,632,,,,,,,632,,,632,632,632,632,632',
'632,632,632,632,632,632,632,,632,632,632,632,632,,,,,,,,,,,,,,,,,,,',
'632,,,632,,,632,632,,,632,,632,,632,,632,,,632,,,,,,632,,,,,632,632',
'632,632,,632,632,632,632,,,,,632,632,,,,,,,632,,632,632,632,,,632,632',
'663,663,663,663,663,,,,663,663,,,,663,,663,663,663,663,663,663,663,',
',,,,663,663,663,663,663,663,663,,,663,,,,,,663,663,,663,663,663,663',
'663,663,663,663,663,,663,663,663,,663,663,663,663,663,,,,,,,,,,,,,,',
',,,,,663,,,663,,,663,663,,,663,,663,,,,663,,,,,,,,,663,,,,,663,663,663',
'663,,663,663,663,663,,,,,663,663,,,,665,665,665,663,665,663,663,663',
'665,665,663,663,,665,,665,665,665,665,665,665,665,,,,,,665,665,665,665',
'665,665,665,,,665,,,,,,,665,,,665,665,665,665,665,665,665,665,,665,665',
'665,,665,665,665,665,665,,,,,,,,,,,,,,,,,,,,665,,,665,,,665,665,,,665',
',665,,,,665,,,,,,,,,665,,,,,665,665,665,665,,665,665,665,665,,,,,665',
'665,,,,666,666,666,665,666,665,665,665,666,666,665,665,,666,,666,666',
'666,666,666,666,666,,,,,,666,666,666,666,666,666,666,,,666,,,,,,,666',
',,666,666,666,666,666,666,666,666,,666,666,666,,666,666,666,666,666',
',,,,,,,,,,,,,,,,,,,666,,,666,,,666,666,,,666,,,,,,666,,,,,,,,,666,,',
',,666,666,666,666,,666,666,666,666,,,,,666,666,,,,667,667,667,666,667',
'666,666,666,667,667,666,666,,667,,667,667,667,667,667,667,667,,,,,,667',
'667,667,667,667,667,667,,,667,,,,,,,667,,,667,667,667,667,667,667,667',
'667,667,667,667,667,,667,667,667,667,667,,,,,,,,,,,,,,,,,,,,667,,,667',
',,667,667,,,667,,667,,667,,667,,,667,,,,,,667,,,,,667,667,667,667,,667',
'667,667,667,,,,,667,667,,,,,,,667,,667,667,667,,,667,667,670,670,670',
'670,670,,,,670,670,,,,670,,670,670,670,670,670,670,670,,,,,,670,670',
'670,670,670,670,670,,,670,,,,,,670,670,,670,670,670,670,670,670,670',
'670,670,,670,670,670,,670,670,670,670,670,,,,,,,,,,,,,,,,,,,,670,,,670',
',,670,670,,,670,,670,,,,670,,,,,,,,,670,,,,,670,670,670,670,,670,670',
'670,670,,,,,670,670,,,,671,671,671,670,671,670,670,670,671,671,670,670',
',671,,671,671,671,671,671,671,671,,,,,,671,671,671,671,671,671,671,',
',671,,,,,,,671,,,671,671,671,671,671,671,671,671,,671,671,671,,671,671',
'671,671,671,,,,,,,,,,,,,,,,,,,,671,,,671,,,671,671,,,671,,,,,,671,,',
',,,,,,671,,,,,671,671,671,671,,671,671,671,671,,,,,671,671,,,,674,674',
'674,671,674,671,671,671,674,674,671,671,,674,,674,674,674,674,674,674',
'674,,,,,,674,674,674,674,674,674,674,,,674,,,,,,,674,,,674,674,674,674',
'674,674,674,674,674,674,674,674,,674,674,674,674,674,,,,,,,,,,,,,,,',
',,,,674,,,674,,,674,674,,,674,,674,,674,,674,,,674,,,,,,674,,,,,674',
'674,674,674,,674,674,674,674,,,,,674,674,,,,675,675,675,674,675,674',
'674,674,675,675,674,674,,675,,675,675,675,675,675,675,675,,,,,,675,675',
'675,675,675,675,675,,,675,,,,,,,675,,,675,675,675,675,675,675,675,675',
'675,675,675,675,,675,675,675,675,675,,,,,,,,,,,,,,,,,,,,675,,,675,,',
'675,675,,,675,,,,675,,675,,,675,,,,,,675,,,,,675,675,675,675,,675,675',
'675,675,,,,,675,675,,,,676,676,676,675,676,675,675,675,676,676,675,675',
',676,,676,676,676,676,676,676,676,,,,,,676,676,676,676,676,676,676,',
',676,,,,,,,676,,,676,676,676,676,676,676,676,676,,676,676,676,,676,676',
'676,676,676,,,,,,,,,,,,,,,,,,,,676,,,676,,,676,676,,,676,,,,,,676,,',
',,,,,,676,,,,,676,676,676,676,,676,676,676,676,,,,,676,676,,,,677,677',
'677,676,677,676,676,676,677,677,676,676,,677,,677,677,677,677,677,677',
'677,,,,,,677,677,677,677,677,677,677,,,677,,,,,,,677,,,677,677,677,677',
'677,677,677,677,,677,677,677,,677,677,677,677,677,,,,,,,,,,,,,,,,,,',
',677,,,677,,,677,677,,,677,,,,,,677,,,,,,,,,677,,,,,677,677,677,677',
',677,677,677,677,,,,,677,677,,,,681,681,681,677,681,677,677,677,681',
'681,677,677,,681,,681,681,681,681,681,681,681,,,,,,681,681,681,681,681',
'681,681,,,681,,,,,,,681,,,681,681,681,681,681,681,681,681,,681,681,681',
',681,681,681,681,681,,,,,,,,,,,,,,,,,,,,681,,,681,,,681,681,,,681,,',
',,,681,,,,,,,,,681,,,,,681,681,681,681,,681,681,681,681,,,,,681,681',
',,,682,682,682,681,682,681,681,681,682,682,681,681,,682,,682,682,682',
'682,682,682,682,,,,,,682,682,682,682,682,682,682,,,682,,,,,,,682,,,682',
'682,682,682,682,682,682,682,,682,682,682,,682,682,682,682,682,,,,,,',
',,,,,,,,,,,,,682,,,682,,,682,682,,,682,,,,,,682,,,,,,,,,682,,,,,682',
'682,682,682,,682,682,682,682,,,,,682,682,,,,731,731,731,682,731,682',
'682,682,731,731,682,682,,731,,731,731,731,731,731,731,731,,,,,,731,731',
'731,731,731,731,731,,,731,,,,,,,731,,,731,731,731,731,731,731,731,731',
'731,731,731,731,,731,731,731,731,731,,,,,,,,,,,,,,,,,,,,731,,,731,,',
'731,731,,,731,,731,,731,,731,,,731,,,,,,731,,,,,731,731,731,731,,731',
'731,731,731,,,,,731,731,,,,740,740,740,731,740,731,731,731,740,740,731',
'731,,740,,740,740,740,740,740,740,740,,,,,,740,740,740,740,740,740,740',
',,740,,,,,,,740,,,740,740,740,740,740,740,740,740,,740,740,740,,740',
'740,740,740,740,,,,,,,,,,,,,,,,,,,,740,,,740,,,740,740,,,740,,,,,,740',
',,,,,,,,740,,,,,740,740,740,740,,740,740,740,740,,,,,740,740,,,,743',
'743,743,740,743,740,740,740,743,743,740,740,,743,,743,743,743,743,743',
'743,743,,,,,,743,743,743,743,743,743,743,,,743,,,,,,,743,,,743,743,743',
'743,743,743,743,743,,743,743,743,,743,743,743,743,743,,,,,,,,,,,,,,',
',,,,,743,,,743,,,743,743,,,743,,,,,,743,,,,,,,,,743,,,,,743,743,743',
'743,,743,743,743,743,,,,,743,743,,,,763,763,763,743,763,743,743,743',
'763,763,743,743,,763,,763,763,763,763,763,763,763,,,,,,763,763,763,763',
'763,763,763,,,763,,,,,,,763,,,763,763,763,763,763,763,763,763,,763,763',
'763,,763,763,763,763,763,,,,,,,,,,,,,,,,,,,,763,,,763,,,763,763,,,763',
',763,,,,763,,,,,,,,,763,,,,,763,763,763,763,,763,763,763,763,,,,,763',
'763,,,,777,777,777,763,777,763,763,763,777,777,763,763,,777,,777,777',
'777,777,777,777,777,,,,,,777,777,777,777,777,777,777,,,777,,,,,,,777',
',,777,777,777,777,777,777,777,777,,777,777,777,,777,777,777,777,777',
',,,,,,,,,,,,,,,,,,,777,,,777,,,777,777,,,777,,,,,,777,,,,,,,,,777,,',
',,777,777,777,777,,777,777,777,777,,,,,777,777,,,,822,822,822,777,822',
'777,777,777,822,822,777,777,,822,,822,822,822,822,822,822,822,,,,,,822',
'822,822,822,822,822,822,,,822,,,,,,,822,,,822,822,822,822,822,822,822',
'822,,822,822,822,,822,822,822,822,822,,,,,,,,,,,,,,,,,,,,822,,,822,',
',822,822,,,822,,,,,,822,,,,,,,,,822,,,,,822,822,822,822,,822,822,822',
'822,,,,,822,822,,,,842,842,842,822,842,822,822,822,842,842,822,822,',
'842,,842,842,842,842,842,842,842,,,,,,842,842,842,842,842,842,842,,',
'842,,,,,,,842,,,842,842,842,842,842,842,842,842,,842,842,842,,842,842',
'842,842,842,,,,,,,,,,,,,,,,,,,,842,,,842,,,842,842,,,842,,,,,,842,,',
',,,,,,842,,,,,842,842,842,842,,842,842,842,842,,,,,842,842,,,,850,850',
'850,842,850,842,842,842,850,850,842,842,,850,,850,850,850,850,850,850',
'850,,,,,,850,850,850,850,850,850,850,,,850,,,,,,,850,,,850,850,850,850',
'850,850,850,850,,850,850,850,,850,850,850,850,850,,,,,,,,,,,,,,,,,,',
',850,,,850,,,850,850,,,850,,,,,,850,,,,,,,,,850,,,,,850,850,850,850',
',850,850,850,850,,,,,850,850,,,,863,863,863,850,863,850,850,850,863',
'863,850,850,,863,,863,863,863,863,863,863,863,,,,,,863,863,863,863,863',
'863,863,,,863,,,,,,,863,,,863,863,863,863,863,863,863,863,,863,863,863',
',863,863,863,863,863,,,,,,,,,,,,,,,,,,,,863,,,863,,,863,863,,,863,,',
',,,863,,,,,,,,,863,,,,,863,863,863,863,,863,863,863,863,,,,,863,863',
',,,864,864,864,863,864,863,863,863,864,864,863,863,,864,,864,864,864',
'864,864,864,864,,,,,,864,864,864,864,864,864,864,,,864,,,,,,,864,,,864',
'864,864,864,864,864,864,864,,864,864,864,,864,864,864,864,864,,,,,,',
',,,,,,,,,,,,,864,,,864,,,864,864,,,864,,,,,,864,,,,,,,,,864,,,,,864',
'864,864,864,,864,864,864,864,,,,,864,864,,,,865,865,865,864,865,864',
'864,864,865,865,864,864,,865,,865,865,865,865,865,865,865,,,,,,865,865',
'865,865,865,865,865,,,865,,,,,,,865,,,865,865,865,865,865,865,865,865',
',865,865,865,,865,865,865,865,865,,,,,,,,,,,,,,,,,,,,865,,,865,,,865',
'865,,,865,,,,,,865,,,,,,,,,865,,,,,865,865,865,865,,865,865,865,865',
',,,,865,865,,,,866,866,866,865,866,865,865,865,866,866,865,865,,866',
',866,866,866,866,866,866,866,,,,,,866,866,866,866,866,866,866,,,866',
',,,,,,866,,,866,866,866,866,866,866,866,866,,866,866,866,,866,866,866',
'866,866,,,,,,,,,,,,,,,,,,,,866,,,866,,,866,866,,,866,,,,,,866,,,,,,',
',,866,,,,,866,866,866,866,,866,866,866,866,,,,,866,866,,,,893,893,893',
'866,893,866,866,866,893,893,866,866,,893,,893,893,893,893,893,893,893',
',,,,,893,893,893,893,893,893,893,,,893,,,,,,,893,,,893,893,893,893,893',
'893,893,893,,893,893,893,,893,893,893,893,893,,,,,,,,,,,,,,,,,,,,893',
',,893,,,893,893,,,893,,,,,,893,,,,,,,,,893,,,,,893,893,893,893,,893',
'893,893,893,,,,,893,893,,,,896,896,896,893,896,893,893,893,896,896,893',
'893,,896,,896,896,896,896,896,896,896,,,,,,896,896,896,896,896,896,896',
',,896,,,,,,,896,,,896,896,896,896,896,896,896,896,,896,896,896,,896',
'896,896,896,896,,,,,,,,,,,,,,,,,,,,896,,,896,,,896,896,,,896,,,,,,896',
',,,,,,,,896,,,,,896,896,896,896,,896,896,896,896,,,,,896,896,,,,916',
'916,916,896,916,896,896,896,916,916,896,896,,916,,916,916,916,916,916',
'916,916,,,,,,916,916,916,916,916,916,916,,,916,,,,,,,916,,,916,916,916',
'916,916,916,916,916,,916,916,916,,916,916,916,916,916,,,,,,,,,,,,,,',
',,,,,916,,,916,,,916,916,,,916,,,,,,916,,,,,,,,,916,,,,,916,916,916',
'916,,916,916,916,916,,,,,916,916,,,,944,944,944,916,944,916,916,916',
'944,944,916,916,,944,,944,944,944,944,944,944,944,,,,,,944,944,944,944',
'944,944,944,,,944,,,,,,,944,,,944,944,944,944,944,944,944,944,,944,944',
'944,,944,944,944,944,944,,,,,,,,,,,,,,,,,,,,944,,,944,,,944,944,,,944',
',,,,,944,,,,,,,,,944,,,,,944,944,944,944,,944,944,944,944,,,,,944,944',
',,,948,948,948,944,948,944,944,944,948,948,944,944,,948,,948,948,948',
'948,948,948,948,,,,,,948,948,948,948,948,948,948,,,948,,,,,,,948,,,948',
'948,948,948,948,948,948,948,,948,948,948,,948,948,948,948,948,,,,,,',
',,,,,,,,,,,,,948,,,948,,,948,948,,,948,,,,,,948,,,,,,,,,948,,,,,948',
'948,948,948,,948,948,948,948,,,,,948,948,,,,953,953,953,948,953,948',
'948,948,953,953,948,948,,953,,953,953,953,953,953,953,953,,,,,,953,953',
'953,953,953,953,953,,,953,,,,,,,953,,,953,953,953,953,953,953,953,953',
',953,953,953,,953,953,953,953,953,,,,,,,,,,,,,,,,,,,,953,,,953,,,953',
'953,,,953,,953,,,,953,,,,,,,,,953,,,,,953,953,953,953,,953,953,953,953',
',,,,953,953,,,,972,972,972,953,972,953,953,953,972,972,953,953,,972',
',972,972,972,972,972,972,972,,,,,,972,972,972,972,972,972,972,,,972',
',,,,,,972,,,972,972,972,972,972,972,972,972,972,972,972,972,,972,972',
'972,972,972,,,,,,,,,,,,,,,,,,,,972,,,972,,,972,972,,,972,,,,972,,972',
',,972,,,,,,972,,,,,972,972,972,972,,972,972,972,972,,,,,972,972,,,,973',
'973,973,972,973,972,972,972,973,973,972,972,,973,,973,973,973,973,973',
'973,973,,,,,,973,973,973,973,973,973,973,,,973,,,,,,,973,,,973,973,973',
'973,973,973,973,973,,973,973,973,,973,973,973,973,973,,,,,,,,,,,,,,',
',,,,,973,,,973,,,973,973,,,973,,,,,,973,,,,,,,,,973,,,,,973,973,973',
'973,,973,973,973,973,,,,,973,973,,,,1123,1123,1123,973,1123,973,973',
'973,1123,1123,973,973,,1123,,1123,1123,1123,1123,1123,1123,1123,,,,',
',1123,1123,1123,1123,1123,1123,1123,,,1123,,,,,,,1123,,,1123,1123,1123',
'1123,1123,1123,1123,1123,,1123,1123,1123,,1123,1123,1123,1123,1123,',
',,,,,,,,,,,,,,,,,,1123,,,1123,,,1123,1123,,,1123,,,,,,1123,,,,,,,,,1123',
',,,,1123,1123,1123,1123,,1123,1123,1123,1123,,,,,1123,1123,,,,1124,1124',
'1124,1123,1124,1123,1123,1123,1124,1124,1123,1123,,1124,,1124,1124,1124',
'1124,1124,1124,1124,,,,,,1124,1124,1124,1124,1124,1124,1124,,,1124,',
',,,,,1124,,,1124,1124,1124,1124,1124,1124,1124,1124,,1124,1124,1124',
',1124,1124,1124,1124,1124,,,,,,,,,,,,,,,,,,,,1124,,,1124,,,1124,1124',
',,1124,,,,,,1124,,,,,,,,,1124,,,,,1124,1124,1124,1124,,1124,1124,1124',
'1124,,,,,1124,1124,,,,1156,1156,1156,1124,1156,1124,1124,1124,1156,1156',
'1124,1124,,1156,,1156,1156,1156,1156,1156,1156,1156,,,,,,1156,1156,1156',
'1156,1156,1156,1156,,,1156,,,,,,,1156,,,1156,1156,1156,1156,1156,1156',
'1156,1156,1156,1156,1156,1156,,1156,1156,1156,1156,1156,,,,,,,,,,,,',
',,,,,,,1156,,,1156,,,1156,1156,,,1156,,1156,,1156,,1156,,,1156,,,,,',
'1156,,,,,1156,1156,1156,1156,,1156,1156,1156,1156,,,,,1156,1156,,,,347',
'347,347,1156,347,1156,1156,1156,347,347,1156,1156,,347,,347,347,347',
'347,347,347,347,,,,,,347,347,347,347,347,347,347,,,347,,,,,,,347,,,347',
'347,347,347,347,347,347,347,,347,347,347,,347,347,,,347,,,,,,,,,,,,',
',,,,,,,347,,,347,,,347,347,,,347,,,,,,,,,,,,,,,,,,,,347,347,347,347',
',347,347,347,347,,,,,347,347,,,,1033,1033,1033,347,1033,347,347,347',
'1033,1033,,,,1033,,1033,1033,1033,1033,1033,1033,1033,,,,,,1033,1033',
'1033,1033,1033,1033,1033,,,1033,,,,,,,1033,,,1033,1033,1033,1033,1033',
'1033,1033,1033,,1033,1033,1033,,1033,1033,,,1033,,,,,,,,,,,,,,,,,,,',
'1033,,,1033,,,1033,1033,,,1033,,,,,,,,,,,,,,,,,,,,1033,1033,1033,1033',
',1033,1033,1033,1033,,,,,1033,1033,,,,549,549,549,1033,549,1033,1033',
'1033,549,549,,,,549,,549,549,549,549,549,549,549,,,,,,549,549,549,549',
'549,549,549,,,549,,,,,,,549,,,549,549,549,549,549,549,549,549,,549,549',
'549,,549,549,,,549,,,,,,,,,,,,,,,,,,,,549,,,549,,,549,549,,,549,,,,',
',,,,,,,,,,,,,,,549,549,549,549,,549,549,549,549,,,,,549,549,,,,1023',
'1023,1023,549,1023,549,549,549,1023,1023,,,,1023,,1023,1023,1023,1023',
'1023,1023,1023,,,,,,1023,1023,1023,1023,1023,1023,1023,,,1023,,,,,,',
'1023,,,1023,1023,1023,1023,1023,1023,1023,1023,,1023,1023,1023,,1023',
'1023,,,1023,,,,,,,,,,,,,,,,,,,,1023,,,1023,,,1023,1023,,,1023,,,,,,',
',,,,,,,,,,,,,1023,1023,1023,1023,,1023,1023,1023,1023,,,,,1023,1023',
',,,76,76,76,1023,76,1023,1023,1023,76,76,,,,76,,76,76,76,76,76,76,76',
',,,,,76,76,76,76,76,76,76,,,76,,,,,,,76,,,76,76,76,76,76,76,76,76,,76',
'76,76,,76,76,,,76,,,,,,,,,,,,,,,,,,,,76,,,76,,,76,76,,,76,,76,,,,,,',
',,,,,,,,,,,76,76,76,76,,76,76,76,76,,,,,76,76,,,,77,77,77,76,77,76,76',
'76,77,77,,,,77,,77,77,77,77,77,77,77,,,,,,77,77,77,77,77,77,77,,,77',
',,,,,,77,,,77,77,77,77,77,77,77,77,,77,77,77,,77,77,,,77,,,,,,,,,,,',
',,,,,77,,,77,,,77,,,77,77,,,77,,,,,,,,,,,,,,,,,,,,77,77,77,77,,77,77',
'77,77,,,,,77,77,,,,78,78,78,77,78,77,77,77,78,78,,,,78,,78,78,78,78',
'78,78,78,,,,,,78,78,78,78,78,78,78,,,78,,,,,,,78,,,78,78,78,78,78,78',
'78,78,,78,78,78,,78,78,,,78,,,,,,,,,,,,,,,,,,,,78,,,78,,,78,78,,,78',
',,,,,,,,,,,,,,,,,,,78,78,78,78,,78,78,78,78,,,,,78,78,,,,1104,1104,1104',
'78,1104,78,78,78,1104,1104,,,,1104,,1104,1104,1104,1104,1104,1104,1104',
',,,,,1104,1104,1104,1104,1104,1104,1104,,,1104,,,,,,,1104,,,1104,1104',
'1104,1104,1104,1104,1104,1104,,1104,1104,1104,,1104,1104,,,1104,,,,',
',,,,,,,,,,,,,,,1104,,,1104,,,1104,1104,,,1104,,,,,,,,,,,,,,,,,,,,1104',
'1104,1104,1104,,1104,1104,1104,1104,,,,,1104,1104,,,,37,37,37,1104,37',
'1104,1104,1104,37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37',
'37,37,,,37,,,,,,,37,,,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,37',
',,,,,,,,,,,,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,,37,37,37',
'37,,37,37,37,37,,,,,37,37,,,,328,328,328,37,328,37,37,37,328,328,,,',
'328,,328,328,328,328,328,328,328,,,,,,328,328,328,328,328,328,328,,',
'328,,,,,,,328,,,328,328,328,328,328,328,328,328,,328,328,328,,328,328',
',,328,,,,,,,,,,,,,,,,,,,,328,,,328,,,328,328,,,328,,,1043,,1043,1043',
'1043,1043,1043,,,,,,,,,1043,,328,328,328,328,,328,328,328,328,,,,,328',
'328,,,,328,,1043,328,,328,328,328,746,746,746,,746,1043,1043,,746,746',
'1043,,,746,,746,746,746,746,746,746,746,,,,,,746,746,746,746,746,746',
'746,,,746,,,,,,,746,,,746,746,746,746,746,746,746,746,,746,746,746,',
'746,746,,,746,,,,,,,,,,,,,,,,,,,,746,,,746,,,746,746,,,746,,,,,,,,,',
',,,,,,,,,,746,746,746,746,,746,746,746,746,,,,,746,746,,,,757,757,757',
'746,757,746,746,746,757,757,,,,757,,757,757,757,757,757,757,757,,,,',
',757,757,757,757,757,757,757,,,757,,,,,,,757,,,757,757,757,757,757,757',
'757,757,,757,757,757,,757,757,,,757,,,,,,,,,,,,,,,,,,,,757,,,757,,,757',
'757,,,757,,,,,,,,,,,,,,,,,,,,757,757,757,757,,757,757,757,757,,,,,757',
'757,,,,38,38,38,757,38,757,757,757,38,38,,,,38,,38,38,38,38,38,38,38',
',,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38',
'38,38,,38,38,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,,38,,,1185,,1185',
'1185,1185,1185,1185,,,,,,,,,1185,,38,38,38,38,,38,38,38,38,,,,,38,38',
',,,38,,1185,38,,38,38,38,540,540,540,,540,1185,1185,,540,540,1185,,',
'540,,540,540,540,540,540,540,540,,,,,,540,540,540,540,540,540,540,,',
'540,,,,,,,540,,,540,540,540,540,540,540,540,540,,540,540,540,,540,540',
',,540,,,,,,,,,,,,,,,,,,,,540,,,540,,,540,540,,,540,,,,,,,,,,,,,,,,,',
',,540,540,540,540,,540,540,540,540,,,,,540,540,,,,,,,540,,540,540,540',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,,,,11,11,11,11,11,11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11',
',,11,,,,,,,,11,11,,11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,',
',,,,,,,,11,11,,11,11,11,11,11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,',
',,,,11,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422',
'422,422,422,422,422,422,422,422,,,,422,422,422,422,422,422,422,422,422',
'422,,,,,,422,422,422,422,422,422,422,422,422,,,422,,,,,,,,422,422,,422',
'422,422,422,422,422,422,,,422,422,,,,422,422,422,422,,,,,,,,,,,,,,422',
'422,,422,422,422,422,422,422,422,422,422,422,422,422,,,422,422,,,,,',
',,,,,,,,422,661,661,661,661,661,661,661,661,661,661,661,661,661,661',
'661,661,661,661,661,661,661,661,661,661,,,,661,661,661,661,661,661,661',
'661,661,661,,,,,,661,661,661,661,661,661,661,661,661,,,661,,,,,,,,661',
'661,,661,661,661,661,661,661,661,,,661,661,,,,661,661,661,661,,,,,,',
',,,,,,,661,661,,661,661,661,661,661,661,661,661,661,661,661,661,,,661',
'661,,,,,,,,,,,,,,661,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10',
'10,10,10,10,10,10,10,10,,,,10,10,10,10,10,10,10,10,10,10,,,,,,10,10',
'10,10,10,10,10,10,10,10,,10,,,,,,,,10,10,,10,10,10,10,10,10,10,,,10',
'10,,,,10,10,10,10,,,,,,,,,,,,,,10,10,,10,10,10,10,10,10,10,10,10,10',
'10,10,,,10,10,869,869,869,869,,,,,,,,,,10,,,869,869,869,869,,,1036,869',
'1036,1036,1036,1036,1036,869,869,,,869,,,,1036,,,,,,,,,,,,,,,,869,,',
'869,,,1036,869,,,869,,,,,1036,1036,1036,1036,,,,1036,,,,869,,,,869,869',
'869,869,,869,869,869,869,,,,,869,869,1139,1139,1139,1139,,,869,,869',
'869,869,,,869,869,,1139,1139,1139,1139,,,1160,1139,1160,1160,1160,1160',
'1160,1139,1139,,,1139,,,,1160,,,,,,,,,,,,,,,,1139,,,1139,,,1160,1139',
',,1139,,,,,,,1160,1160,,,,1160,,,,1139,,,,1139,1139,1139,1139,,1139',
'1139,1139,1139,,,,,1139,1139,1141,1141,1141,1141,,,1139,,1139,1139,1139',
',,1139,1139,,1141,1141,1141,1141,,,1041,1141,1041,1041,1041,1041,1041',
'1141,1141,,,1141,,,,1041,,,,,,,,,,,,,,,,1141,,,1141,,,1041,1141,,,1141',
',1141,,,,,1041,1041,,,,1041,,,,1141,,,,1141,1141,1141,1141,,1141,1141',
'1141,1141,,,,,1141,1141,952,952,952,952,,,1141,,1141,1141,1141,,,1141',
'1141,,952,952,952,952,,,,952,952,,,,,952,952,,,952,952,,,,,,,,,,,,,',
',,,,,952,,,952,,,,952,,,952,,952,,,,,,,952,,,,,,,952,,,,952,952,952',
'952,,952,952,952,952,,,,,952,952,1201,1201,1201,1201,,,952,,952,952',
'952,,,952,952,,1201,1201,1201,1201,,,773,1201,773,773,773,773,773,1201',
'1201,,,1201,,,,773,,,,,,,,,,,,,,,,1201,,,1201,,,773,1201,,,1201,,,,',
'773,773,773,773,,,,773,,,,1201,,,,1201,1201,1201,1201,,1201,1201,1201',
'1201,,,,,1201,1201,887,887,887,887,,,1201,,1201,1201,1201,,,1201,1201',
',887,887,887,887,,,364,887,364,364,364,364,364,887,887,,,887,,,,364',
',,,,,,,,,,,,,,,887,,,887,,,364,887,,,887,,,,,364,364,364,364,,,,364',
',,,887,,,,887,887,887,887,,887,887,887,887,,,,,887,887,879,879,879,879',
',,887,,887,887,887,,,887,887,,879,879,879,879,,,1095,879,1095,1095,1095',
'1095,1095,879,879,,,879,,,,1095,,,,,,,,,,,,,,,,879,,,879,,,1095,879',
',,879,,879,,,1095,1095,1095,1095,,,,1095,,,,879,,,,879,879,879,879,',
'879,879,879,879,,,,,879,879,873,873,873,873,,,879,,879,879,879,,,879',
'879,,873,873,873,873,,,,873,873,,,,,873,873,,,873,873,,,,,,,,,,,,,,',
',,,,873,,,873,,,,873,,,873,,873,,,,,,,873,,,,,,,873,,,,873,873,873,873',
',873,873,873,873,,,,,873,873,872,872,872,872,,,873,,873,873,873,,,873',
'873,,872,872,872,872,,,,872,872,,,,,872,872,,,872,872,,,,,,,,,,,,,,',
',,,,872,,,872,,,,872,,,872,,872,,,,,,,872,,,,,,,872,,,,872,872,872,872',
',872,872,872,872,,,,,872,872,,,,,,,872,,872,872,872,,,872,872,24,24',
'24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,,',
',24,24,24,24,24,24,24,24,24,24,,,,,,24,24,24,24,24,24,24,24,24,24,24',
'24,,24,,,,,,24,24,,24,24,24,24,24,24,24,,,24,24,,,,24,24,24,24,,,,,',
'24,,,,,,,,24,24,,24,24,24,24,24,24,24,24,24,24,24,24,,,24,1084,1084',
'1084,1084,,,,,,,,,,,,,1084,1084,1084,1084,,,1098,1084,1098,1098,1098',
'1098,1098,1084,1084,,,1084,,,,1098,,,,,,,,,,,,,,,,1084,,,1084,,,1098',
'1084,,,1084,,,,,1098,1098,1098,1098,,,,1098,,,,1084,,,,1084,1084,1084',
'1084,,1084,1084,1084,1084,,,,,1084,1084,1177,1177,1177,1177,,,1084,',
'1084,1084,1084,,,1084,1084,,1177,1177,1177,1177,,,1100,1177,1100,1100',
'1100,1100,1100,1177,1177,,,1177,,,,1100,,,,,,,,,,,,,,,,1177,,,1177,',
',1100,1177,,,1177,,,,,,,1100,1100,,,,1100,,,,1177,,,,1177,1177,1177',
'1177,,1177,1177,1177,1177,,,,,1177,1177,,,,,,,1177,,1177,1177,1177,',
',1177,1177,723,723,723,723,723,723,723,723,723,723,723,723,723,723,723',
'723,723,723,723,723,723,723,723,723,,,,723,723,723,723,723,723,723,723',
'723,723,,,,,,723,723,723,723,723,723,723,723,723,,,723,,,,,,,,723,723',
',723,723,723,723,723,723,723,,,723,723,,,,723,723,723,723,,,,,,,,,,',
',,,723,723,,723,723,723,723,723,723,723,723,723,723,723,723,,,723,699',
'699,699,699,,,,,,,,,,,,,699,699,699,699,,,791,699,791,791,791,791,791',
'699,699,,,699,,,,791,,,,,,,,,,,,,,,,699,,,699,,,791,699,,,699,,699,',
',791,791,791,791,,,,791,,,,699,,,,699,699,699,699,,699,699,699,699,',
',,,699,699,699,1125,1125,1125,1125,,699,,699,699,699,,,699,699,,,1125',
'1125,1125,1125,,,1213,1125,1213,1213,1213,1213,1213,1125,1125,,,1125',
',,,1213,,,,,,,,,,,,,,,,1125,,,1125,,,1213,1125,,,1125,,1125,,,,,1213',
'1213,,,,1213,,,,1125,,,,1125,1125,1125,1125,,1125,1125,1125,1125,,,',
',1125,1125,479,479,479,479,,,1125,,1125,1125,1125,,,1125,1125,,479,479',
'479,479,,,1187,479,1187,1187,1187,1187,1187,479,479,,,479,,,,1187,,',
',,,,,,,,,,,,,479,,,479,,,1187,479,,,479,,,,,,,1187,1187,,,,1187,,,,479',
',,,479,479,479,479,,479,479,479,479,,,,,479,479,480,480,480,480,,,479',
',479,479,479,,,479,479,,480,480,480,480,,,775,480,775,775,775,775,775',
'480,480,,,480,,,,775,,,,,,,,,,,,,,,,480,,,480,,,775,480,,,480,,,,,,',
'775,775,,,,775,,,,480,,,,480,480,480,480,,480,480,480,480,,,,,480,480',
'1000,1000,1000,1000,,,480,,480,480,480,,,480,480,,1000,1000,1000,1000',
',,1038,1000,1038,1038,1038,1038,1038,1000,1000,,,1000,,,,1038,,,,,,',
',,,,,,,,,1000,,,1000,,,1038,1000,,,1000,,,,,,,1038,1038,,,,1038,,,,1000',
',,,1000,1000,1000,1000,,1000,1000,1000,1000,,,,,1000,1000,984,984,984',
'984,,,1000,,1000,1000,1000,,,1000,1000,,984,984,984,984,,,,984,,,,,',
'984,984,,,984,,,,,,,,888,888,888,888,,,,,,,,,984,,,984,888,888,888,984',
',,984,,,,,,,888,888,,,888,,,,,984,,,,984,984,984,984,,984,984,984,984',
',,,,984,984,,,,,,,984,,984,984,984,,,984,984,404,,404,404,404,404,404',
',,,,888,888,888,888,404,888,888,888,888,,,,,888,888,889,889,889,889',
',,888,,888,888,888,404,404,,,,889,889,889,,404,404,404,404,,,,404,,889',
'889,,,889,706,706,706,706,,,,,,,,,,,,,706,706,706,,,,,,,,,,,706,706',
',,706,,,,,,,,,,,,,,,,889,889,889,889,,889,889,889,889,,,,,889,889,,',
',,,,889,,889,889,889,,,,,,,,,706,706,706,706,,706,706,706,706,,,,,706',
'706,1158,1158,,,1158,,706,,706,706,706,,1158,1158,,1158,1158,1158,1158',
'1158,1158,1158,,,1158,1158,,,,1158,1158,1158,1158,,,,,,1158,,,,,,,,1158',
'1158,,1158,1158,1158,1158,1158,1158,1158,1158,1158,1158,1158,1158,472',
'472,1158,,472,,,,,,,,472,472,,472,472,472,472,472,472,472,,,472,472',
',,,472,472,472,472,,,,,,472,,,,,,,,472,472,,472,472,472,472,472,472',
'472,472,472,472,472,472,473,473,472,,473,,,,,,,,473,473,,473,473,473',
'473,473,473,473,,,473,473,,,,473,473,473,473,,,,,,473,,,,,,,,473,473',
',473,473,473,473,473,473,473,473,473,473,473,473,289,289,473,,289,,',
',,,,,289,289,,289,289,289,289,289,289,289,,,289,289,,,,289,289,289,289',
',,,,,,,,,,,,,289,289,,289,289,289,289,289,289,289,289,289,289,289,289',
'543,543,289,,543,,,,,,,,543,543,,543,543,543,543,543,543,543,,,543,543',
',,,543,543,543,543,,,,,,543,,,,,,,,543,543,,543,543,543,543,543,543',
'543,543,543,543,543,543,544,544,543,,544,,,,,,,,544,544,,544,544,544',
'544,544,544,544,,,544,544,,,,544,544,544,544,,,,,,544,,,,,,,,544,544',
',544,544,544,544,544,544,544,544,544,544,544,544,553,553,544,,553,,',
',,,,,553,553,,553,553,553,553,553,553,553,,,553,553,,,,553,553,553,553',
',,,,,553,,,,,,,,553,553,,553,553,553,553,553,553,553,553,553,553,553',
'553,554,554,553,,554,,,,,,,,554,554,,554,554,554,554,554,554,554,,,554',
'554,,,,554,554,554,554,,,,,,554,,,,,,,,554,554,,554,554,554,554,554',
'554,554,554,554,554,554,554,223,223,554,,223,,,,,,,,223,223,,223,223',
'223,223,223,223,223,,,223,223,,,,223,223,223,223,,,,,,223,,,,,,,,223',
'223,,223,223,223,223,223,223,223,223,223,223,223,223,222,222,223,,222',
',,,,,,,222,222,,222,222,222,222,222,222,222,,,222,222,,,,222,222,222',
'222,,,,,,222,,,,,,,,222,222,,222,222,222,222,222,222,222,222,222,222',
'222,222,623,623,222,,623,,,,,,,,623,623,,623,623,623,623,623,623,623',
',,623,623,,,,623,623,623,623,,,,,,623,,,,,,,,623,623,,623,623,623,623',
'623,623,623,623,623,623,623,623,624,624,623,,624,,,,,,,,624,624,,624',
'624,624,624,624,624,624,,,624,624,,,,624,624,624,624,,,,,,624,,,,,,',
',624,624,,624,624,624,624,624,624,624,624,624,624,624,624,630,630,624',
',630,,,,,,,,630,630,,630,630,630,630,630,630,630,,,630,630,,,,630,630',
'630,630,,,,,,630,,,,,,,,630,630,,630,630,630,630,630,630,630,630,630',
'630,630,630,631,631,630,,631,,,,,,,,631,631,,631,631,631,631,631,631',
'631,,,631,631,,,,631,631,631,631,,,,,,631,,,,,,,,631,631,,631,631,631',
'631,631,631,631,631,631,631,631,631,1153,1153,631,,1153,,,,,,,,1153',
'1153,,1153,1153,1153,1153,1153,1153,1153,,,1153,1153,,,,1153,1153,1153',
'1153,,,,,,1153,,,,,,,,1153,1153,,1153,1153,1153,1153,1153,1153,1153',
'1153,1153,1153,1153,1153,1157,1157,1153,,1157,,,,,,,,1157,1157,,1157',
'1157,1157,1157,1157,1157,1157,,,1157,1157,,,,1157,1157,1157,1157,,,',
',,1157,,,,,,,,1157,1157,,1157,1157,1157,1157,1157,1157,1157,1157,1157',
'1157,1157,1157,668,668,1157,,668,,,,,,,,668,668,,668,668,668,668,668',
'668,668,,,668,668,,,,668,668,668,668,,,,,,668,,,,,,,,668,668,,668,668',
'668,668,668,668,668,668,668,668,668,668,669,669,668,,669,,,,,,,,669',
'669,,669,669,669,669,669,669,669,,,669,669,,,,669,669,669,669,,,,,,669',
',,,,,,,669,669,,669,669,669,669,669,669,669,669,669,669,669,669,,,669' ]
        racc_action_check = arr = ::Array.new(28136, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,   260,  2415,  1487,   nil,   649,   nil,  5281,  1104,  1085,
 24823, 24439,   937,   nil,   774,   749,   659,   694,   875,   354,
   nil,   -72,  5412,  1407, 25834,  1406,   nil,   308,   nil,   170,
  5553,  5663,  5797,  5928,  6059,   nil,  2991, 23629, 24161,   nil,
  1287,   330,   638,  1003,  6190,  6321,   167,  6452,  6583,   590,
  6714,  1227,   -83,    12,  1108,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  6855,   nil,  6996,  7127,  7258,     4,
   nil,  7389,  7520,   nil,   nil,  7651, 23105, 23236, 23367,   nil,
   nil,   nil,   nil,   nil,   nil,   637,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   469,   nil,   nil,   110,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  7794,   nil,   nil,   nil,   nil,  7937,  8068,  8199,  8330,
  8473,   nil,  1983,   nil,   782,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   929,   nil,  1407,  8604,  8735,  8866,  8997,
  9128,  9259, 27533, 27472,   nil,   nil,  9390,  9521,  9652,   nil,
   nil,  1112,   468,   434,  1044,   362,   957,  1019,   nil,  9783,
   975,  1037,   nil,   nil,  9914, 10045, 10176, 10307, 10438, 10569,
 10700, 10831, 10962, 11093, 11224, 11355, 11486, 11617, 11748, 11879,
 12010, 12141, 12272, 12403, 12534, 12665,   nil,   nil,   nil,   nil,
 12796,   nil,   nil,   601,   562,   560,   559,   473,   450,   449,
   444,   407,   337,   nil,   nil,   nil, 12927,   nil,   nil, 27167,
   nil,   nil,  1147, 13058, 13189,   nil,   nil,   nil,   nil,   nil,
   nil,   nil, 13320,   nil,  2271,   nil,  1118,  1120,   nil, 13451,
  1173, 13582,   nil,   nil, 13713, 13844,   nil,   nil,   468,   nil,
 13987,   960,  1164,  1132,  5007,  1175,  1229,  1190, 23760,  4863,
   626,   622,   964,  1289,   658,   nil,  1256,  1219,   182,  1263,
  1264,   nil,   nil,   nil,  1267,   163,  1235, 22581,   nil,   164,
   802,  4719,  4863,  1304,   nil,   238, 14118,   nil, 14249,  1224,
  4719,  1205,   nil,   827, 25400,  1126,  4431,  3855,  1407,  1076,
   nil,   592,   539,  1094,   994,   440,   994,   nil,   822,    34,
    35, 14380,  3567,  3423,   145,   998,   877,    41,    39,   991,
   893,    -4,   886,   nil,   nil,  1110,  1254,   561,   nil,   968,
   nil,   698, 14511,   nil, 26826,   nil,   188,   219,   239,   459,
   398,   -45,   -41,   508,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   367, 24567,   nil,   nil,   nil,   nil,   304,   nil,  1498,
  1404, 14642,  1399,   nil,   nil,  1386,   nil,   589,   353,  1478,
   nil,   nil,  1551,   nil,   nil,   nil,   nil,   nil,  1695,  1390,
   nil,  1378,  1367,   148,   385, 14783,   nil,   nil,   nil,   359,
   249,  1327,   nil,   nil, 14915, 15051,   nil,   nil,   nil,   -33,
   nil,  1299, 27045, 27106, 15188,   -51, 15319, 15450,  5138, 26438,
 26536,  4575,  4431,  1014,   321,   614,   655,   746,  1159,  5138,
  5281,  5412,  4143,  3999,  3855,  5007,  3135,  3279,  1269,  3110,
  3423,  3567,  2127,  3711,   nil,   199,   nil, 15591,   nil,   nil,
   nil,   nil, 15721,  1211,  1207,  1209,   nil,   nil,   nil,  1199,
   nil,   nil, 15852,   nil, 15983,   nil, 16114,   nil,   501,   nil,
   nil,   nil, 16257,  1248,   nil,  1119,  1113,   nil,   nil,  1112,
 24300,  1108, 16400, 27228, 27289,   889,  1144,   nil,   nil, 22843,
  1099,   nil, 16531, 27350, 27411, 16662,  4287,  2559, 16793, 16924,
  1206,  1203,   nil,   nil,  1068,  1057,  1045,   999,   998,   nil,
   995,   994,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   964,  1105,   nil,   nil, 17055,   nil,   nil,   nil,   250,
   nil,   nil,   nil,  1043,   nil,   nil,  1038,  -102,   946, 17186,
  1055,  1037,   888,   874,   nil, 17317,   nil,   nil, 17448,   nil,
   nil,   nil,  3279,   725,   nil,  3135,    25,   661,   578,   175,
   522, 17579, 17710, 27594, 27655,     8,   nil,   nil,   692,   nil,
 27716, 27777, 17841,   nil,   nil,   165,  2127,   nil, 15591,   nil,
   nil,   nil,   nil,  1029,   nil,   nil,   nil,   369,   nil,   nil,
   506,   nil,   504,   nil,   nil,   142,   nil,   135,   nil,   nil,
   nil, 24695,   nil, 17984,  1400, 18115, 18246, 18377, 27960, 28021,
 18520, 18651,   605,  1403, 18782, 18913, 19044, 19175,  1371,   nil,
   nil, 19306, 19437,  1347,   nil,   nil,   nil,   302,   201,   720,
   581,  1291,  1313,   nil,  1289,   nil,   nil,   nil,   688, 26241,
   290,   nil,   785,   nil,   nil,  6855, 26905,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -29,     1,
   nil,  1290,  1250, 26158,   nil,  1378,   nil,  1361,   -13,   nil,
   nil, 19568,   nil,  1277,  1284,  1385,   nil,  1262,   nil,  1310,
 19699,   nil,   nil, 19830,   nil,   163, 23899,  1272,   nil,  1284,
   244,   260,  1330,   384,   958,  1334,  1299, 24030,   nil,  1368,
    18,  1839,  1430, 19961,   nil,   nil,   356,   nil,   nil,   884,
   nil,   nil,   211, 25302,   nil, 26539,   nil, 20092,   nil,  1249,
   nil,  1358,  1360,  1279,  1366,   nil,   nil,   nil,   nil,   nil,
   nil, 26244,  1983,   nil,   nil,   nil,   nil,   248,   795,   nil,
  1487,   nil,   nil,   nil,   nil,   nil,  1494,  1497,   nil,   nil,
   131,  1389,   -19,    40,    -1,     7,  1839,   966,   616,   nil,
  1404,  1695, 20223,   nil,  1531,    21,   -77,   nil,   nil,   nil,
   nil,   nil,  1263,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -38, 20354,    90,   192,   125,   830,     0,   nil,  2415,
 20485,   nil,   264,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil, 20616, 20747, 20878, 21009,   -56,   451, 24907,
   100,   137, 25691, 25593,   590,   -53,   428,   430,   nil, 25495,
   nil,   477,   486,   584,   651,   nil,   563, 25397, 26773, 26871,
   nil,   nil,   nil, 21140,   nil,   nil, 21271,   nil,   nil,   632,
   nil,   nil,   639,   636,   nil,   nil, 15555,  1119,   nil,   nil,
   nil,   nil,   649,   208,   nil,   nil, 21402,   807,   nil,  4575,
   684,   732,   nil,   nil,   691,   nil,   691,   703,   nil,   709,
   nil,   794,   nil,   715,   723,   nil,   727,   nil,   nil,   738,
  1173,  3265,   nil,   nil, 21533,   nil,   867,   nil, 21664,   881,
   nil,   nil, 25201, 21795,  4287,    26,   902,   nil,   909,   619,
  4143,   nil,   nil,   nil,   nil,   786,   839,   807,   809,   -85,
   nil,   nil, 21926, 22057,   nil,   nil,   nil,   nil,   819,   824,
   825,   823,   nil,   nil, 26732,   nil,   nil,   297,   nil,   nil,
   839,   840,   844,   nil,   nil,   nil,   900,   856,   -41,   nil,
 26634,   nil,   885,   nil,   nil,   -69,   nil,   nil,   954,  2847,
  3999,   nil,   nil,   920,   921,   nil,   923,   932,   936,   nil,
   962,   943,   929, 22974,   nil,   nil,   nil,  2991,   nil,  3711,
   nil,   nil,    33, 22712,   nil,   nil, 24910,   nil, 26637,   nil,
   nil, 25106,   nil, 23807,   nil,   nil,   nil,   nil,  1022,  1028,
  2703,   nil,    32,   nil,    26,   -13,   -76,   nil,   nil,   nil,
   nil,   390,   nil,   nil,   nil,  1182,  2847,  2703,  1164,   nil,
   nil,   nil,   nil,   nil,   745,  1113,   245,   nil,   nil,   nil,
   nil,   nil,   nil,  1075, 25917,  1076,   nil,   nil,   391,   nil,
   nil,   nil,   674,   nil,   nil, 25498,   nil,   nil, 25920,   nil,
 26018,   nil,   nil,  1147, 23498,   869,  1220,   nil,  2559,   -10,
     9,  1102,   715,   103,   nil,  1302,  1282,  1271,  1243,   834,
  3215,  2271,   nil, 22188, 22319, 26340,   nil,   nil,   nil,   nil,
  1186,  1263,   285,   nil,   nil,   nil,   nil,   nil,   nil, 25005,
  1098, 25103,  1090,   nil,   nil,   968,   944,   812,   741,   nil,
   392,   nil,   874, 27838,   nil,   219, 22450, 27899, 26984,   142,
 25008,   nil,   nil,   nil,   nil,  1355,   240,  1551,   nil,   nil,
   nil,  1351,   nil,   nil,   nil,  1308,  1330, 26015,   nil,   nil,
   nil, 15610,   nil, 14846,   nil, 24208,   nil, 26441,   nil,   nil,
  1450,    86,   nil,   210,    92,    79,   116,   109,   606,   nil,
   489, 25299,   nil,   742,   744,   759,   814,    36,   nil,   nil,
   nil,   nil,  1209, 26343,   nil,   nil,   nil,   nil,  1393,   nil ]

racc_action_default = [
    -1,  -728,    -4,  -728,    -2,  -713,    -5,  -728,    -8,  -728,
  -728,  -728,  -728,   -31,  -728,  -728,   -36,  -728,  -728,  -305,
   -48,  -715,  -728,   -57,  -728,   -65,   -66,   -67,   -71,  -282,
  -282,  -282,  -318,  -345,  -346,   -83,   -13,   -87,   -95,   -97,
  -728,  -610,  -611,  -728,  -728,  -728,  -728,  -728,  -728,  -235,
  -728,  -715,  -625,  -625,  -253,  -296,  -297,  -298,  -299,  -300,
  -301,  -302,  -303,  -304,  -701,  -307,  -311,  -727,  -691,  -326,
  -328,  -728,  -728,   -59,   -59,  -713,  -728,  -728,  -728,  -347,
  -348,  -350,  -407,  -550,  -551,  -552,  -553,  -574,  -556,  -557,
  -576,  -578,  -561,  -566,  -570,  -572,  -588,  -589,  -590,  -574,
  -592,  -594,  -595,  -596,  -597,  -699,  -599,  -600,  -700,  -602,
  -603,  -604,  -605,  -606,  -607,  -608,  -609,  -614,  -615,  1220,
    -3,  -714,  -723,  -724,  -725,    -7,  -728,  -728,  -728,  -728,
  -728,    -9,    -4,   -19,  -728,  -126,  -127,  -128,  -129,  -130,
  -131,  -132,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,
  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,
  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,
  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,
  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,
  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,
  -194,  -195,  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,
  -204,  -205,  -206,   -24,  -133,   -13,  -728,  -728,  -728,  -728,
  -728,  -272,  -728,  -728,  -711,  -712,  -728,  -728,  -715,  -716,
   -52,  -728,  -610,  -611,  -728,  -305,  -728,  -728,  -241,  -728,
   -13,  -728,   -53,   -55,  -218,  -219,  -728,  -728,  -728,  -728,
  -728,  -728,  -728,  -728,  -728,  -728,  -728,  -728,  -728,  -728,
  -728,  -728,  -728,  -728,  -728,  -728,  -254,  -255,  -256,  -257,
  -728,   -61,   -62,  -728,  -126,  -127,  -166,  -167,  -168,  -184,
  -189,  -196,  -199,  -610,  -611,  -689,  -728,  -416,  -418,  -728,
  -709,  -710,   -72,  -272,  -728,  -325,  -422,  -431,  -433,   -78,
  -428,   -79,  -715,   -80,  -260,  -277,  -286,  -286,  -281,  -728,
  -287,  -728,  -574,  -693,  -728,  -728,   -81,   -82,  -713,   -14,
  -728,   -17,  -728,   -85,   -13,  -715,  -728,   -88,   -91,   -13,
  -103,  -104,  -728,  -728,  -111,  -318,  -321,  -715,  -728,  -625,
  -625,  -345,  -346,  -349,  -429,  -728,   -93,  -728,   -99,  -315,
  -728,  -220,  -221,  -593,  -229,  -230,  -728,  -242,  -728,  -728,
   -13,  -624,  -620,  -647,  -647,  -728,   -13,   -13,  -309,  -715,
  -261,  -720,  -720,  -728,  -728,  -720,  -728,  -327,   -58,  -728,
  -728,  -728,   -13,   -13,  -713,  -728,  -714,  -610,  -611,  -728,
  -728,  -305,  -728,  -360,  -361,  -121,  -122,  -728,  -124,  -728,
  -305,  -618,  -728,  -341,  -647,  -554,  -728,  -728,  -728,  -728,
  -728,  -728,  -728,  -728,    -6,  -726,   -25,   -26,   -27,   -28,
   -29,  -728,  -728,   -21,   -22,   -23,  -134,  -728,   -32,   -35,
  -292,  -728,  -728,  -291,   -33,  -728,   -37,  -728,  -305,   -45,
   -47,  -207,  -265,  -287,   -49,   -50,   -38,  -208,  -265,  -715,
  -273,  -286,  -286,  -702,  -703,  -282,  -426,  -704,  -705,  -703,
  -702,  -282,  -425,  -427,  -704,  -705,   -44,  -215,   -51,  -715,
  -324,  -728,  -728,  -728,  -272,  -315,  -728,  -728,  -728,  -728,
  -728,  -216,  -217,  -222,  -223,  -224,  -225,  -226,  -227,  -231,
  -232,  -233,  -234,  -236,  -237,  -238,  -239,  -240,  -243,  -244,
  -245,  -246,  -715,  -258,   -63,  -715,  -437,  -282,  -702,  -703,
   -69,   -73,  -648,  -715,  -286,  -715,  -283,  -435,  -437,  -715,
  -320,  -278,  -728,  -279,  -728,  -284,  -728,  -288,  -728,  -696,
  -698,   -12,  -714,   -16,   -18,  -715,   -84,  -313,  -100,   -89,
  -728,  -715,  -272,  -728,  -728,  -110,  -728,  -624,  -593,  -728,
   -96,  -101,  -728,  -728,  -728,  -728,  -259,  -247,  -728,  -728,
  -542,  -728,  -373,  -374,  -715,  -632,  -715,  -688,  -688,  -630,
  -632,  -632,  -646,  -648,  -649,  -650,  -651,  -652,  -653,  -654,
  -655,  -656,  -728,  -658,  -660,  -662,  -667,  -669,  -670,  -673,
  -678,  -680,  -681,  -683,  -684,  -685,  -728,  -728,  -632,  -728,
  -728,  -728,  -715,  -728,  -262,  -722,  -721,  -264,  -722,  -316,
  -317,  -692,   -13,  -351,  -352,   -13,  -728,  -728,  -728,  -728,
  -728,  -728,  -272,  -728,  -728,  -315,   -59,  -121,  -122,  -123,
  -728,  -728,  -272,  -337,  -616,  -728,   -13,  -408,  -647,  -411,
  -555,  -575,  -580,  -728,  -582,  -558,  -577,  -728,  -579,  -560,
  -728,  -563,  -728,  -565,  -568,  -728,  -569,  -728,  -591,   -10,
   -20,  -728,   -30,  -728,  -295,  -728,  -728,  -272,  -728,  -728,
  -728,  -728,  -430,  -728,  -274,  -276,  -728,  -728,   -74,  -271,
  -423,  -728,  -728,   -76,  -424,  -323,  -717,  -702,  -703,  -702,
  -703,  -715,   -54,  -457,  -459,  -461,  -464,  -465,  -522,  -715,
  -477,  -480,  -515,  -520,  -521,  -728,  -728,  -525,  -526,  -527,
  -528,  -529,  -530,  -531,  -532,  -533,  -534,  -535,  -728,  -728,
  -540,   -56,  -728,  -728,  -690,  -728,  -438,   -68,  -419,  -435,
  -267,  -274,  -269,  -728,  -397,  -728,  -319,  -286,  -285,  -289,
  -728,  -694,  -695,  -728,   -15,   -86,  -728,   -92,   -98,  -715,
  -702,  -703,  -270,  -706,  -109,  -728,   -94,  -728,  -214,  -228,
  -715,  -249,  -727,  -727,  -343,  -621,  -728,  -639,  -623,  -728,
  -628,  -629,  -728,  -728,  -642,  -728,  -644,  -728,  -362,  -728,
  -364,  -366,  -369,  -372,  -715,  -661,  -671,  -672,  -682,  -686,
  -626,  -728,  -251,  -344,  -308,  -310,  -312,  -720,  -727,  -353,
  -727,   -60,  -354,  -355,  -331,  -332,  -728,  -728,  -443,  -334,
  -728,  -715,  -702,  -703,  -706,  -314,   -13,  -121,  -122,  -125,
  -715,   -13,  -728,  -339,  -728,  -728,  -715,  -581,  -584,  -585,
  -586,  -587,   -13,  -559,  -562,  -564,  -567,  -571,  -573,  -135,
   -34,  -293,  -728,  -715,  -702,  -703,  -703,  -702,   -46,  -266,
  -728,  -718,  -286,   -40,  -210,   -41,  -211,   -75,   -42,  -213,
   -43,  -212,   -77,  -728,  -728,  -728,  -728,  -430,  -728,  -728,
  -462,  -463,  -728,  -728,  -728,  -482,  -715,  -715,  -476,  -483,
  -489,  -728,  -492,  -496,  -728,  -479,  -728,  -728,  -518,  -519,
  -523,  -524,  -536,  -728,  -122,  -538,  -728,   -64,  -417,  -397,
  -421,  -420,  -728,  -715,  -432,  -398,  -715,   -13,  -434,  -280,
  -290,  -697,   -90,  -430,  -102,  -322,  -728,  -727,  -358,   -13,
  -543,  -727,  -544,  -545,  -715,  -631,  -632,  -632,  -659,  -688,
  -668,  -673,  -687,  -632,  -632,  -679,  -632,  -656,  -674,  -715,
  -728,  -728,  -371,  -657,  -728,  -263,  -728,  -356,  -728,  -728,
  -333,  -335,  -728,  -728,   -13,  -430,  -728,  -430,  -728,  -728,
   -13,  -342,  -409,  -412,  -414,  -401,  -728,  -728,  -294,  -430,
   -39,  -209,  -275,  -728,  -458,  -460,  -469,  -473,  -715,  -715,
  -715,  -501,  -503,  -504,  -507,  -508,  -574,  -511,  -513,  -514,
  -715,  -715,  -715,  -539,  -474,  -475,  -499,  -484,  -487,  -490,
  -728,  -495,  -715,  -574,  -719,  -715,  -516,  -517,  -728,  -248,
   -13,   -70,  -268,  -688,  -688,  -378,  -380,  -380,  -380,  -396,
  -728,  -715,  -656,  -664,  -665,  -676,  -436,  -250,   -11,   -13,
  -549,  -359,  -728,  -728,  -547,  -622,  -728,  -635,  -728,  -637,
  -627,  -728,  -640,  -728,  -643,  -645,  -363,  -365,  -367,  -370,
  -252,  -329,  -728,  -330,  -728,  -448,  -451,  -454,  -455,  -456,
  -289,  -727,  -336,  -338,  -617,  -728,   -13,   -13,  -728,  -410,
  -583,  -466,  -467,  -468,  -502,  -506,  -728,  -510,  -512,  -470,
  -471,  -472,  -491,  -485,  -728,  -493,  -497,  -478,  -728,  -481,
  -537,  -439,  -728,  -376,  -377,  -381,  -387,  -389,  -728,  -392,
  -728,  -394,  -399,  -728,  -728,  -663,  -728,  -548,   -13,  -610,
  -611,  -728,  -728,  -305,  -546,  -632,  -632,  -632,  -632,  -728,
  -728,   -13,  -444,  -728,  -728,  -452,  -440,  -441,  -442,  -340,
  -728,  -728,  -715,  -403,  -405,  -406,  -500,  -505,  -509,  -728,
  -488,  -728,  -688,  -666,  -379,  -380,  -380,  -380,  -380,  -677,
  -380,  -400,  -675,  -728,  -315,  -542,  -272,  -728,  -728,  -315,
  -728,  -633,  -636,  -638,  -641,  -368,  -727,   -13,  -449,  -450,
  -453,  -492,  -413,  -415,  -402,  -728,  -486,  -728,  -494,  -498,
  -375,  -728,  -384,  -728,  -386,  -728,  -390,  -728,  -393,  -395,
  -314,  -706,  -541,  -715,  -702,  -703,  -706,  -314,  -632,  -357,
  -727,  -728,  -404,  -380,  -380,  -380,  -380,  -430,  -634,  -445,
  -446,  -447,  -493,  -728,  -382,  -385,  -388,  -391,  -380,  -383 ]

clist = [
'42,305,305,305,406,42,272,227,288,762,377,138,138,620,807,222,413,946',
'271,511,449,523,284,876,290,138,362,362,366,124,515,382,383,561,42,331',
'331,358,741,600,601,370,885,433,434,141,141,604,607,343,343,611,877',
'917,230,770,771,339,339,121,346,296,300,733,42,8,455,461,323,629,8,131',
'929,935,388,284,284,133,214,120,327,784,29,1085,340,340,907,29,343,343',
'343,949,513,292,299,301,339,339,339,124,566,1017,29,353,1149,325,612',
'615,326,890,891,550,29,29,29,926,29,289,1032,42,4,565,741,340,340,340',
'1135,2,42,368,42,572,572,507,1047,1028,564,597,1171,966,926,125,692',
'721,725,744,29,1049,213,385,394,29,29,1133,1178,29,735,980,992,379,380',
'429,446,384,547,547,523,1140,466,1002,650,652,572,422,303,316,317,639',
'479,738,672,738,401,403,8,359,365,1149,480,741,305,801,447,420,273,8',
'978,990,467,723,15,29,729,661,356,15,29,29,29,29,29,927,29,42,416,417',
'418,419,933,1020,373,728,1176,285,465,979,991,374,472,528,307,307,307',
'1135,15,392,927,1059,42,633,646,648,651,651,306,306,306,806,428,439',
'421,1010,439,367,456,414,602,928,439,369,1202,821,305,305,15,372,375',
'960,636,1048,290,305,1019,691,393,902,1096,1021,939,371,1132,637,928',
'962,1212,404,825,427,1066,1067,1145,506,1006,1007,517,29,29,29,29,29',
'29,29,819,518,747,1057,29,29,29,824,899,1126,326,756,1047,366,455,461',
'42,15,29,1054,42,546,1209,1165,331,42,15,543,15,738,738,952,1103,1167',
'935,1055,1058,974,343,749,124,975,1087,331,872,553,339,873,539,1018',
'1127,884,887,603,323,1136,42,343,1137,323,875,504,42,42,29,339,921,1',
'296,405,532,29,29,340,300,407,408,409,42,42,29,533,534,1199,623,752',
'738,410,551,895,531,535,340,1142,326,752,541,411,29,326,548,412,29,857',
'572,827,124,29,862,826,832,15,822,435,930,1040,435,774,776,811,867,138',
'435,1143,,,432,432,878,820,,,668,673,516,,15,,29,378,378,305,519,378',
'29,29,467,1170,447,909,,,617,618,,141,619,,,29,29,29,,,843,752,903,616',
',,,945,465,752,,715,715,,913,1115,29,835,,835,741,679,722,660,,1210',
'307,684,958,,378,378,378,378,307,1093,1094,924,456,514,306,,,,912,305',
'455,461,306,,,,15,678,,,15,,758,683,,15,,,42,934,,936,928,875,875,954',
'331,679,1146,778,955,1147,,465,993,331,,,1005,957,343,,29,465,,,15,',
'339,343,,,15,15,909,,,339,,727,,440,969,456,440,,,,15,15,440,551,816',
'456,928,340,444,445,922,305,551,,,1211,340,468,469,,,305,977,931,1192',
',,994,995,,42,,29,42,,1056,,,853,855,,790,29,858,860,465,1203,,,738',
'1180,465,,1065,42,,305,,29,,802,,,,,,,1075,854,856,,,,859,861,456,505',
',,823,,42,138,456,1016,,,,42,901,465,,,,,,,673,928,,,,,1091,798,673',
'886,800,,1128,,,29,,,29,141,715,439,,456,,29,715,715,897,987,987,439',
'439,900,,29,439,439,,29,271,987,,737,1079,1080,1081,138,,840,,839,,15',
',,848,,673,,923,778,,1131,,942,29,331,,29,29,,,29,378,,,,331,29,29,343',
'1108,,29,29,997,,,339,581,581,343,,,635,,,1037,1039,339,,1121,,1122',
'1042,1044,679,1045,987,684,875,551,,,970,340,1116,,1117,673,,1118,914',
',,797,340,,673,,581,,15,,965,15,42,,,,,42,,,971,,,,,,,673,42,,,810,15',
'854,856,861,859,,,,,,,,,,,,,,,,,,1148,673,1150,,,15,673,673,435,,,715',
'15,,715,715,852,,435,435,,715,,435,435,,439,,1086,715,715,715,956,,',
'1030,965,,,1034,29,,,778,778,29,29,1076,967,42,,,987,,959,,29,,,,,42',
'1198,,1088,1023,932,,1207,932,931,,760,852,29,,,,,,,,,1204,,1205,,1206',
',971,,,,,715,,42,,,1193,,,42,,,,,,1161,1162,1163,1164,1086,,,1218,,29',
',432,673,673,673,1026,,1008,715,1064,,,,29,886,,,1031,,,,,,,715,29,',
'752,,,,,,965,42,,,,,,15,,,,,15,,284,440,1086,,1179,1061,42,29,,15,1110',
'440,440,29,343,1052,440,440,,29,,581,339,,343,,1208,435,1014,,,,339',
',,,18,,1015,,1179,18,,42,42,,,,,340,,,,,,,231,778,778,340,,715,,,1086',
',231,231,231,29,18,332,332,,,,,,,,1107,284,,,15,42,1023,1157,29,1023',
',,1023,,1023,343,15,1174,42,,18,,715,339,305,231,231,,,231,389,399,399',
',,,715,1130,715,,,,,,,29,29,,,,340,15,,465,,,,15,465,,,,,,42,,,,,581',
',,,,715,18,581,,673,1155,231,231,231,231,18,17,18,29,456,,17,378,1166',
',581,1023,,1023,715,1023,29,1023,29,29,,440,,15,,,1168,1169,,,,,,,,17',
',,,,376,,15,1023,,,1114,,711,711,,29,,1014,1200,,1014,,1014,,932,,29',
'1015,,17,1015,,1015,,,,41,,1097,1099,1101,41,378,15,15,,,,,18,231,437',
'231,231,437,231,,,283,,437,231,231,,,,,,,,41,330,330,,18,,,,,,,,,,17',
'15,,,,1022,,,,17,,17,,378,15,,41,,,1014,,1014,,1014,,1014,387,283,283',
'1015,,1015,,1015,,1015,231,,,,,,,231,231,,716,716,,,,1014,231,,,,,,',
',15,1015,,,,,,,430,443,18,41,,,18,,,,332,18,41,,41,1182,1184,1186,1188',
',1189,,,,,,17,,17,332,,17,,,,,,17,,,,,18,,,,,,18,18,,17,,,,,,,,,,,,231',
'18,18,,581,,,,,,1214,1215,1216,1217,,,,711,,,,231,,711,711,1219,,,,',
'525,,527,,41,529,530,,,,,,,,,,,,,,,,,,,,,378,378,41,,,,1022,,,1022,',
'17,,470,,17,,,,,17,,,,,,,,,,,,,,,,231,,,,,,,,,,,,,,,17,,,,,,17,17,,',
',,,,,,,,,,,,17,17,,,,716,,,,41,,716,716,41,520,,,330,41,1022,,18,664',
',,,,,,332,,231,,,,,330,536,332,,,,,,,,,231,,41,,,,,,41,41,711,,,711',
'711,,,,710,710,711,,,,41,41,,,711,711,711,,,,,,,,,,,,,,,,,,,,,,,,18',
',,18,,,,,,,231,,739,,376,,742,,,,231,,,,18,,,,,,,,,,,,,,,711,,,,,,,',
',,17,,18,,,437,231,,,18,,,,,,437,437,,19,,437,437,711,19,,716,785,,716',
'716,,685,,,,716,,,711,,,,,716,716,716,739,,,376,,,19,334,334,,,,,,,',
'443,,,,,724,,,,41,,,,730,,732,,330,17,736,19,17,,332,,,330,,,,391,400',
'400,,332,745,,,,,,748,17,,841,,716,,,,,,,739,376,,,,,,711,,,,765,,768',
',,17,,,17,710,,19,17,,716,710,710,,17,17,19,,19,17,17,41,,,41,18,716',
',,,18,231,,711,795,,,,,,,18,739,,,41,,711,,711,,910,,,911,,,,,437,,',
',,,,,,,,,,41,,920,,,,,41,,,,,,711,,,938,,,,,,,,,,,,,19,231,438,,,438',
',,711,716,,438,,,,18,,,,,,,,,,19,,18,,,,,,,,,,,,,,,,,,,,,,,716,,968',
'17,330,,231,,17,,,,18,,716,330,716,,18,17,,,,,710,,,710,710,,,,,,710',
',,17,709,709,,915,710,710,710,,,,,,,,716,,,19,,,,19,,,,334,19,943,,',
'18,,,,,,41,,716,,,41,,1105,334,,,,,18,,,41,1111,,,17,19,,,,,,19,19,',
',,17,710,,,,,,1060,,,,19,19,,,,,,18,18,,,,,,,376,,,,,,,710,,17,,,,,',
'17,,,,976,,,,710,,,,,,,1152,,,41,18,,,,,,,,,,,41,,18,,231,231,,1012',
',,,,,,,,,,,,17,,,708,708,,,,1035,,,,,,,41,,231,,17,,41,,1046,,,,,18',
',,,,707,707,,,,,,,,710,,,,,,,,,,,,,,17,17,,,,709,1071,1072,1073,,,709',
'709,,19,41,32,,,,,32,334,,,,,710,283,,,334,,1089,41,,32,,1109,,,710',
'17,710,,,32,32,32,,32,,,,,17,,,,,,,,,,,,,,,,41,41,,,,,,,710,32,,,,,32',
'32,,,32,,,,,19,,,19,,,,17,,710,,,,,,283,,,,41,,,,,19,,,,,,,831,41,,',
',,,,,,32,,,,,32,32,32,32,32,19,32,,438,,,,19,,,,,,438,438,,,,438,438',
',,708,,,,,41,708,708,709,,,709,709,,,,,,709,,,,,,,,709,709,709,,707',
',,,,,707,707,,712,712,,,,,,,,,,,,,,,,,,,,,334,32,32,32,32,32,32,32,',
',,334,32,32,32,,,,,,,,,,,,32,,,,709,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,709',
',,,,,,,19,,32,,,19,,,709,32,32,,,,,,19,,32,,,,,,,,,,,,,,,,438,,32,,',
'708,32,,708,708,,32,,,,708,,,,,,,,708,708,708,,,,,,,,,,707,713,713,707',
'707,,,32,,,707,,,32,32,,,,707,707,707,,19,709,,,,,32,32,32,,,,19,,,',
',,,,,,,,,714,714,32,,,,708,,,,,,712,,,,,709,712,712,,,19,,,,,,19,,,709',
',709,,,707,,708,,,,,,,,,,,,,,,,708,,,,,,,,,,,,,,707,709,,,,,32,,,,19',
',,,,,707,,,,,,,400,,709,,238,,19,,,,1113,,,,304,304,304,,,,,,,,,,351',
'352,,354,355,,357,,,,,,,,,32,,19,19,,,708,,304,304,32,,,,,,,,,,,,,,',
',32,,,,,,,,,,707,,,,400,,713,,19,,,708,713,713,712,,,712,712,,,19,,',
'712,708,,708,,,,,712,712,712,,,,,,,707,,,32,,,32,,,,,714,,32,707,,707',
'714,714,,,,708,32,,,19,32,,,,,,,,,,,,,,,,,,,708,,,,,,707,,32,,712,32',
'32,,,32,,,,,,32,32,,,,32,32,,,707,,,,304,442,,,448,304,,,712,,448,,',
',,,,,,,,,,238,712,,,,481,482,483,484,485,486,487,488,489,490,491,492',
'493,494,495,496,497,498,499,500,501,502,,,,,503,713,,,713,713,,,,,,713',
',,,,,,,713,713,713,,304,304,,,,,,,,304,,,,,,,304,,304,,,304,304,,714',
',,714,714,,,712,,,714,,,,,,,,714,714,714,,,,,,32,,,,,32,32,,,,,713,',
'556,,557,32,,,,,,712,,,,,,,,,,,,32,,712,,712,,,,,713,,,,,,,,,,,,,,714',
',713,,,,,,,,,,,,,,,712,,,32,,,,,,,,,,,304,714,,32,,,,,,,712,,,,,32,',
'714,,,,,,,,,,,,,,,,,,,,,,,,,,304,32,448,448,448,,,32,,,,,713,32,,,,',
',,,,,,,,,,,,,,,,,,,,352,,,,,,,,,,304,,304,,304,713,,,,,714,,,,,32,,',
',713,304,713,,,,,,,,,448,,,759,32,,,761,,,,,,,,,,,,,,714,,,,,,713,,',
',,,304,,714,,714,,,,32,32,,,,,792,,,,713,,304,,,304,,,,,,,,,,,,,304',
'304,,,714,,,,,,,304,,,32,,,,,,,,,,,,,32,714,32,32,,,,,,,,,,,,,,304,448',
'304,,,,849,,,304,304,448,448,,,,448,448,32,,,,,,,,,,,32,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,304,,,,,,,,,304,,,304,,,,,,,,,,,,,,,,,,,,304',
',,,,,,,,,,,,,304,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,304,,,,,,,,448,,,,,,,,,,,,,448,448,448,448,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,1009,,,,,,,,,,,,,,,,,,,,1027,,,,,,,,,,,,,,,,,,,,,,',
',,,,,1050,,,,,,,,,304,,,,,,,,,,,,,,,,,,,304,448,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,304' ]
        racc_goto_table = arr = ::Array.new(3894, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'70,50,50,50,191,70,42,35,151,12,105,73,73,110,111,33,191,109,44,55,31',
'92,70,168,33,73,85,85,115,114,90,40,40,10,70,70,70,35,231,10,10,85,180',
'24,24,75,75,87,87,81,81,87,169,13,22,132,132,45,45,7,67,89,89,56,70',
'8,53,53,62,71,8,9,128,227,70,70,70,17,17,5,66,124,57,185,46,46,140,57',
'81,81,81,13,31,54,54,54,45,45,45,114,90,138,57,78,228,63,108,108,11',
'195,195,68,57,57,57,221,57,48,199,70,2,137,231,46,46,46,145,3,70,8,70',
'217,217,53,122,14,150,150,186,142,221,6,37,37,154,16,57,125,18,5,21',
'57,57,144,186,57,154,171,171,19,19,25,28,19,216,216,92,185,28,171,206',
'206,217,27,61,61,61,150,38,93,32,93,72,72,8,80,80,228,39,231,50,41,77',
'8,47,8,168,168,77,49,23,57,58,76,82,23,57,57,57,57,57,139,57,70,19,19',
'19,19,139,142,84,91,185,103,73,169,169,104,33,191,88,88,88,145,23,112',
'139,171,70,113,207,207,207,207,86,86,86,110,22,22,2,140,22,116,89,6',
'117,223,22,118,144,119,50,50,23,88,88,120,121,126,33,50,130,31,23,56',
'135,136,124,86,143,146,223,147,185,148,149,11,152,153,138,155,195,195',
'157,57,57,57,57,57,57,57,71,158,68,169,57,57,57,10,161,162,11,68,122',
'115,53,53,70,23,57,163,70,35,164,125,70,70,23,33,23,93,93,165,142,166',
'227,167,170,173,81,31,114,175,180,70,176,33,45,177,67,139,13,181,182',
'35,62,188,70,81,189,62,37,48,70,70,57,45,198,1,89,202,7,57,57,46,89',
'203,204,205,70,70,57,8,9,109,33,53,93,208,66,71,5,63,46,128,11,53,63',
'209,57,11,78,210,57,55,217,211,114,57,55,150,212,23,215,23,225,132,23',
'220,220,31,32,73,23,226,,,86,86,32,31,,,33,35,61,,23,,57,26,26,50,61',
'26,57,57,77,168,77,92,,,11,11,,75,5,,,57,57,57,,,31,53,90,19,,,,87,73',
'53,,70,70,,32,139,57,207,,207,231,89,35,17,,13,88,89,10,,26,26,26,26',
'88,132,132,90,89,86,86,,,,68,50,53,53,86,,,,23,54,,,23,,77,54,,23,,',
'70,137,,137,223,37,37,108,70,89,139,123,32,139,,73,71,70,,,37,32,81',
',57,73,,,23,,45,81,,,23,23,92,,,45,,54,,20,32,89,20,,,,23,23,20,66,40',
'89,223,46,26,26,24,50,66,,,111,46,26,26,,,50,32,193,12,,,32,32,,70,',
'57,70,,37,,,28,28,,114,57,28,28,73,139,,,93,132,73,,10,70,,50,,57,,114',
',,,,,,37,77,77,,,,77,77,89,26,,,114,,70,73,89,137,,,,70,105,73,,,,,',
',35,223,,,,,10,11,35,35,11,,110,,,57,,,57,75,70,22,,89,,57,70,70,42',
'193,193,22,22,151,,57,22,22,,57,44,193,,88,32,32,32,73,,8,,17,,23,,',
'8,,35,,85,123,,10,,123,57,70,,57,57,,,57,26,,,,70,57,57,81,108,,57,57',
'184,,,45,222,222,81,,,26,,,220,220,45,,108,,108,220,220,89,220,193,89',
'37,66,,,28,46,137,,137,35,,137,66,,,88,46,,35,,222,,23,,35,23,70,,,',
',70,,,77,,,,,,,35,70,,,86,23,77,77,77,77,,,,,,,,,,,,,,,,,,137,35,137',
',,23,35,35,23,,,70,23,,70,70,88,,23,23,,70,,23,23,,22,,184,70,70,70',
'11,,,85,35,,,85,57,,,123,123,57,57,191,11,70,,,193,,19,,57,,,,,70,137',
',191,224,133,,32,133,193,,26,88,57,,,,,,,,,137,,137,,137,,77,,,,,70',
',70,,,31,,,70,,,,,,220,220,220,220,184,,,137,,57,,86,35,35,35,11,,19',
'70,114,,,,57,35,,,11,,,,,,,70,57,,53,,,,,,35,70,,,,,,23,,,,,23,,70,20',
'184,,184,11,70,57,,23,70,20,20,57,81,19,20,20,,57,,222,45,,81,,220,23',
'127,,,,45,,,,30,,133,,184,30,,70,70,,,,,46,,,,,,,30,123,123,46,,70,',
',184,,30,30,30,57,30,30,30,,,,,,,,11,70,,,23,70,224,33,57,224,,,224',
',224,81,23,35,70,,30,,70,45,50,30,30,,,30,30,30,30,,,,70,11,70,,,,,',
',57,57,,,,46,23,,73,,,,23,73,,,,,,70,,,,,222,,,,,70,30,222,,35,11,30',
'30,30,30,30,29,30,57,89,,29,26,11,,222,224,,224,70,224,57,224,57,57',
',20,,23,,,19,19,,,,,,,,29,,,,,83,,23,224,,,23,,99,99,,57,,127,11,,127',
',127,,133,,57,133,,29,133,,133,,,,69,,134,134,134,69,26,23,23,,,,,30',
'30,30,30,30,30,30,,,69,,30,30,30,,,,,,,,69,69,69,,30,,,,,,,,,,29,23',
',,,222,,,,29,,29,,26,23,,69,,,127,,127,,127,,127,69,69,69,133,,133,',
'133,,133,30,,,,,,,30,30,,107,107,,,,127,30,,,,,,,,23,133,,,,,,,83,83',
'30,69,,,30,,,,30,30,69,,69,134,134,134,134,,134,,,,,,29,,29,30,,29,',
',,,,29,,,,,30,,,,,,30,30,,29,,,,,,,,,,,,30,30,30,,222,,,,,,134,134,134',
'134,,,,99,,,,30,,99,99,134,,,,,83,,83,,69,83,83,,,,,,,,,,,,,,,,,,,,',
'26,26,69,,,,222,,,222,,29,,64,,29,,,,,29,,,,,,,,,,,,,,,,30,,,,,,,,,',
',,,,,29,,,,,,29,29,,,,,,,,,,,,,,,29,29,,,,107,,,,69,,107,107,69,64,',
',69,69,222,,30,83,,,,,,,30,,30,,,,,69,64,30,,,,,,,,,30,,69,,,,,,69,69',
'99,,,99,99,,,,98,98,99,,,,69,69,,,99,99,99,,,,,,,,,,,,,,,,,,,,,,,,30',
',,30,,,,,,,30,,83,,83,,83,,,,30,,,,30,,,,,,,,,,,,,,,99,,,,,,,,,,29,',
'30,,,30,30,,,30,,,,,,30,30,,34,,30,30,99,34,,107,83,,107,107,,64,,,',
'107,,,99,,,,,107,107,107,83,,,83,,,34,34,34,,,,,,,,83,,,,,64,,,,69,',
',,64,,64,,69,29,64,34,29,,30,,,69,,,,34,34,34,,30,64,,,,,,64,29,,83',
',107,,,,,,,83,83,,,,,,99,,,,64,,64,,,29,,,29,98,,34,29,,107,98,98,,29',
'29,34,,34,29,29,69,,,69,30,107,,,,30,30,,99,64,,,,,,,30,83,,,69,,99',
',99,,83,,,83,,,,,30,,,,,,,,,,,,,69,,83,,,,,69,,,,,,99,,,83,,,,,,,,,',
',,,34,30,34,,,34,,,99,107,,34,,,,30,,,,,,,,,,34,,30,,,,,,,,,,,,,,,,',
',,,,,,107,,83,29,69,,30,,29,,,,30,,107,69,107,,30,29,,,,,98,,,98,98',
',,,,,98,,,29,97,97,,64,98,98,98,,,,,,,,107,,,34,,,,34,,,,34,34,64,,',
'30,,,,,,69,,107,,,69,,30,34,,,,,30,,,69,30,,,29,34,,,,,,34,34,,,,29',
'98,,,,,,83,,,,34,34,,,,,,30,30,,,,,,,83,,,,,,,98,,29,,,,,,29,,,,64,',
',,98,,,,,,,30,,,69,30,,,,,,,,,,,69,,30,,30,30,,64,,,,,,,,,,,,,29,,,96',
'96,,,,64,,,,,,,69,,30,,29,,69,,64,,,,,30,,,,,95,95,,,,,,,,98,,,,,,,',
',,,,,,29,29,,,,97,64,64,64,,,97,97,,34,69,60,,,,,60,34,,,,,98,69,,,34',
',64,69,,60,,69,,,98,29,98,,,60,60,60,,60,,,,,29,,,,,,,,,,,,,,,,69,69',
',,,,,,98,60,,,,,60,60,,,60,,,,,34,,,34,,,,29,,98,,,,,,69,,,,69,,,,,34',
',,,,,,34,69,,,,,,,,,60,,,,,60,60,60,60,60,34,60,,34,,,,34,,,,,,34,34',
',,,34,34,,,96,,,,,69,96,96,97,,,97,97,,,,,,97,,,,,,,,97,97,97,,95,,',
',,,95,95,,100,100,,,,,,,,,,,,,,,,,,,,,34,60,60,60,60,60,60,60,,,,34',
'60,60,60,,,,,,,,,,,,60,,,,97,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,97,,,,,',
',,34,,60,,,34,,,97,60,60,,,,,,34,,60,,,,,,,,,,,,,,,,34,,60,,,96,60,',
'96,96,,60,,,,96,,,,,,,,96,96,96,,,,,,,,,,95,101,101,95,95,,,60,,,95',
',,60,60,,,,95,95,95,,34,97,,,,,60,60,60,,,,34,,,,,,,,,,,,,102,102,60',
',,,96,,,,,,100,,,,,97,100,100,,,34,,,,,,34,,,97,,97,,,95,,96,,,,,,,',
',,,,,,,,96,,,,,,,,,,,,,,95,97,,,,,60,,,,34,,,,,,95,,,,,,,34,,97,,36',
',34,,,,34,,,,36,36,36,,,,,,,,,,36,36,,36,36,,36,,,,,,,,,60,,34,34,,',
'96,,36,36,60,,,,,,,,,,,,,,,,60,,,,,,,,,,95,,,,34,,101,,34,,,96,101,101',
'100,,,100,100,,,34,,,100,96,,96,,,,,100,100,100,,,,,,,95,,,60,,,60,',
',,,102,,60,95,,95,102,102,,,,96,60,,,34,60,,,,,,,,,,,,,,,,,,,96,,,,',
',95,,60,,100,60,60,,,60,,,,,,60,60,,,,60,60,,,95,,,,36,36,,,36,36,,',
'100,,36,,,,,,,,,,,,,36,100,,,,36,36,36,36,36,36,36,36,36,36,36,36,36',
'36,36,36,36,36,36,36,36,36,,,,,36,101,,,101,101,,,,,,101,,,,,,,,101',
'101,101,,36,36,,,,,,,,36,,,,,,,36,,36,,,36,36,,102,,,102,102,,,100,',
',102,,,,,,,,102,102,102,,,,,,60,,,,,60,60,,,,,101,,36,,36,60,,,,,,100',
',,,,,,,,,,,60,,100,,100,,,,,101,,,,,,,,,,,,,,102,,101,,,,,,,,,,,,,,',
'100,,,60,,,,,,,,,,,36,102,,60,,,,,,,100,,,,,60,,102,,,,,,,,,,,,,,,,',
',,,,,,,,,36,60,36,36,36,,,60,,,,,101,60,,,,,,,,,,,,,,,,,,,,,,,,,36,',
',,,,,,,,36,,36,,36,101,,,,,102,,,,,60,,,,101,36,101,,,,,,,,,36,,,36',
'60,,,36,,,,,,,,,,,,,,102,,,,,,101,,,,,,36,,102,,102,,,,60,60,,,,,36',
',,,101,,36,,,36,,,,,,,,,,,,,36,36,,,102,,,,,,,36,,,60,,,,,,,,,,,,,60',
'102,60,60,,,,,,,,,,,,,,36,36,36,,,,36,,,36,36,36,36,,,,36,36,60,,,,',
',,,,,,60,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,36,,,,,,,,,36,,,36,,,,',
',,,,,,,,,,,,,,,36,,,,,,,,,,,,,,36,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,36,,,,,,,,36,,,,,,,,,,,,,36,36,36,36,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,36,,,,,,,,,,,,,,,,,,,,36,,,,,,,,,,,,,,,',
',,,,,,,,,,,,36,,,,,,,,,36,,,,,,,,,,,,,,,,,,,36,36,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,36' ]
        racc_goto_check = arr = ::Array.new(3894, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   369,   118,   127,   nil,    74,   134,    54,    63,    62,
  -327,    72,  -551,  -709,  -782,   nil,  -387,    67,   137,    88,
   356,    74,    32,   198,  -173,   -55,   370,    40,   -58,  1184,
  1055,  -201,  -269,    -3,  1732,   -14,  2737,  -337,   -64,   -55,
   -42,  -425,   -18,   nil,    -6,    20,    47,   170,    90,  -305,
   -31,   nil,   nil,  -156,    64,  -273,  -454,    80,  -308,   nil,
  2264,   142,    32,    69,  1278,   nil,    43,    22,  -236,  1255,
    -2,  -328,   105,     1,   nil,    35,  -223,   -28,    57,   nil,
   133,    12,   155,  1157,   153,   -26,   212,  -324,   198,    32,
  -263,  -286,  -286,  -343,   nil,  1748,  1718,  1556,  1152,   754,
  1977,  2139,  2185,   199,   159,   -59,   nil,   872,  -273,  -781,
  -372,  -605,   159,  -162,    24,   -25,   188,  -112,   193,  -372,
  -556,  -135,  -806,   -41,  -501,  -794,  -671,   143,  -697,   nil,
  -634,   nil,  -512,   153,   243,  -740,  -629,  -242,  -805,  -555,
  -648,   nil,  -687,  -788,  -915,  -942,  -123,  -542,   203,  -351,
  -227,   -17,  -675,  -675,  -362,     4,   nil,    -3,     5,   nil,
   nil,  -416,  -750,  -631,  -876,  -475,  -787,  -615,  -676,  -647,
  -614,  -715,   nil,  -529,   nil,  -526,  -352,  -349,   nil,   nil,
  -658,  -347,  -347,   nil,  -116,  -917,  -987,   nil,  -717,  -714,
   nil,   -83,   nil,  -166,   nil,  -596,   nil,   nil,  -395,  -803,
   nil,   nil,   286,   287,   287,   287,  -239,  -167,   296,   305,
   308,  -236,  -232,   nil,   nil,  -220,  -175,  -232,   nil,   nil,
  -151,  -651,   404,  -509,    15,  -353,  -667,  -700,  -994,   nil,
   nil,  -486 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,     6,   386,   321,   nil,
   nil,   560,   nil,   947,   nil,   318,   319,   nil,   nil,   nil,
    13,    14,    20,   236,   nil,   nil,    16,   nil,   436,   237,
   350,   nil,   nil,   631,   235,   471,    23,   996,   nil,   nil,
   nil,   nil,   nil,   381,   140,    52,    53,   nil,   nil,   nil,
    25,    26,    27,   755,   nil,   nil,   nil,   338,   nil,    28,
   335,   450,    35,   nil,   nil,    37,    40,    39,   nil,   232,
   233,   398,   nil,   458,   139,    84,   nil,   441,   100,    49,
   nil,    54,   270,   310,   nil,   918,   451,   nil,   452,   463,
   nil,   680,   521,   308,   294,    55,    56,    57,    58,    59,
    60,    61,    62,    63,   nil,   295,    69,    70,   nil,   nil,
   nil,   nil,   nil,   nil,   613,   360,   nil,   nil,   nil,   nil,
   nil,   nil,   780,   580,   nil,   781,   782,   568,   562,   563,
  1144,  1013,   nil,   569,   nil,   nil,   nil,   598,   nil,   571,
   nil,   905,   nil,   nil,   nil,   578,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   462,   nil,   nil,   734,
   726,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   880,   nil,   693,   697,   694,   695,   nil,   nil,   696,   698,
   nil,   nil,   nil,   879,   881,   nil,   882,   981,   982,   983,
   984,   nil,   988,   589,   989,   702,   703,   704,   nil,   nil,
    83,    85,    86,   nil,   nil,   nil,   nil,   641,   nil,   nil,
   nil,   nil,   nil,    96,    97,   nil,   361,   925,   364,   567,
   767,   570,   937,   583,   585,   586,  1024,   590,  1025,   593,
   596,   313 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 150, :_reduce_1,
  2, 148, :_reduce_2,
  2, 149, :_reduce_3,
  0, 151, :_reduce_4,
  1, 151, :_reduce_5,
  3, 151, :_reduce_6,
  2, 151, :_reduce_7,
  1, 153, :_reduce_none,
  2, 153, :_reduce_9,
  3, 156, :_reduce_10,
  4, 157, :_reduce_11,
  2, 158, :_reduce_12,
  0, 162, :_reduce_13,
  1, 162, :_reduce_14,
  3, 162, :_reduce_15,
  2, 162, :_reduce_16,
  1, 163, :_reduce_none,
  2, 163, :_reduce_18,
  0, 174, :_reduce_19,
  4, 155, :_reduce_20,
  3, 155, :_reduce_21,
  3, 155, :_reduce_22,
  3, 155, :_reduce_23,
  2, 155, :_reduce_24,
  3, 155, :_reduce_25,
  3, 155, :_reduce_26,
  3, 155, :_reduce_27,
  3, 155, :_reduce_28,
  3, 155, :_reduce_29,
  4, 155, :_reduce_30,
  1, 155, :_reduce_none,
  3, 155, :_reduce_32,
  3, 155, :_reduce_33,
  5, 155, :_reduce_34,
  3, 155, :_reduce_35,
  1, 155, :_reduce_none,
  3, 167, :_reduce_37,
  3, 167, :_reduce_38,
  6, 167, :_reduce_39,
  5, 167, :_reduce_40,
  5, 167, :_reduce_41,
  5, 167, :_reduce_42,
  5, 167, :_reduce_43,
  3, 167, :_reduce_44,
  1, 175, :_reduce_none,
  3, 175, :_reduce_46,
  1, 175, :_reduce_none,
  1, 173, :_reduce_none,
  3, 173, :_reduce_49,
  3, 173, :_reduce_50,
  3, 173, :_reduce_51,
  2, 173, :_reduce_52,
  0, 185, :_reduce_53,
  4, 173, :_reduce_54,
  0, 186, :_reduce_55,
  4, 173, :_reduce_56,
  1, 173, :_reduce_none,
  1, 166, :_reduce_none,
  0, 190, :_reduce_59,
  3, 187, :_reduce_60,
  1, 189, :_reduce_61,
  2, 192, :_reduce_62,
  0, 196, :_reduce_63,
  5, 193, :_reduce_64,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 198, :_reduce_none,
  4, 198, :_reduce_68,
  0, 205, :_reduce_69,
  4, 202, :_reduce_70,
  1, 204, :_reduce_none,
  2, 197, :_reduce_72,
  3, 197, :_reduce_73,
  4, 197, :_reduce_74,
  5, 197, :_reduce_75,
  4, 197, :_reduce_76,
  5, 197, :_reduce_77,
  2, 197, :_reduce_78,
  2, 197, :_reduce_79,
  2, 197, :_reduce_80,
  2, 197, :_reduce_81,
  2, 197, :_reduce_82,
  1, 168, :_reduce_83,
  3, 168, :_reduce_84,
  1, 210, :_reduce_85,
  3, 210, :_reduce_86,
  1, 209, :_reduce_none,
  2, 209, :_reduce_88,
  3, 209, :_reduce_89,
  5, 209, :_reduce_90,
  2, 209, :_reduce_91,
  4, 209, :_reduce_92,
  2, 209, :_reduce_93,
  4, 209, :_reduce_94,
  1, 209, :_reduce_95,
  3, 209, :_reduce_96,
  1, 213, :_reduce_none,
  3, 213, :_reduce_98,
  2, 212, :_reduce_99,
  3, 212, :_reduce_100,
  1, 215, :_reduce_101,
  3, 215, :_reduce_102,
  1, 214, :_reduce_103,
  1, 214, :_reduce_104,
  4, 214, :_reduce_105,
  3, 214, :_reduce_106,
  3, 214, :_reduce_107,
  3, 214, :_reduce_108,
  3, 214, :_reduce_109,
  2, 214, :_reduce_110,
  1, 214, :_reduce_111,
  1, 170, :_reduce_112,
  1, 170, :_reduce_113,
  4, 170, :_reduce_114,
  3, 170, :_reduce_115,
  3, 170, :_reduce_116,
  3, 170, :_reduce_117,
  3, 170, :_reduce_118,
  2, 170, :_reduce_119,
  1, 170, :_reduce_120,
  1, 218, :_reduce_121,
  1, 218, :_reduce_none,
  2, 219, :_reduce_123,
  1, 219, :_reduce_124,
  3, 219, :_reduce_125,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 164, :_reduce_131,
  1, 164, :_reduce_none,
  1, 165, :_reduce_133,
  0, 223, :_reduce_134,
  4, 165, :_reduce_135,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  3, 183, :_reduce_207,
  3, 183, :_reduce_208,
  6, 183, :_reduce_209,
  5, 183, :_reduce_210,
  5, 183, :_reduce_211,
  5, 183, :_reduce_212,
  5, 183, :_reduce_213,
  4, 183, :_reduce_214,
  3, 183, :_reduce_215,
  3, 183, :_reduce_216,
  3, 183, :_reduce_217,
  2, 183, :_reduce_218,
  2, 183, :_reduce_219,
  2, 183, :_reduce_220,
  2, 183, :_reduce_221,
  3, 183, :_reduce_222,
  3, 183, :_reduce_223,
  3, 183, :_reduce_224,
  3, 183, :_reduce_225,
  3, 183, :_reduce_226,
  3, 183, :_reduce_227,
  4, 183, :_reduce_228,
  2, 183, :_reduce_229,
  2, 183, :_reduce_230,
  3, 183, :_reduce_231,
  3, 183, :_reduce_232,
  3, 183, :_reduce_233,
  3, 183, :_reduce_234,
  1, 183, :_reduce_none,
  3, 183, :_reduce_236,
  3, 183, :_reduce_237,
  3, 183, :_reduce_238,
  3, 183, :_reduce_239,
  3, 183, :_reduce_240,
  2, 183, :_reduce_241,
  2, 183, :_reduce_242,
  3, 183, :_reduce_243,
  3, 183, :_reduce_244,
  3, 183, :_reduce_245,
  3, 183, :_reduce_246,
  3, 183, :_reduce_247,
  6, 183, :_reduce_248,
  4, 183, :_reduce_249,
  6, 183, :_reduce_250,
  4, 183, :_reduce_251,
  6, 183, :_reduce_252,
  1, 183, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  3, 226, :_reduce_258,
  3, 226, :_reduce_259,
  1, 230, :_reduce_none,
  1, 231, :_reduce_none,
  2, 231, :_reduce_none,
  4, 231, :_reduce_263,
  2, 231, :_reduce_264,
  1, 224, :_reduce_none,
  3, 224, :_reduce_266,
  3, 236, :_reduce_267,
  5, 236, :_reduce_268,
  3, 236, :_reduce_269,
  0, 238, :_reduce_270,
  1, 238, :_reduce_none,
  0, 178, :_reduce_272,
  1, 178, :_reduce_none,
  2, 178, :_reduce_none,
  4, 178, :_reduce_275,
  2, 178, :_reduce_276,
  1, 208, :_reduce_277,
  2, 208, :_reduce_278,
  2, 208, :_reduce_279,
  4, 208, :_reduce_280,
  1, 208, :_reduce_281,
  0, 241, :_reduce_282,
  2, 201, :_reduce_283,
  2, 240, :_reduce_284,
  2, 239, :_reduce_285,
  0, 239, :_reduce_286,
  1, 233, :_reduce_287,
  2, 233, :_reduce_288,
  3, 233, :_reduce_289,
  4, 233, :_reduce_290,
  1, 172, :_reduce_291,
  1, 172, :_reduce_none,
  3, 171, :_reduce_293,
  4, 171, :_reduce_294,
  2, 171, :_reduce_295,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_306,
  0, 263, :_reduce_307,
  4, 228, :_reduce_308,
  0, 264, :_reduce_309,
  4, 228, :_reduce_310,
  0, 265, :_reduce_311,
  4, 228, :_reduce_312,
  3, 228, :_reduce_313,
  3, 228, :_reduce_314,
  2, 228, :_reduce_315,
  3, 228, :_reduce_316,
  3, 228, :_reduce_317,
  1, 228, :_reduce_318,
  4, 228, :_reduce_319,
  3, 228, :_reduce_320,
  1, 228, :_reduce_321,
  5, 228, :_reduce_322,
  4, 228, :_reduce_323,
  3, 228, :_reduce_324,
  2, 228, :_reduce_325,
  1, 228, :_reduce_none,
  2, 228, :_reduce_327,
  1, 228, :_reduce_none,
  6, 228, :_reduce_329,
  6, 228, :_reduce_330,
  4, 228, :_reduce_331,
  4, 228, :_reduce_332,
  5, 228, :_reduce_333,
  4, 228, :_reduce_334,
  5, 228, :_reduce_335,
  6, 228, :_reduce_336,
  0, 266, :_reduce_337,
  6, 228, :_reduce_338,
  0, 267, :_reduce_339,
  7, 228, :_reduce_340,
  0, 268, :_reduce_341,
  5, 228, :_reduce_342,
  4, 228, :_reduce_343,
  4, 228, :_reduce_344,
  1, 228, :_reduce_345,
  1, 228, :_reduce_346,
  1, 228, :_reduce_347,
  1, 228, :_reduce_348,
  1, 177, :_reduce_none,
  1, 207, :_reduce_350,
  1, 255, :_reduce_none,
  1, 255, :_reduce_none,
  2, 255, :_reduce_353,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 256, :_reduce_none,
  5, 256, :_reduce_357,
  1, 160, :_reduce_none,
  2, 160, :_reduce_359,
  1, 259, :_reduce_none,
  1, 259, :_reduce_none,
  1, 269, :_reduce_362,
  3, 269, :_reduce_363,
  1, 272, :_reduce_364,
  3, 272, :_reduce_365,
  1, 271, :_reduce_none,
  3, 271, :_reduce_367,
  5, 271, :_reduce_368,
  1, 271, :_reduce_369,
  3, 271, :_reduce_370,
  2, 273, :_reduce_371,
  1, 273, :_reduce_372,
  1, 274, :_reduce_none,
  1, 274, :_reduce_none,
  4, 277, :_reduce_375,
  2, 277, :_reduce_376,
  2, 277, :_reduce_377,
  1, 277, :_reduce_378,
  2, 281, :_reduce_379,
  0, 281, :_reduce_380,
  1, 282, :_reduce_none,
  6, 283, :_reduce_382,
  8, 283, :_reduce_383,
  4, 283, :_reduce_384,
  6, 283, :_reduce_385,
  4, 283, :_reduce_386,
  2, 283, :_reduce_none,
  6, 283, :_reduce_388,
  2, 283, :_reduce_389,
  4, 283, :_reduce_390,
  6, 283, :_reduce_391,
  2, 283, :_reduce_392,
  4, 283, :_reduce_393,
  2, 283, :_reduce_394,
  4, 283, :_reduce_395,
  1, 283, :_reduce_none,
  0, 287, :_reduce_397,
  1, 287, :_reduce_398,
  3, 288, :_reduce_399,
  4, 288, :_reduce_400,
  1, 289, :_reduce_401,
  4, 289, :_reduce_402,
  1, 290, :_reduce_403,
  3, 290, :_reduce_404,
  1, 291, :_reduce_405,
  1, 291, :_reduce_none,
  0, 295, :_reduce_407,
  0, 296, :_reduce_408,
  5, 254, :_reduce_409,
  4, 293, :_reduce_410,
  1, 293, :_reduce_411,
  0, 299, :_reduce_412,
  4, 294, :_reduce_413,
  0, 300, :_reduce_414,
  4, 294, :_reduce_415,
  0, 302, :_reduce_416,
  4, 298, :_reduce_417,
  2, 199, :_reduce_418,
  4, 199, :_reduce_419,
  5, 199, :_reduce_420,
  5, 199, :_reduce_421,
  2, 253, :_reduce_422,
  4, 253, :_reduce_423,
  4, 253, :_reduce_424,
  3, 253, :_reduce_425,
  3, 253, :_reduce_426,
  3, 253, :_reduce_427,
  2, 253, :_reduce_428,
  1, 253, :_reduce_429,
  4, 253, :_reduce_430,
  0, 304, :_reduce_431,
  4, 252, :_reduce_432,
  0, 305, :_reduce_433,
  4, 252, :_reduce_434,
  0, 306, :_reduce_435,
  3, 203, :_reduce_436,
  0, 307, :_reduce_437,
  0, 308, :_reduce_438,
  4, 301, :_reduce_439,
  5, 257, :_reduce_440,
  1, 309, :_reduce_441,
  1, 309, :_reduce_none,
  0, 312, :_reduce_443,
  0, 313, :_reduce_444,
  7, 258, :_reduce_445,
  1, 311, :_reduce_446,
  1, 311, :_reduce_none,
  1, 310, :_reduce_448,
  3, 310, :_reduce_449,
  3, 310, :_reduce_450,
  1, 314, :_reduce_none,
  2, 314, :_reduce_452,
  3, 314, :_reduce_453,
  1, 314, :_reduce_454,
  1, 314, :_reduce_455,
  1, 314, :_reduce_456,
  1, 184, :_reduce_none,
  3, 319, :_reduce_458,
  1, 319, :_reduce_none,
  3, 321, :_reduce_460,
  1, 321, :_reduce_none,
  1, 323, :_reduce_462,
  1, 324, :_reduce_463,
  1, 322, :_reduce_none,
  1, 322, :_reduce_none,
  4, 322, :_reduce_466,
  4, 322, :_reduce_467,
  4, 322, :_reduce_468,
  3, 322, :_reduce_469,
  4, 322, :_reduce_470,
  4, 322, :_reduce_471,
  4, 322, :_reduce_472,
  3, 322, :_reduce_473,
  3, 322, :_reduce_474,
  3, 322, :_reduce_475,
  2, 322, :_reduce_476,
  0, 328, :_reduce_477,
  4, 322, :_reduce_478,
  2, 322, :_reduce_479,
  0, 329, :_reduce_480,
  4, 322, :_reduce_481,
  1, 315, :_reduce_482,
  1, 315, :_reduce_483,
  2, 315, :_reduce_484,
  3, 315, :_reduce_485,
  5, 315, :_reduce_486,
  2, 315, :_reduce_487,
  4, 315, :_reduce_488,
  1, 315, :_reduce_none,
  2, 330, :_reduce_490,
  3, 330, :_reduce_491,
  1, 317, :_reduce_492,
  3, 317, :_reduce_493,
  5, 316, :_reduce_494,
  2, 333, :_reduce_495,
  1, 333, :_reduce_496,
  1, 332, :_reduce_497,
  3, 332, :_reduce_498,
  1, 331, :_reduce_none,
  3, 318, :_reduce_500,
  1, 318, :_reduce_501,
  2, 318, :_reduce_502,
  1, 318, :_reduce_503,
  1, 334, :_reduce_504,
  3, 334, :_reduce_505,
  2, 336, :_reduce_506,
  1, 336, :_reduce_507,
  1, 337, :_reduce_508,
  3, 337, :_reduce_509,
  2, 339, :_reduce_510,
  1, 339, :_reduce_511,
  2, 341, :_reduce_512,
  1, 335, :_reduce_none,
  1, 335, :_reduce_none,
  1, 325, :_reduce_none,
  3, 325, :_reduce_516,
  3, 325, :_reduce_517,
  2, 325, :_reduce_518,
  2, 325, :_reduce_519,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  2, 325, :_reduce_523,
  2, 325, :_reduce_524,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  1, 342, :_reduce_533,
  1, 342, :_reduce_none,
  1, 320, :_reduce_535,
  2, 343, :_reduce_536,
  4, 344, :_reduce_537,
  2, 326, :_reduce_538,
  3, 326, :_reduce_539,
  1, 326, :_reduce_540,
  6, 159, :_reduce_541,
  0, 159, :_reduce_542,
  1, 345, :_reduce_543,
  1, 345, :_reduce_none,
  1, 345, :_reduce_none,
  2, 346, :_reduce_546,
  1, 346, :_reduce_none,
  2, 161, :_reduce_548,
  1, 161, :_reduce_none,
  1, 242, :_reduce_none,
  1, 242, :_reduce_none,
  1, 243, :_reduce_552,
  1, 348, :_reduce_553,
  2, 348, :_reduce_554,
  3, 349, :_reduce_555,
  1, 349, :_reduce_556,
  1, 349, :_reduce_557,
  3, 244, :_reduce_558,
  4, 245, :_reduce_559,
  3, 246, :_reduce_560,
  0, 352, :_reduce_561,
  3, 352, :_reduce_562,
  1, 353, :_reduce_563,
  2, 353, :_reduce_564,
  3, 248, :_reduce_565,
  0, 355, :_reduce_566,
  3, 355, :_reduce_567,
  3, 247, :_reduce_568,
  3, 249, :_reduce_569,
  0, 356, :_reduce_570,
  3, 356, :_reduce_571,
  0, 357, :_reduce_572,
  3, 357, :_reduce_573,
  0, 338, :_reduce_574,
  2, 338, :_reduce_575,
  0, 350, :_reduce_576,
  2, 350, :_reduce_577,
  0, 351, :_reduce_578,
  2, 351, :_reduce_579,
  1, 354, :_reduce_580,
  2, 354, :_reduce_581,
  0, 359, :_reduce_582,
  4, 354, :_reduce_583,
  1, 358, :_reduce_584,
  1, 358, :_reduce_585,
  1, 358, :_reduce_586,
  1, 358, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 360, :_reduce_590,
  3, 361, :_reduce_591,
  1, 347, :_reduce_592,
  2, 347, :_reduce_593,
  1, 225, :_reduce_594,
  1, 225, :_reduce_595,
  1, 225, :_reduce_596,
  1, 225, :_reduce_597,
  1, 216, :_reduce_598,
  1, 216, :_reduce_599,
  1, 216, :_reduce_600,
  1, 216, :_reduce_601,
  1, 216, :_reduce_602,
  1, 217, :_reduce_603,
  1, 217, :_reduce_604,
  1, 217, :_reduce_605,
  1, 217, :_reduce_606,
  1, 217, :_reduce_607,
  1, 217, :_reduce_608,
  1, 217, :_reduce_609,
  1, 250, :_reduce_610,
  1, 250, :_reduce_611,
  1, 176, :_reduce_612,
  1, 176, :_reduce_613,
  1, 181, :_reduce_614,
  1, 181, :_reduce_615,
  0, 362, :_reduce_616,
  4, 260, :_reduce_617,
  0, 260, :_reduce_618,
  1, 227, :_reduce_none,
  1, 227, :_reduce_620,
  3, 363, :_reduce_621,
  5, 363, :_reduce_622,
  3, 363, :_reduce_623,
  1, 262, :_reduce_none,
  0, 365, :_reduce_625,
  3, 262, :_reduce_626,
  4, 364, :_reduce_627,
  2, 364, :_reduce_628,
  2, 364, :_reduce_629,
  1, 364, :_reduce_630,
  2, 367, :_reduce_631,
  0, 367, :_reduce_632,
  6, 297, :_reduce_633,
  8, 297, :_reduce_634,
  4, 297, :_reduce_635,
  6, 297, :_reduce_636,
  4, 297, :_reduce_637,
  6, 297, :_reduce_638,
  2, 297, :_reduce_639,
  4, 297, :_reduce_640,
  6, 297, :_reduce_641,
  2, 297, :_reduce_642,
  4, 297, :_reduce_643,
  2, 297, :_reduce_644,
  4, 297, :_reduce_645,
  1, 297, :_reduce_646,
  0, 297, :_reduce_647,
  1, 237, :_reduce_648,
  1, 292, :_reduce_649,
  1, 292, :_reduce_650,
  1, 292, :_reduce_651,
  1, 292, :_reduce_652,
  1, 270, :_reduce_none,
  1, 270, :_reduce_654,
  1, 369, :_reduce_655,
  1, 370, :_reduce_656,
  3, 370, :_reduce_657,
  1, 284, :_reduce_658,
  3, 284, :_reduce_659,
  1, 371, :_reduce_660,
  2, 372, :_reduce_661,
  1, 372, :_reduce_662,
  2, 373, :_reduce_663,
  1, 373, :_reduce_664,
  1, 278, :_reduce_665,
  3, 278, :_reduce_666,
  1, 366, :_reduce_667,
  3, 366, :_reduce_668,
  1, 340, :_reduce_none,
  1, 340, :_reduce_none,
  2, 276, :_reduce_671,
  2, 275, :_reduce_672,
  1, 275, :_reduce_673,
  3, 374, :_reduce_674,
  3, 375, :_reduce_675,
  1, 285, :_reduce_676,
  3, 285, :_reduce_677,
  1, 368, :_reduce_678,
  3, 368, :_reduce_679,
  1, 376, :_reduce_none,
  1, 376, :_reduce_none,
  2, 286, :_reduce_682,
  1, 286, :_reduce_683,
  1, 377, :_reduce_none,
  1, 377, :_reduce_none,
  2, 280, :_reduce_686,
  2, 279, :_reduce_687,
  0, 279, :_reduce_688,
  1, 194, :_reduce_none,
  3, 194, :_reduce_690,
  0, 251, :_reduce_691,
  2, 251, :_reduce_none,
  1, 235, :_reduce_693,
  3, 235, :_reduce_694,
  3, 378, :_reduce_695,
  2, 378, :_reduce_696,
  4, 378, :_reduce_697,
  2, 378, :_reduce_698,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 303, :_reduce_none,
  1, 303, :_reduce_none,
  1, 303, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 180, :_reduce_711,
  1, 180, :_reduce_712,
  0, 152, :_reduce_none,
  1, 152, :_reduce_none,
  0, 182, :_reduce_none,
  1, 182, :_reduce_none,
  2, 211, :_reduce_717,
  2, 179, :_reduce_718,
  2, 327, :_reduce_719,
  0, 234, :_reduce_none,
  1, 234, :_reduce_none,
  1, 234, :_reduce_none,
  1, 261, :_reduce_723,
  1, 261, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_none,
  0, 232, :_reduce_727 ]

racc_reduce_n = 728

racc_shift_n = 1220

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tBDOT2 => 143,
  :tBDOT3 => 144,
  :tEQL => 145,
  :tLOWEST => 146 }

racc_nt_base = 147

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tBDOT2",
  "tBDOT3",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@2",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "p_expr",
  "@3",
  "@4",
  "expr_value_do",
  "do",
  "def_name",
  "@5",
  "fname",
  "defn_head",
  "defs_head",
  "singleton",
  "dot_or_colon",
  "@6",
  "command",
  "block_command",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@7",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "op",
  "reswords",
  "symbol",
  "@8",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "f_opt_paren_args",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "args_forward",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@9",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "case_body",
  "p_case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "f_rest_marg",
  "f_any_kwrest",
  "f_kwrest",
  "f_no_kwarg",
  "block_args_tail",
  "f_block_kwarg",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "excessed_comma",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@16",
  "@17",
  "f_args",
  "do_block",
  "@18",
  "@19",
  "do_body",
  "@20",
  "operation3",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "cases",
  "p_top_expr",
  "p_cases",
  "@26",
  "@27",
  "p_top_expr_body",
  "p_args",
  "p_find",
  "p_args_tail",
  "p_kwargs",
  "p_as",
  "p_variable",
  "p_alt",
  "p_expr_basic",
  "p_lparen",
  "p_lbracket",
  "p_value",
  "p_const",
  "rbrace",
  "@28",
  "@29",
  "p_args_head",
  "p_arg",
  "p_args_post",
  "p_rest",
  "p_kwarg",
  "p_any_kwrest",
  "p_kw",
  "p_kw_label",
  "string_contents",
  "p_kwrest",
  "kwrest_mark",
  "p_kwnorest",
  "p_primitive",
  "p_var_ref",
  "p_expr_ref",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@30",
  "ssym",
  "dsym",
  "@31",
  "f_paren_args",
  "args_tail",
  "@32",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      @current_arg_stack.push(nil)
                      @max_numparam_stack.push
                    
    result
end

def _reduce_2(val, _values, result)
                      result = val[1]

                      @current_arg_stack.pop
                      @max_numparam_stack.pop
                    
    result
end

def _reduce_3(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_4(val, _values, result)
                      result = []
                    
    result
end

def _reduce_5(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_7(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      result = @builder.preexe(val[0], *val[1])
                    
    result
end

def _reduce_10(val, _values, result)
                      result = val
                    
    result
end

def _reduce_11(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_t.nil?
                        diagnostic :error, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_12(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_13(val, _values, result)
                      result = []
                    
    result
end

def _reduce_14(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 17 omitted

def _reduce_18(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_19(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_23(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_29(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_30(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 31 omitted

def _reduce_32(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_34(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                                         nil, nil, nil,
                                                         nil, val[4])
                      begin_body = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.multi_assign(val[0], val[1], begin_body)
                    
    result
end

def _reduce_35(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 36 omitted

def _reduce_37(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_40(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_41(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_42(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_43(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_44(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 45 omitted

def _reduce_46(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

# reduce 47 omitted

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_50(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_51(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_52(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_53(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      @pattern_variables.push

                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_54(val, _values, result)
                      @pattern_variables.pop
                      @lexer.in_kwarg = val[2]
                      result = @builder.match_pattern(val[0], val[1], val[3])
                    
    result
end

def _reduce_55(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      @pattern_variables.push

                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_56(val, _values, result)
                      @pattern_variables.pop
                      @lexer.in_kwarg = val[2]
                      result = @builder.match_pattern_p(val[0], val[1], val[3])
                    
    result
end

# reduce 57 omitted

# reduce 58 omitted

def _reduce_59(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_60(val, _values, result)
                      @lexer.cond.pop
                      result = [ val[1], val[2] ]
                    
    result
end

def _reduce_61(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @current_arg_stack.push(nil)

                      result = val[0]
                    
    result
end

def _reduce_62(val, _values, result)
                      @context.push(:def)

                      result = [ val[0], val[1] ]
                    
    result
end

def _reduce_63(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_64(val, _values, result)
                      @context.push(:defs)

                      result = [ val[0], val[1], val[2], val[4] ]
                    
    result
end

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

def _reduce_68(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_69(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_70(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_73(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_74(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_75(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_77(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_78(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_80(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_82(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_83(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_84(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_85(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_86(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 87 omitted

def _reduce_88(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_90(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_91(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_92(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_93(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_94(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_95(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_96(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 97 omitted

def _reduce_98(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_106(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_107(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_108(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_110(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_111(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_112(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_113(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_114(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_115(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_116(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_117(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_118(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_119(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_120(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_121(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 122 omitted

def _reduce_123(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_124(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_125(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

def _reduce_131(val, _values, result)
                      result = @builder.symbol_internal(val[0])
                    
    result
end

# reduce 132 omitted

def _reduce_133(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_134(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_135(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

def _reduce_207(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_213(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_214(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 235 omitted

def _reduce_236(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_238(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_239(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_240(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_241(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_242(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_243(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_244(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_245(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_246(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_247(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_248(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

def _reduce_249(val, _values, result)
                      _def_t, name_t = val[0]
                      endless_method_name(name_t)

                      result = @builder.def_endless_method(*val[0],
                                 val[1], val[2], val[3])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_250(val, _values, result)
                      _def_t, name_t = val[0]
                      endless_method_name(name_t)

                      rescue_body = @builder.rescue_body(val[4],
                                        nil, nil, nil,
                                        nil, val[5])

                      method_body = @builder.begin_body(val[3], [ rescue_body ])

                      result = @builder.def_endless_method(*val[0],
                                 val[1], val[2], method_body)

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_251(val, _values, result)
                      _def_t, _recv, _dot_t, name_t = val[0]
                      endless_method_name(name_t)

                      result = @builder.def_endless_singleton(*val[0],
                                 val[1], val[2], val[3])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_252(val, _values, result)
                      _def_t, _recv, _dot_t, name_t = val[0]
                      endless_method_name(name_t)

                      rescue_body = @builder.rescue_body(val[4],
                                        nil, nil, nil,
                                        nil, val[5])

                      method_body = @builder.begin_body(val[3], [ rescue_body ])

                      result = @builder.def_endless_singleton(*val[0],
                                 val[1], val[2], method_body)

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

# reduce 253 omitted

# reduce 254 omitted

# reduce 255 omitted

# reduce 256 omitted

# reduce 257 omitted

def _reduce_258(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_259(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

def _reduce_263(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_264(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

# reduce 265 omitted

def _reduce_266(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_267(val, _values, result)
                      result = val
                    
    result
end

def _reduce_268(val, _values, result)
                      unless @static_env.declared_forward_args?
                        diagnostic :error, :unexpected_token, { :token => 'tBDOT3' } , val[3]
                      end

                      result = [val[0], [*val[1], @builder.forwarded_args(val[3])], val[4]]
                    
    result
end

def _reduce_269(val, _values, result)
                      unless @static_env.declared_forward_args?
                        diagnostic :error, :unexpected_token, { :token => 'tBDOT3' } , val[1]
                      end

                      result = [val[0], [@builder.forwarded_args(val[1])], val[2]]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 271 omitted

def _reduce_272(val, _values, result)
                      result = []
                    
    result
end

# reduce 273 omitted

# reduce 274 omitted

def _reduce_275(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_276(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_277(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_278(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_279(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_280(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_281(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_282(val, _values, result)
                      # When branch gets invoked by RACC's lookahead
                      # and command args start with '[' or '('
                      # we need to put `true` to the cmdarg stack
                      # **before** `false` pushed by lexer
                      #   m [], n
                      #     ^
                      # Right here we have cmdarg [...0] because
                      # lexer pushed it on '['
                      # We need to modify cmdarg stack to [...10]
                      #
                      # For all other cases (like `m n` or `m n, []`) we simply put 1 to the stack
                      # and later lexer pushes corresponding bits on top of it.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACK || last_token == :tLPAREN_ARG

                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.push(true)
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.push(true)
                      end
                    
    result
end

def _reduce_283(val, _values, result)
                      # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
                      # but the push must be done after cmdarg.pop() in the parser.
                      # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
                      # cmdarg.pop() to pop 1 pushed by command_args,
                      # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACE_ARG
                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.pop
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.pop
                      end

                      result = val[1]
                    
    result
end

def _reduce_284(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_285(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_286(val, _values, result)
                      result = []
                    
    result
end

def _reduce_287(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_288(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_289(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_290(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_291(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 292 omitted

def _reduce_293(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_294(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_295(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 296 omitted

# reduce 297 omitted

# reduce 298 omitted

# reduce 299 omitted

# reduce 300 omitted

# reduce 301 omitted

# reduce 302 omitted

# reduce 303 omitted

# reduce 304 omitted

# reduce 305 omitted

def _reduce_306(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_307(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_308(val, _values, result)
                      @lexer.cmdarg.pop

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_309(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_310(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_311(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_312(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_313(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_314(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_315(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_316(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_317(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_318(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_319(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_320(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_321(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_322(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_323(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_324(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_325(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 326 omitted

def _reduce_327(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 328 omitted

def _reduce_329(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_330(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_331(val, _values, result)
                      result = @builder.loop(:while, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_332(val, _values, result)
                      result = @builder.loop(:until, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_333(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_334(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_335(val, _values, result)
                      *in_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case_match(val[0], val[1],
                                             in_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_336(val, _values, result)
                      result = @builder.for(val[0], val[1], val[2], *val[3], val[4], val[5])
                    
    result
end

def _reduce_337(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:class)
                    
    result
end

def _reduce_338(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_339(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:sclass)
                    
    result
end

def _reduce_340(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_341(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @context.push(:module)
                    
    result
end

def _reduce_342(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_343(val, _values, result)
                      result = @builder.def_method(*val[0], val[1],
                                  val[2], val[3])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_344(val, _values, result)
                      result = @builder.def_singleton(*val[0], val[1],
                                  val[2], val[3])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_345(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_346(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_347(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_348(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 349 omitted

def _reduce_350(val, _values, result)
                      if @context.in_class?
                        diagnostic :error, :invalid_return, nil, val[0]
                      end
                    
    result
end

# reduce 351 omitted

# reduce 352 omitted

def _reduce_353(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

def _reduce_357(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 358 omitted

def _reduce_359(val, _values, result)
                      result = val
                    
    result
end

# reduce 360 omitted

# reduce 361 omitted

def _reduce_362(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_364(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_365(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 366 omitted

def _reduce_367(val, _values, result)
                      result = val[0].
                                  push(val[2])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = val[0].
                                  push(val[2]).
                                  concat(val[4])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_370(val, _values, result)
                      result = [ val[0], *val[2] ]
                    
    result
end

def _reduce_371(val, _values, result)
                      result = @builder.restarg(val[0], val[1])
                    
    result
end

def _reduce_372(val, _values, result)
                      result = @builder.restarg(val[0])
                    
    result
end

# reduce 373 omitted

# reduce 374 omitted

def _reduce_375(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_377(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_378(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_379(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_380(val, _values, result)
                      result = []
                    
    result
end

# reduce 381 omitted

def _reduce_382(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_383(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_384(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_385(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_386(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 387 omitted

def _reduce_388(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_389(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_390(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_391(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_392(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_393(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_394(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_395(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 396 omitted

def _reduce_397(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_398(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_399(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      @current_arg_stack.set(nil)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_400(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      @current_arg_stack.set(nil)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_401(val, _values, result)
                      result = []
                    
    result
end

def _reduce_402(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_403(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_404(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_405(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 406 omitted

def _reduce_407(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                      @context.push(:lambda)
                    
    result
end

def _reduce_408(val, _values, result)
                      @context.pop
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_409(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[2]
                      begin_t, body, end_t = val[4]

                      @max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop

                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_410(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_411(val, _values, result)
                      if val[0].any?
                        @max_numparam_stack.has_ordinary_params!
                      end
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_412(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_413(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_414(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_415(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_416(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_417(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_418(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_419(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_420(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_421(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_422(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_423(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_424(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_425(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_426(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_427(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_428(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_429(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_430(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_431(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_432(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_433(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_434(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_435(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                    
    result
end

def _reduce_436(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[1]
                      result = [ args, val[2] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                    
    result
end

def _reduce_437(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                    
    result
end

def _reduce_438(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_439(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[2]
                      result = [ args, val[3] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_440(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_441(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 442 omitted

def _reduce_443(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      @pattern_variables.push
                      @pattern_hash_keys.push

                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_444(val, _values, result)
                      @pattern_variables.pop
                      @pattern_hash_keys.pop
                      @lexer.in_kwarg = val[1]
                    
    result
end

def _reduce_445(val, _values, result)
                      result = [ @builder.in_pattern(val[0], *val[2], val[3], val[5]),
                                 *val[6] ]
                    
    result
end

def _reduce_446(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 447 omitted

def _reduce_448(val, _values, result)
                      result = [ val[0], nil ]
                    
    result
end

def _reduce_449(val, _values, result)
                      result = [ val[0], @builder.if_guard(val[1], val[2]) ]
                    
    result
end

def _reduce_450(val, _values, result)
                      result = [ val[0], @builder.unless_guard(val[1], val[2]) ]
                    
    result
end

# reduce 451 omitted

def _reduce_452(val, _values, result)
                      # array patterns that end with comma
                      # like 1, 2,
                      # must be emitted as `array_pattern_with_tail`
                      item = @builder.match_with_trailing_comma(val[0], val[1])
                      result = @builder.array_pattern(nil, [ item ], nil)
                    
    result
end

def _reduce_453(val, _values, result)
                      result = @builder.array_pattern(nil, [val[0]].concat(val[2]), nil)
                    
    result
end

def _reduce_454(val, _values, result)
                      result = @builder.find_pattern(nil, val[0], nil)
                    
    result
end

def _reduce_455(val, _values, result)
                      result = @builder.array_pattern(nil, val[0], nil)
                    
    result
end

def _reduce_456(val, _values, result)
                      result = @builder.hash_pattern(nil, val[0], nil)
                    
    result
end

# reduce 457 omitted

def _reduce_458(val, _values, result)
                      result = @builder.match_as(val[0], val[1], val[2])
                    
    result
end

# reduce 459 omitted

def _reduce_460(val, _values, result)
                      result = @builder.match_alt(val[0], val[1], val[2])
                    
    result
end

# reduce 461 omitted

def _reduce_462(val, _values, result)
                      result = val[0]
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_463(val, _values, result)
                      result = val[0]
                      @pattern_hash_keys.push
                    
    result
end

# reduce 464 omitted

# reduce 465 omitted

def _reduce_466(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.array_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_467(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.find_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_468(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.hash_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_469(val, _values, result)
                      pattern = @builder.array_pattern(val[1], nil, val[2])
                      result = @builder.const_pattern(val[0], val[1], pattern, val[2])
                    
    result
end

def _reduce_470(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.array_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_471(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.find_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_472(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.hash_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_473(val, _values, result)
                      pattern = @builder.array_pattern(val[1], nil, val[2])
                      result = @builder.const_pattern(val[0], val[1], pattern, val[2])
                    
    result
end

def _reduce_474(val, _values, result)
                      result = @builder.array_pattern(val[0], val[1], val[2])
                    
    result
end

def _reduce_475(val, _values, result)
                      result = @builder.find_pattern(val[0], val[1], val[2])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = @builder.array_pattern(val[0], [], val[1])
                    
    result
end

def _reduce_477(val, _values, result)
                      @pattern_hash_keys.push
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = false
                    
    result
end

def _reduce_478(val, _values, result)
                      @pattern_hash_keys.pop
                      @lexer.in_kwarg = val[1]
                      result = @builder.hash_pattern(val[0], val[2], val[3])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = @builder.hash_pattern(val[0], [], val[1])
                    
    result
end

def _reduce_480(val, _values, result)
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_481(val, _values, result)
                      @pattern_hash_keys.pop
                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_483(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_484(val, _values, result)
                      result = [ *val[0], val[1] ]
                    
    result
end

def _reduce_485(val, _values, result)
                      match_rest = @builder.match_rest(val[1], val[2])
                      result = [ *val[0], match_rest ]
                    
    result
end

def _reduce_486(val, _values, result)
                      match_rest = @builder.match_rest(val[1], val[2])
                      result = [ *val[0], match_rest, *val[4] ]
                    
    result
end

def _reduce_487(val, _values, result)
                      result = [ *val[0], @builder.match_rest(val[1]) ]
                    
    result
end

def _reduce_488(val, _values, result)
                      result = [ *val[0], @builder.match_rest(val[1]), *val[3] ]
                    
    result
end

# reduce 489 omitted

def _reduce_490(val, _values, result)
                      # array patterns that end with comma
                      # like [1, 2,]
                      # must be emitted as `array_pattern_with_tail`
                      item = @builder.match_with_trailing_comma(val[0], val[1])
                      result = [ item ]
                    
    result
end

def _reduce_491(val, _values, result)
                      # array patterns that end with comma
                      # like [1, 2,]
                      # must be emitted as `array_pattern_with_tail`
                      last_item = @builder.match_with_trailing_comma(val[1], val[2])
                      result = [ *val[0], last_item ]
                    
    result
end

def _reduce_492(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_493(val, _values, result)
                      result = [ val[0], *val[2] ]
                    
    result
end

def _reduce_494(val, _values, result)
                      result = [ val[0], *val[2], val[4] ]
                    
    result
end

def _reduce_495(val, _values, result)
                      result = @builder.match_rest(val[0], val[1])
                    
    result
end

def _reduce_496(val, _values, result)
                      result = @builder.match_rest(val[0])
                    
    result
end

def _reduce_497(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_498(val, _values, result)
                      result = [ *val[0], val[2] ]
                    
    result
end

# reduce 499 omitted

def _reduce_500(val, _values, result)
                      result = [ *val[0], *val[2] ]
                    
    result
end

def _reduce_501(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_502(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_503(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_504(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_505(val, _values, result)
                      result = [ *val[0], val[2] ]
                    
    result
end

def _reduce_506(val, _values, result)
                      result = @builder.match_pair(*val[0], val[1])
                    
    result
end

def _reduce_507(val, _values, result)
                      result = @builder.match_label(*val[0])
                    
    result
end

def _reduce_508(val, _values, result)
                    result = [:label, val[0]]
                  
    result
end

def _reduce_509(val, _values, result)
                    result = [:quoted, [val[0], val[1], val[2]]]
                  
    result
end

def _reduce_510(val, _values, result)
                      result = [ @builder.match_rest(val[0], val[1]) ]
                    
    result
end

def _reduce_511(val, _values, result)
                      result = [ @builder.match_rest(val[0], nil) ]
                    
    result
end

def _reduce_512(val, _values, result)
                      result = [ @builder.match_nil_pattern(val[0], val[1]) ]
                    
    result
end

# reduce 513 omitted

# reduce 514 omitted

# reduce 515 omitted

def _reduce_516(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_517(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_518(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_519(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

# reduce 520 omitted

# reduce 521 omitted

# reduce 522 omitted

def _reduce_523(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_524(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

# reduce 532 omitted

def _reduce_533(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

# reduce 534 omitted

def _reduce_535(val, _values, result)
                      result = @builder.match_var(val[0])
                    
    result
end

def _reduce_536(val, _values, result)
                      name = val[1][0]
                      unless static_env.declared?(name)
                        diagnostic :error, :undefined_lvar, { :name => name }, val[1]
                      end

                      lvar = @builder.accessible(@builder.ident(val[1]))
                      result = @builder.pin(val[0], lvar)
                    
    result
end

def _reduce_537(val, _values, result)
                      expr = @builder.begin(val[1], val[2], val[3])
                      result = @builder.pin(val[0], expr)
                    
    result
end

def _reduce_538(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_539(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_540(val, _values, result)
                      result = @builder.const(val[0])
                   
    result
end

def _reduce_541(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_542(val, _values, result)
                      result = []
                    
    result
end

def _reduce_543(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 544 omitted

# reduce 545 omitted

def _reduce_546(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 547 omitted

def _reduce_548(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 549 omitted

# reduce 550 omitted

# reduce 551 omitted

def _reduce_552(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_553(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_554(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_555(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_556(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_557(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_558(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_559(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_560(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_561(val, _values, result)
                      result = []
                    
    result
end

def _reduce_562(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_563(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_564(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_565(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_566(val, _values, result)
                      result = []
                    
    result
end

def _reduce_567(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_568(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_569(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_570(val, _values, result)
                      result = []
                    
    result
end

def _reduce_571(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_572(val, _values, result)
                      result = []
                    
    result
end

def _reduce_573(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_574(val, _values, result)
                      result = []
                    
    result
end

def _reduce_575(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_576(val, _values, result)
                      result = []
                    
    result
end

def _reduce_577(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_578(val, _values, result)
                      result = []
                    
    result
end

def _reduce_579(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_580(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_581(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_582(val, _values, result)
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                    
    result
end

def _reduce_583(val, _values, result)
                      @lexer.cmdarg.pop
                      @lexer.cond.pop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_584(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_585(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_586(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 587 omitted

# reduce 588 omitted

# reduce 589 omitted

def _reduce_590(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_591(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_592(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_593(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_594(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_595(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_596(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_597(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_598(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_599(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_600(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_601(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_602(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_603(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_604(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_605(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_606(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_607(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_608(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_609(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_610(val, _values, result)
                      if (node = val[0]) && node.type == :ident
                        name = node.children[0]

                        if name =~ /\A_[1-9]\z/ && !static_env.declared?(name) && context.in_dynamic_block?
                          # definitely an implicit param
                          location = node.loc.expression

                          if max_numparam_stack.has_ordinary_params?
                            diagnostic :error, :ordinary_param_defined, nil, [nil, location]
                          end

                          raw_context = context.stack.dup
                          raw_max_numparam_stack = max_numparam_stack.stack.dup

                          # ignore current block scope
                          raw_context.pop
                          raw_max_numparam_stack.pop

                          raw_context.reverse_each do |outer_scope|
                            if outer_scope == :block || outer_scope == :lambda
                              outer_scope_has_numparams = raw_max_numparam_stack.pop > 0

                              if outer_scope_has_numparams
                                diagnostic :error, :numparam_used_in_outer_scope, nil, [nil, location]
                              else
                                # for now it's ok, but an outer scope can also be a block
                                # with numparams, so we need to continue
                              end
                            else
                              # found an outer scope that can't have numparams
                              # like def/class/etc
                              break
                            end
                          end

                          static_env.declare(name)
                          max_numparam_stack.register(name[1].to_i)
                        end
                      end

                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_611(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_612(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_613(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_614(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_615(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_616(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_617(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_618(val, _values, result)
                      result = nil
                    
    result
end

# reduce 619 omitted

def _reduce_620(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_621(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_622(val, _values, result)
                      args = [ *val[1], @builder.forward_arg(val[3]) ]
                      result = @builder.args(val[0], args, val[4])

                      @static_env.declare_forward_args
                    
    result
end

def _reduce_623(val, _values, result)
                      result = @builder.forward_only_args(val[0], val[1], val[2])
                      @static_env.declare_forward_args

                      @lexer.state = :expr_value
                    
    result
end

# reduce 624 omitted

def _reduce_625(val, _values, result)
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_626(val, _values, result)
                      @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_627(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_628(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_629(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_630(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_631(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_632(val, _values, result)
                      result = []
                    
    result
end

def _reduce_633(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_634(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_635(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_636(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_637(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_638(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_639(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_640(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_641(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_642(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_643(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_644(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_645(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_646(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_647(val, _values, result)
                      result = []
                    
    result
end

def _reduce_648(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_649(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_650(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_651(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_652(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 653 omitted

def _reduce_654(val, _values, result)
                      @static_env.declare val[0][0]

                      @max_numparam_stack.has_ordinary_params!

                      result = val[0]
                    
    result
end

def _reduce_655(val, _values, result)
                      @current_arg_stack.set(val[0][0])
                      result = val[0]
                    
    result
end

def _reduce_656(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_657(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_658(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_659(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_660(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      @max_numparam_stack.has_ordinary_params!

                      @current_arg_stack.set(val[0][0])

                      result = val[0]
                    
    result
end

def _reduce_661(val, _values, result)
                      @current_arg_stack.set(nil)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_662(val, _values, result)
                      @current_arg_stack.set(nil)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_663(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_664(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_665(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_666(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_667(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_668(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 669 omitted

# reduce 670 omitted

def _reduce_671(val, _values, result)
                      result = [ @builder.kwnilarg(val[0], val[1]) ]
                    
    result
end

def _reduce_672(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_673(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_674(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_675(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_676(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_677(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_678(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_679(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 680 omitted

# reduce 681 omitted

def _reduce_682(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_683(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 684 omitted

# reduce 685 omitted

def _reduce_686(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_687(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_688(val, _values, result)
                      result = []
                    
    result
end

# reduce 689 omitted

def _reduce_690(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_691(val, _values, result)
                      result = []
                    
    result
end

# reduce 692 omitted

def _reduce_693(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_694(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_695(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_696(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_697(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_698(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 699 omitted

# reduce 700 omitted

# reduce 701 omitted

# reduce 702 omitted

# reduce 703 omitted

# reduce 704 omitted

# reduce 705 omitted

# reduce 706 omitted

# reduce 707 omitted

# reduce 708 omitted

# reduce 709 omitted

# reduce 710 omitted

def _reduce_711(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_712(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 713 omitted

# reduce 714 omitted

# reduce 715 omitted

# reduce 716 omitted

def _reduce_717(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_718(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_719(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 720 omitted

# reduce 721 omitted

# reduce 722 omitted

def _reduce_723(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 724 omitted

# reduce 725 omitted

# reduce 726 omitted

def _reduce_727(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby31
  end   # module Parser
